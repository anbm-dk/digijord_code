# 06: Models for soil drainage

# TO DO
# Import artificial drainge points [ok]
# Import soil drainage classes (get correct coordinates first)
# Extract covariates
# - AD [ok]
# - DC
# Extract folds
# - AD [ok]
# - DC
# Use C5.0 models (also try cubist for DC).
# - AD [ok]
# - DC
# Make small maps
# - AD
# - DC
# Make big maps
# - AD
# - DC
# Analyse results
# - AD
# - DC
# Use weights
# Use texture as covariates


# 1: Start up

library(devtools)

devtools::install_github("topepo/C5.0")

library(Cubist)
library(terra)
library(magrittr)
library(tools)
library(dplyr)
library(caret)
library(tibble)
library(tidyr)
library(C50)
library(sf)
library(exactextractr)
library(party)
library(rpart)
library(doParallel)
library(spatstat)  # weights

dir_code <- getwd()
root <- dirname(dir_code)
dir_dat <- paste0(root, "/digijord_data/")

testn <- 6
mycrs <- "EPSG:25832"

# Results folder

dir_results <- dir_dat %>%
  paste0(., "/results_test_", testn, "/") %T>%
  dir.create()

# 2 Load observations

obs_drain <- dir_dat %>%
  paste0(., "/observations/drainage_data/drainpts_2022.shp") %>%
  vect()

plot(obs_drain, "DR_N")


# 3: Extract folds

dir_folds <- dir_dat %>%
  paste0(., "/folds/")

file_folds_10_100m <- paste0(dir_folds, "/folds_10_100m.tif")

folds_10_100m <- rast(file_folds_10_100m)

folds_drain <- terra::extract(
  x = folds_10_100m,
  y = obs_drain,
  ID = FALSE,
)

write.table(
  folds_drain,
  paste0(dir_folds, "/folds_drain.csv"),
  row.names = FALSE,
  sep = ";"
)

folds_drain <- dir_folds %>%
  paste0(., "folds_drain.csv") %>%
  read.table(
    header = TRUE,
    sep = ";",
  )

names(folds_drain) <- "fold"

# 4: Load covariates

cov_dir <- dir_dat %>% paste0(., "/covariates")

cov_cats <- dir_code %>%
  paste0(., "/cov_categories_20230227.csv") %>%
  read.table(
    sep = ";",
    header = TRUE,
    fileEncoding = "latin1"
  )

cov_use <- cov_cats %>%
  filter(anbm_use == 1) %>%
  select(name) %>%
  unlist()

cov_files <- cov_dir %>% list.files

cov_names <- cov_files %>% tools::file_path_sans_ext()

cov_names[!cov_names %in% cov_cats$name]

cov <- paste0(cov_dir, "/", cov_files) %>%
  rast()

names(cov) <- cov_names

dir_extr <- dir_dat %>%
  paste0(., "/extracts/")

# drain_extr <- terra::extract(
#   x = cov,
#   y = obs_drain,
#   ID = FALSE,
# )
# 
# write.table(
#   drain_extr,
#   paste0(dir_extr, "drain_extr.csv"),
#   row.names = FALSE,
#   sep = ";"
# )
# 
# buffer_drain <- terra::buffer(
#   obs_drain,
#   width = 40
# ) %>%
#   st_as_sf()
# 
# buffer_drain_extr <- exact_extract(
#   x = cov,
#   y = buffer_drain,
#   fun = "mean",
#   progress = TRUE
# )
# 
# names(buffer_drain_extr) <- names(cov)
# 
# write.table(
#   buffer_drain_extr,
#   paste0(dir_extr, "/buffer_drain_extr.csv"),
#   row.names = FALSE,
#   sep = ";"
# )

usebuffer <- TRUE

if (usebuffer) {
  drain_extr <- dir_extr %>%
    paste0(., "/buffer_drain_extr.csv") %>%
    read.table(
      header = TRUE,
      sep = ";",
    )
} else {
  drain_extr <- dir_extr %>%
    paste0(., "/drain_extr.csv") %>%
    read.table(
      header = TRUE,
      sep = ";",
    )
}

# drain_extr1 <- drain_extr

# 6: Merge data

coords_drain <- geom(obs_drain) %>% as.data.frame() %>% select(c(x, y))

names(coords_drain) <- c("UTMX", "UTMY")

trdat_drain <- values(obs_drain) %>%
  cbind(., coords_drain, folds_drain, drain_extr)

trdat_drain$drained <- as.factor(trdat_drain$DR_N)

levels(trdat_drain$drained) <- c("No", "Yes")

# 7: Train models

cov_c <- cov_use %>%
  paste0(collapse = " + ")

formula_drain <- paste0("drained ~ ", cov_c) %>%
  as.formula()

trdat_drain %<>% filter(is.finite(fold))

# Calculate weights

dens_drain <- ppp(
  trdat_drain$UTMX,
  trdat_drain$UTMY,
  c(441000, 894000),
  c(6049000, 6403000)
) %>%
  density(
    sigma = 1000,
    at = 'points',
    leaveoneout = FALSE
  )

attributes(dens_drain) <- NULL

trdat_drain %<>%
  mutate(
    density = dens_drain,
    w = min(dens_drain) / dens_drain
  )

folds_drain_list <- lapply(
  1:10,
  function(x) {
    out <- trdat_drain %>%
      mutate(
        is_j = fold != x,
        rnum = row_number(),
        ind_j = is_j*rnum
      ) %>%
      filter(ind_j != 0) %>%
      select(ind_j) %>%
      unlist() %>%
      unname()
  }
)

tgrid <- expand.grid(
  list(
    model = c("rules", "tree"),
    winnow = FALSE,
    trials = c(1, seq(10, 100, 10))
  ),
  KEEP.OUT.ATTRS = FALSE,
  stringsAsFactors = FALSE
)

showConnections()

cl <- makePSOCKcluster(10)
registerDoParallel(cl)

set.seed(1)

model_drain <- caret::train(
  form = formula_drain,
  data = trdat_drain,
  method = "C5.0",
  na.action = na.pass,
  tuneGrid = tgrid,
  trControl = trainControl(
    index = folds_drain_list,
    savePredictions = "final"
  )
)

registerDoSEQ()
rm(cl)

model_drain

# Without buffers
# C5.0 
# 745 samples
# 121 predictors
# Resampling: Bootstrapped (10 reps) 
#   model  trials  Accuracy   Kappa    
# rules  100     0.6987109  0.3931187

# With buffers
# C5.0 
# 745 samples
# 121 predictors
# Resampling: Bootstrapped (10 reps) 
# Summary of sample sizes: 667, 668, 672, 658, 680, 667, ... 
# Resampling results across tuning parameters:
#   model  trials  Accuracy   Kappa    
# tree    70     0.6968081  0.3854105

model_drain2 <- C5.0(
  form = formula_drain,
  data = trdat_drain,
  trials = 100,
  model = "tree"
)

varImp(model_drain)
C5imp(model_drain$finalModel, metric = "splits", pct = FALSE)

saveRDS(
  model_drain,
  paste0(dir_results, "/model_drain.rds")
)

# END