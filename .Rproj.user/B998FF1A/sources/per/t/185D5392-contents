# 08: Script for making maps

library(parallel)
library(caret)
library(terra)
library(magrittr)
library(dplyr)
library(xgboost)
library(foreach)

dir_code <- getwd()
root <- dirname(dir_code)
dir_dat <- paste0(root, "/digijord_data/")

testn <- 11
mycrs <- "EPSG:25832"

dir_results <- dir_dat %>%
  paste0(., "/results_test_", testn, "/")

fractions <- c("clay", "silt", "fine_sand", "coarse_sand", "logSOC", "logCaCO3")

fractions_alt <- c("clay", "silt", "fine_sand", "coarse_sand", "SOC", "CaCO3")

fractions <- fractions_alt

fraction_names <- c(
  "Clay", "Silt", "Fine sand", "Coarse sand", "SOC", "CaCO3"
)

fraction_names_underscore <- c(
  "Clay", "Silt", "Fine_sand", "Coarse_sand", "SOC", "CaCO3"
)

dir_cov <- dir_dat %>% paste0(., "/covariates")
cov_files <- dir_cov %>% list.files()
cov_names <- cov_files %>% tools::file_path_sans_ext()

cov_cats <- dir_code %>%
  paste0(., "/cov_categories_20230501.csv") %>%
  read.table(
    sep = ";",
    header = TRUE
  )

cov_selected <- cov_cats %>%
  filter(anbm_use == 1) %>%
  dplyr::select(., name) %>%
  unlist() %>%
  unname()

source("f_predict_passna.R")

# Load models

models_loaded <- lapply(
  1:6,
  function(x) {
    out <- fractions[x] %>%
      paste0(dir_results, "/model_", ., ".rds") %>%
      readRDS()
    return(out)
  }
)

models <- models_loaded

# Tiles for model prediction

numCores <- detectCores()
numCores

dir_tiles <- dir_dat %>%
  paste0(., "/tiles_591/")

subdir_tiles <- dir_tiles %>% list.dirs() %>% .[-1]

dir_pred_all <- dir_results %>%
  paste0(., "/predictions/") %T>%
  dir.create()

dir_pred_tiles <- dir_pred_all  %>%
  paste0(., "/tiles/") %T>%
  dir.create()

n_digits <- 1

for (i in 1:length(fractions)) {
  frac <- fraction_names_underscore[i]
  
  dir_pred_tiles_frac <- dir_pred_tiles %>%
    paste0(., "/", frac, "/") %T>%
    dir.create()
  
  model_i <- models[[i]]
  
  showConnections()
  
  cl <- makeCluster(numCores)
  
  clusterEvalQ(
    cl,
    {
      library(terra)
      library(caret)
      library(xgboost)
      library(magrittr)
      library(dplyr)
      library(tools)
    }
  )
  
  clusterExport(
    cl,
    c("i",
      "model_i",
      "subdir_tiles",
      "dir_pred_tiles_frac",
      "frac",
      "cov_selected",
      "predict_passna",
      "dir_dat",
      "n_digits"
    )
  )
  
  parSapplyLB(
    cl,
    1:length(subdir_tiles),
    function(x) {
      tmpfolder <- paste0(dir_dat, "/Temp/")
      
      terraOptions(memfrac = 0.02, tempdir = tmpfolder)
      
      cov_x_files <- subdir_tiles[x] %>%
        list.files(full.names = TRUE)
      
      cov_x_names <- cov_x_files %>%
        basename() %>%
        file_path_sans_ext()
      
      cov_x <- cov_x_files %>% rast()
      
      names(cov_x) <- cov_x_names
      
      cov_x2 <- subset(cov_x, cov_selected)
      
      tilename_x <- basename(subdir_tiles[x])
      
      outname_x <- dir_pred_tiles_frac %>%
        paste0(., "/", frac, "_", tilename_x, ".tif")
      
      outmap <- predict(
        cov_x2,
        model_i,
        fun = predict_passna,
        na.rm = FALSE,
        const = data.frame(
          SOM_removed = 1,
          year = 2010
        ),
        n_const = 2,
        n_digits = 1,
        filename = outname_x,
        overwrite = TRUE
      )
      
      # if (i > 4) {
      #   outmap2 <- terra::exp(outmap)
      #   outmap <- outmap2
      # }
      
      # terra::math(
      #   outmap,
      #   "round",
      #   digits = n_digits,
      #   filename = outname_x,
      #   overwrite = TRUE
      #   )
    }
  )
  
  stopCluster(cl)
  foreach::registerDoSEQ()
  rm(cl)
  
  outtiles_frac <- dir_pred_tiles_frac %>%
    list.files(full.names = TRUE) %>%
    sprc()
  
  merge(
    outtiles_frac,
    filename = paste0(dir_pred_all, frac, "_merged.tif"),
    overwrite = TRUE
  )
}



# outfiles_table <- dir_pred_tiles_frac %>%
#   list.files(full.names = TRUE) %>%
#   file.info() %>%
#   rownames_to_column()
# 
# outfiles_dims <- dir_pred_tiles_frac %>%
#   list.files(full.names = TRUE) %>%
#   lapply(
#     function(x) {
#       r <- rast(x)
#       out <- dim(r)
#       return(out)
#     }
#   ) %>%
#   unlist() %>%
#   matrix(nrow = 3) %>%
#   t()
# 
# cbind(outfiles_table, outfiles_dims) %>%
#   write.table(
#     file = "out_tiles.csv",
#     sep = ";",
#     row.names = FALSE
#     )

# Without tiles:
# Maps for all of Denmark
# 2023-03-09: Took 24 hours for less than 25%. Not feasible.

# March 16, 2023: 60 tiles, 121 predictors, clay: 32 hours, cubist
# March 22, 2023: 591 tiles, 121 predictors, clay: 3 h 48 min, cubist

# Post processing:
# Sum texture to 100
# round values

# END