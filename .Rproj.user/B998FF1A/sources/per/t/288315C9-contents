# 05: Train texture models

# Cubist
# Use all observations, including NA (OK)
# Fractions:
# - Clay
# - Silt
# - Fine sand
# - Coarse sand
# - SOC (log)
# - CaCO3 (log)
# Topsoil
# Start with a small map for the test area
# Expand from there

# 1: Start up

library(Cubist)
library(terra)
library(magrittr)
library(tools)
library(dplyr)
library(caret)
library(tibble)
library(tidyr)

library(doParallel)
library(spatstat)  # weights

dir_code <- getwd()
root <- dirname(dir_code)
dir_dat <- paste0(root, "/digijord_data/")

testn <- 5
mycrs <- "EPSG:25832"

# Results folder

dir_results <- dir_dat %>%
  paste0(., "/results_test_", testn, "/") %T>%
  dir.create()

# 2: Load observations

dir_obs_proc <- dir_dat %>%
  paste0(., "/observations/processed/")

dsc <- dir_obs_proc %>%
  paste0(., "dsc.csv") %>%
  read.table(
    header = TRUE,
    sep = ";",
  ) %>%
  vect(
    geom = c("UTMX", "UTMY"),
    crs = mycrs,
    keepgeom = TRUE
  )

SEGES <- dir_obs_proc %>%
  paste0(., "SEGES.csv") %>%
  read.table(
    header = TRUE,
    sep = ";",
  ) %>%
  vect(
    geom = c("UTMX", "UTMY"),
    crs = mycrs,
    keepgeom = TRUE
  )

SINKS <- dir_obs_proc %>%
  paste0(., "SINKS.csv") %>%
  read.table(
    header = TRUE,
    sep = ";",
  ) %>%
  vect(
    geom = c("UTMX", "UTMY"),
    crs = mycrs,
    keepgeom = TRUE
  )


# 3: Load folds

dir_folds <- dir_dat %>%
  paste0(., "/folds/")

dsc_folds <- dir_folds %>%
  paste0(., "dsc_folds.csv") %>%
  read.table(
    header = TRUE,
    sep = ";",
  )

SEGES_folds <- dir_folds %>%
  paste0(., "SEGES_folds.csv") %>%
  read.table(
    header = TRUE,
    sep = ";",
  )

SINKS_folds <- dir_folds %>%
  paste0(., "SINKS_folds.csv") %>%
  read.table(
    header = TRUE,
    sep = ";",
  )


# 4: Load covariates

cov_dir <- dir_dat %>% paste0(., "/covariates")

cov_cats <- dir_code %>%
  paste0(., "/cov_categories_20230202.csv") %>%
  read.table(
    sep = ";",
    header = TRUE
  )

cov_files <- cov_dir %>% list.files

cov_names <- cov_files %>% tools::file_path_sans_ext()

cov_names %>%
  write.table(
    paste0("cov_names_", Sys.Date(), ".csv")

  )

cov_names[!cov_names %in% cov_cats$name]

cov <- paste0(cov_dir, "/", cov_files) %>%
  rast()

names(cov) <- cov_names


# 5: Load extracted covariates

dir_extr <- dir_dat %>%
  paste0(., "/extracts/")

dsc_extr <- dir_extr %>%
  paste0(., "dsc_extr.csv") %>%
  read.table(
    header = TRUE,
    sep = ";",
  )

SEGES_extr <- dir_extr %>%
  paste0(., "SEGES_extr.csv") %>%
  read.table(
    header = TRUE,
    sep = ";",
  )

SINKS_extr <- dir_extr %>%
  paste0(., "SINKS_extr.csv") %>%
  read.table(
    header = TRUE,
    sep = ";",
  )


# 6: Merge data and transform the target variables

obs <- list(dsc, SEGES, SINKS) %>%
  vect() %>%
  values() %>%
  mutate(
    logSOC = log(SOC),
    logCaCO3 = log(CaCO3)
  )

fractions <- c("clay", "silt", "fine_sand", "coarse_sand", "logSOC", "logCaCO3")

fraction_names <- c(
  "Clay", "Silt", "Fine sand", "Coarse sand", "SOC", "CaCO3"
)

bounds_lower <- c(0, 0, 0, 0, NA, NA)
bounds_upper <- c(100, 100, 100, 100, log(100), log(100))


# 7: Make training data

folds <- bind_rows(
  dsc_folds,
  SEGES_folds,
  SINKS_folds
)

names(folds) <- "fold"

extr <- bind_rows(
  dsc_extr,
  SEGES_extr,
  SINKS_extr
)

obs <- cbind(obs, extr, folds)

obs_top <- obs %>%
  filter(upper == 0)

obs_top_v <- obs_top %>% vect(geom = c("UTMX", "UTMY"))

library(viridisLite)


tiff(
  paste0(dir_results, "/obs_map_test", testn, ".tiff"),
  width = 15,
  height = 10,
  units = "cm",
  res = 300
)

plot(obs_top_v, "clay", breaks = 5, breakby = "cases", col = cividis(5))

dev.off()
dev.off()

plot(obs_top_v, "clay", breaks = 5, breakby = "cases", col = cividis(5))

# 8: Set up models
# Small random sample for testing

cov_c <- extr %>%
  names() %>%
  paste0(collapse = " + ")

tgrid <- data.frame(
  committees = 20,
  neighbors = 0
)

n <- 1000

# Remember to include full dataset in the final model
use_all_points <- TRUE

# Weighted RMSE
RMSEw <- function(d, w)
{
  sqe <- w*(d[, 1] - d[, 2])^2
  msqe <- sum(sqe)/sum(w)
  out <- sqrt(msqe)
  return(out)
}


# Weighted R^2
R2w <- function(d, w)
{
  require(boot)
  out <- boot::corr(d[, 1:2], w)^2
  return(out)
}


# Weighted summary function

WeightedSummary <- function(data, lev = NULL, model = NULL, ...)
{
  out <- numeric()
  # Weighted RMSE
  RMSEw <- function(d, w)
  {
    sqe <- w*(d[, 1] - d[, 2])^2
    msqe <- sum(sqe)/sum(w)
    out <- sqrt(msqe)
    return(out)
  }
  out[1] <- RMSEw(data[, 1:2], data$weights)
  
  # Weighted R^2
  require(boot)
  out[2] <- boot::corr(data[, 1:2], data$weights)^2
  names(out) <- c('RMSEw', 'R2w')
  return(out)
}



# 9: Train models

# models <- list()
# 
# for (i in 1:length(fractions))
# {
#   frac <- fractions[i]
#   
#   print(frac)
#   
#   if(frac == "clay") {
#     cov_c_i <- extr %>%
#       names() %>%
#       grep(
#         "gw",
#         ., value = TRUE,
#         invert = TRUE
#       ) %>%
#       paste0(collapse = " + ")
#     formula_i <- paste0(frac, " ~ ", cov_c_i) %>%
#       as.formula()
#   } else {
#     formula_i <- paste0(frac, " ~ ", cov_c) %>%
#       as.formula()
#   }
#   
#   trdat <- obs_top %>%
#     filter(is.finite(.data[[frac]]), is.finite(fold))
#   
#   if (!use_all_points) {
#     trdat %<>% sample_n(n)
#   }
#   
#   # Calculate weights
#   dens <- ppp(
#     trdat$UTMX,
#     trdat$UTMY,
#     c(441000, 894000),
#     c(6049000, 6403000)
#   ) %>%
#     density(
#       sigma = 250,
#       at = 'points',
#       leaveoneout = FALSE
#     )
#   
#   trdat %<>%
#     mutate(
#       density = dens,
#       w = min(dens) / dens
#     )
#   
#   folds_i <- lapply(
#     1:10,
#     function(x) {
#       out <- trdat %>%
#         mutate(
#           is_j = fold != x,
#           rnum = row_number(),
#           ind_j = is_j*rnum
#         ) %>%
#         filter(ind_j != 0) %>%
#         select(ind_j) %>%
#         unlist() %>%
#         unname()
#     }
#   )
#   
#   showConnections()
#   
#   cl <- makePSOCKcluster(10)
#   registerDoParallel(cl)
#   
#   set.seed(1)
#   
#   models[[i]] <- caret::train(
#     form = formula_i,
#     data = trdat,
#     method = "cubist",
#     na.action = na.pass,
#     tuneGrid = tgrid,
#     trControl = trainControl(
#       index = folds_i,
#       savePredictions = "final",
#       predictionBounds = c(bounds_lower[i], bounds_upper[i]),
#       summaryFunction = WeightedSummary
#     ),
#     metric = 'RMSEw',
#     maximize = FALSE,
#     weights = trdat$w
#   )
#   
#   registerDoSEQ()
#   rm(cl)
#   
#   saveRDS(
#     models[[i]],
#     paste0(dir_results, "/model_", frac, ".rds")
#   )
# }

models_loaded <- lapply(
  1:6,
  function(x) {
    out <- fractions[x] %>%
      paste0(dir_results, "/model_", ., ".rds") %>%
      readRDS()
    return(out)
  }
)

# models <- models_loaded

names(models) <- fractions

models %>% lapply(function(x) varImp(x))



# 10: Make maps
# Start with the test area

outfolder <- dir_dat %>%
  paste0(., "/testarea_10km/covariates/")

cov_10km <- outfolder %>%
  list.files(full.names = TRUE) %>%
  rast

names(cov_10km) <- names(cov)

predfolder <- dir_dat %>%
  paste0(., "/testarea_10km/predictions_", testn, "/") %T>%
  dir.create()

rfun <- function(mod, dat, ...) {
  library(caret)
  library(Cubist)
  
  rfun2 <- function(mod2, dat2, ...) {
    notallnas <- rowSums(is.na(dat2)) != ncol(dat2)
    out2 <- numeric(nrow(dat2))
    if (sum(notallnas) > 0) {
      out2[notallnas] <- predict(
        object = mod2,
        newdata = dat2[notallnas, ],
        na.action = na.pass,
        ...
      )
    }
    return(out2)
  }
  
  out <- rfun2(mod, dat, ...)
  return(out)
}

# Maps for 10 km area

maps_10km <- list()

showConnections()

for(i in 1:length(fractions))
{
  frac <- fractions[i]

  maps_10km[[i]] <- predict(
    cov_10km,
    models[[i]],
    fun = rfun,
    na.rm = FALSE,
    cores = 2,
    filename = paste0(predfolder, frac,  "_10km.tif"),
    overwrite = TRUE
  )
}

# Run until here (2023-02-01)

# All of Denmark

predfolder2 <- paste0(dir_dat, "/predictions_", testn, "/") %T>% dir.create()

tmpfolder <- paste0(dir_dat, "/Temp/")

terraOptions(memfrac = 0.3, tempdir = tmpfolder)

maps <- list()

for(i in 1:length(fractions))
{
  frac <- fractions[i]
  
  maps[[i]] <- predict(
    cov,
    models[[i]],
    fun = rfun,
    na.rm = FALSE,
    cores = 12,
    filename = paste0(predfolder2, frac,  ".tif"),
    overwrite = TRUE
  )
}

# Inspect models

get_acc <- function(x2, i2) {
  df <- x2$pred %>%
    arrange(rowIndex) %>%
    distinct(rowIndex, .keep_all = TRUE) %>%
    select(c(pred, obs, weights))
  
  if (i2 > 4) df %<>% exp
  
  df %<>% bind_cols(x2$trainingData)
  
  r2_all <- df %$% R2w(cbind(pred, obs), weights)
  
  r2_bare <- df %>%
    filter(!is.na(s2_geomedian_b2)) %$%
    R2w(cbind(pred, obs), weights)
  
  r2_covered <- df %>%
    filter(is.na(s2_geomedian_b2)) %$%
    R2w(cbind(pred, obs), weights)
  
  rmse_all <- df %$% RMSEw(cbind(pred, obs), weights)
  
  rmse_bare <- df %>%
    filter(!is.na(s2_geomedian_b2)) %$%
    RMSEw(cbind(pred, obs), weights)
  
  rmse_covered <- df %>%
    filter(is.na(s2_geomedian_b2)) %$%
    RMSEw(cbind(pred, obs), weights)
  
  out <- data.frame(
    r2_all,
    r2_bare,
    r2_covered,
    rmse_all,
    rmse_bare,
    rmse_covered
  )
  
  return(out)
}

acc_all <- foreach(i = 1:6, .combine = rbind) %do%
  get_acc(models[[i]], i)

acc_all %<>% mutate(fraction = fraction_names, .before = 1)

write.table(
  acc_all,
  paste0(dir_results, "/acc_all_test", testn, ".csv"),
  sep = ";",
  row.names = FALSE
  )

getpred <- function(x2, i2) {
  df <- x2$pred %>%
    arrange(rowIndex) %>%
    distinct(rowIndex, .keep_all = TRUE) %>%
    select(c(pred, obs))
  if (i2 > 4) df %<>% exp
  df %<>% mutate(
    fraction = fractions[i2],
    upper = quantile(obs, 0.99)
    ) %>%
    filter(obs < upper) %>%
    filter(pred < upper) %>%
    filter(obs >= 0)
  return(df)
}

allpred <- foreach(i = 1:6, .combine=rbind) %do%
  getpred(models[[i]], i)

allpred$fraction %<>% factor(levels = fractions)

levels(allpred$fraction) <- c(
  "Clay", "Silt", "Fine sand", "Coarse sand", "SOC", "CaCO3"
  )

tiff(
  paste0(dir_results, "/accuracy_test", testn, ".tiff"),
  width = 15,
  height = 10,
  units = "cm",
  res = 300
)

allpred %>%
  ggplot(aes(x = obs, y = pred)) +
  geom_point(alpha = .01, shape = 16) +
  facet_wrap(~ fraction, nrow = 2, scales = "free") +
  theme(aspect.ratio = 1) +
  scale_x_continuous(expand = c(0, 0)) +
  scale_y_continuous(expand = c(0, 0)) +
  geom_abline(col = "red") +
  geom_blank(aes(y = upper)) +
  geom_blank(aes(x = upper)) +
  geom_blank(aes(y = 0)) +
  geom_blank(aes(x = 0)) +
  xlab("Observation (%)") +
  ylab("Prediction (%)")

dev.off()
dev.off()

# Looking at 10 km maps

library(viridisLite)

maps_10km_stack <- maps_10km %>% rast

plot(maps_10km_stack, col = cividis(100))

maps_10km_stack2 <- c(
  maps_10km_stack[[1:4]],
  exp(maps_10km_stack[[5]]),
  exp(maps_10km_stack[[6]])
)

names(maps_10km_stack2) <- fraction_names

tiff(
  paste0(dir_results, "/maps_test", testn, ".tiff"),
  width = 24,
  height = 16,
  units = "cm",
  res = 300
)

plot(maps_10km_stack2, col = cividis(100))

dev.off()
dev.off()

JB <- function(clay, silt, sand_f, SOM, CaCO3)
{
  out <- rep(0, length(clay))
  out[CaCO3 > 10] <- 12
  out[out == 0 & SOM > 10] <- 11
  out[out == 0 & clay < 5 & silt < 20 & sand_f < 50] <- 1
  out[out == 0 & clay < 5 & silt < 20] <- 2
  out[out == 0 & clay < 10 & silt < 25 & sand_f < 40] <- 3
  out[out == 0 & clay < 10 & silt < 25]<-4
  out[out == 0 & clay < 15 & silt < 30 & sand_f < 40] <- 5
  out[out == 0 & clay < 15 & silt < 30] <- 6
  out[out == 0 & clay < 25 & silt < 35] <- 7
  out[out == 0 & clay < 45 & silt < 45] <- 8
  out[out == 0 & silt < 50] <- 9
  out[out == 0] <- 10
  return(out)
}

maps_10km_s2 <- c(maps_10km[[1]], maps_10km[[2]], maps_10km[[3]], exp(maps_10km[[5]])/0.568, exp(maps_10km[[6]]))

maps_10km_jb <- lapp(maps_10km_s2, JB) %>% as.factor()

library(colorRamps)
library(rcartocolor) # for colorblind palette

mycolors <- carto_pal(12, "Safe") %>% sort()

library(TSP)
myrgb <- col2rgb(mycolors)
tsp <- as.TSP(dist(t(myrgb)))
set.seed(1)
sol <- solve_TSP(tsp, control = list(repetitions = 1e3))
ordered_cols <- mycolors[sol]

ggplot2::qplot(x = 1:12, y = 1, fill = I(ordered_cols), geom = "col", width = 1) + ggplot2::theme_void()

tiff(
  paste0(dir_results, "/JB_test", testn, ".tiff"),
  width = 15,
  height = 10,
  units = "cm",
  res = 300
)

plot(
  maps_10km_jb,
  col = ordered_cols[levels(maps_10km_jb)[[1]]$ID],
  main = "JB-nummer"
)

dev.off()
dev.off()


# Covariate importance

l <- list()

ntop <- 20

for(i in 1:length(models))
{
  l[[i]] <- varImp(models[[i]])$importance %>%
    as_tibble(rownames = "covariate") %>%
    drop_na %>%
    arrange(- Overall) %>%
    slice_head(n = ntop) %>%
    mutate(target = fractions[i]) %>%
    mutate(rank = 1:ntop)
}

l %<>% bind_rows() %>%
  mutate(
    target = factor(
      target,
      levels = fractions
      )
    )

l_cat <- cov_cats %>%
  mutate(
    covariate = name,
    category = ifelse(
      category == "basic",
      scorpan,
      category
    )
  )

l %<>%
  left_join(l_cat)

l %<>%
  ungroup() %>%
  arrange(target, Overall) %>%
  mutate(order = row_number())

l$category %<>% as.factor()

levels(l$category) <- c(
  "Bare soil",
  "Spatial position",
  "Parent materials",
  "Topography",
  "S2 time series",
  "Soil"
)

catcolors <- l$category %>%
  levels() %>%
  length() %>%
  carto_pal(., "Safe")
names(catcolors) <- levels(l$category)
colScale <- scale_fill_manual(name = "category", values = catcolors)


tiff(
  paste0(dir_results, "/importance_test", testn, ".tiff"),
  width = 40,
  height = 20,
  units = "cm",
  res = 300
)

l %>%
  ggplot(aes(x = order, y = Overall, bg = category)) +
  geom_col() +
  facet_wrap(
    ~ target,
    ncol = 3,
    scales = "free"
  ) +
  # xlim(1, ntop) +
  ylim(0, NA) +
  coord_flip() +
  scale_x_continuous(
    breaks = l$order,
    labels = l$covariate,
    expand = c(0, 0)
  ) +
  colScale

dev.off()
dev.off()


# Plot most important covariates
# First find covariates with the highest general importance

imp_list <- list()

for (i in 1:length(fractions)) {
  imp_list[[i]] <- models[[i]] %>%
    varImp() %>%
    .$importance %>%
    rownames_to_column(var = "covariate") %>%
    mutate(fraction = fractions[[i]])
}

imp_list %>%
  bind_rows() %>%
  pivot_wider(
    id_cols = covariate,
    names_from = fraction,
    values_from = Overall
    ) %>%
  rowwise() %>%
  mutate(
    mean = mean(c_across(-covariate), na.rm = TRUE)
  ) %>%
  arrange(-mean) %>%
  print(n = 20)

figure_covariates <- c(
  "ogc_lite_pi0000",
  "s2_geomedian_b3",
  "s1_baresoil_composite_vh_8_days",
  "s2_geomedian_20180501_20180731_b7",
  "dhm2015_terraen_10m"
  )

short_names <- c(
  "DEM",
  "UTMX",
  "S1_bare_vh",
  "S2_summer_b7",
  "S2_bare_b3"
)

figure_cols <- c(figure_covariates, fractions)

library(scales)  # For number formats

tiff(
  paste0(dir_results, "/covariate_effects_test", testn, ".tiff"),
  width = 16,
  height = 10,
  units = "cm",
  res = 300
)

obs_top %>%
  select(all_of(figure_cols)) %>%
  # sample_frac(0.1) %>%
  mutate(
    s1_baresoil_composite_vh_8_days = ifelse(
      s1_baresoil_composite_vh_8_days == 0 | s1_baresoil_composite_vh_8_days < -3000,
      NA,
      s1_baresoil_composite_vh_8_days
    ),
    s2_geomedian_b3 = ifelse(
      s2_geomedian_b3 > 2000,
      NA,
      s2_geomedian_b3
    ),
    logCaCO3 = ifelse(
      is.finite(logCaCO3),
      logCaCO3,
      NA
    ),
    logSOC = ifelse(
      logSOC > -2.5,
      logSOC,
      NA
    ),
    clay = ifelse(
      clay < 30,
      clay,
      NA
    ),
    silt = ifelse(
      silt < 30,
      silt,
      NA
    )
  ) %>%
  rename(
    DEM = dhm2015_terraen_10m,
    UTMX = ogc_lite_pi0000,
    S1_bare_vh = s1_baresoil_composite_vh_8_days,
    S2_summer_b7 = s2_geomedian_20180501_20180731_b7,
    S2_bare_b3 = s2_geomedian_b3
  ) %>%
  pivot_longer(
    all_of(short_names),
    names_to = "Covariate",
    values_to = "x_value"
  ) %>%
  pivot_longer(
    all_of(fractions),
    names_to = "Fraction",
    values_to = "y_value",
  ) %>%
  ggplot(
    aes(
      x = x_value,
      y = y_value
    )
  ) +
  geom_point(alpha = .01, shape = 16) +
  facet_grid(
    factor(Fraction, levels = fractions) ~ Covariate,
    scales = "free"
  ) +
  geom_smooth(
    se = FALSE,
    color = "red"
    ) +
  labs(
    x = "Covariate value",
    y = "Observation (%)"
  ) +
  scale_x_continuous(
    n.breaks = 3,
    labels = label_number(scale_cut = cut_short_scale())
    ) +
  scale_y_continuous(n.breaks = 3) +
  theme(strip.text.y.right = element_text(angle = 0))

dev.off()
dev.off()

# To do:
# Use all observations
# Use new extract [ok]
# Save models to disk [ok]
# Analyze importance [ok]
# Make maps
# Drop gw maps for clay [ok]
# Drop gw maps entirely

# END