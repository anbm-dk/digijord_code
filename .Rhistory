wopt = list(datatype = datatype(inrast))
)
return(out)
}
# Fill gaps
for (j in 1:length(names_in)) {
# Mask all layers (especially s1), to the same extent.
# Mainly to reduce the effect from edge cells.
r <- paste0(dir_cov, names_in[[j]], ".tif") %>%
rast() %>%
mask(., mask = bare_mask)
r2 <- fill_gaps_gauss(r, 10)
r3 <- mask(
r2,
dem,
filename = paste0(tmpfolder, "filled_", names(r), ".tif"),
names = paste0("filled_", names(r)),
datatype = datatype(r)
)
tmpFiles(remove = TRUE)
}
bare_mask
library(terra)
library(magrittr)
library(tools)
library(dplyr)
library(viridis)
dir_code <- getwd()
root <- dirname(dir_code)
dir_dat <- paste0(root, "/digijord_data/")
tmpfolder <- paste0(dir_dat, "/Temp/")
terraOptions(tempdir = tmpfolder)
mycrs <- "EPSG:25832"
dir_cov <- dir_dat %>%
paste0(., "/covariates/")
cov_files <- dir_cov %>%
list.files(
pattern = ".tif",
full.names = TRUE
)
dem_ind <- grepl(
"dhm",
cov_files
)
dem <- cov_files[dem_ind] %>% rast()
bare_mask <- "s2_geomedian_b2" %>%
paste0(dir_cov, ., ".tif") %>%
rast()
cov_cats <- dir_code %>%
paste0(., "/cov_categories_20231110.csv") %>%
read.table(
sep = ";",
header = TRUE
)
names_in <- cov_cats %>%
filter(
category == "bare_soil",
scorpan == "S"
) %>%
select(name) %>%
unlist() %>%
unname()
# Function to fill gaps
fill_gaps_gauss <- function(
inrast,
nsteps
) {
r1 <- rast(ncols = 180, nrows = 180, xmin=0)
myfilter1 <- focalMat(r1, c(0.5, 1), "Gauss")
myfilter2 <- focalMat(r1, c(0.5, 1), "Gauss")
# myfilter2 <- focalMat(r1, c(1, 2), "Gauss")
smoothed_down_list <- list()
aggregated_list <- list()
split_list <- list()
merged_list <- list()
smooth_up_list <- list()
aggregated_list[[1]] <- inrast
smoothed <- focal(
aggregated_list[[1]],
w = myfilter1,
fun = "sum",
na.policy = "all",
na.rm = TRUE,
wopt = list(datatype = datatype(inrast))
)
summed <- focal(
!is.na(aggregated_list[[1]]),
w = myfilter1,
fun = "sum",
na.policy = "all",
na.rm = TRUE
)
smoothed_down_list[[1]] <- smoothed / summed
for (i in 2:nsteps) {
aggregated_list[[i]] <- aggregate(
smoothed_down_list[[i - 1]],
wopt = list(datatype = datatype(inrast))
)
smoothed <- focal(
aggregated_list[[i]],
w = myfilter1,
fun = "sum",
na.policy = "all",
na.rm = TRUE,
wopt = list(datatype = datatype(inrast))
)
summed <- focal(
!is.na(aggregated_list[[i]]),
w = myfilter1,
fun = "sum",
na.policy = "all",
na.rm = TRUE
)
smoothed_down_list[[i]] <- smoothed / summed
}
split_list[[nsteps - 1]] <- project(
smoothed_down_list[[nsteps]],
aggregated_list[[nsteps - 1]],
method = "near",
datatype = datatype(inrast)
)
merged_list[[nsteps - 1]] <- terra::merge(
x = smoothed_down_list[[nsteps - 1]],
y = split_list[[nsteps - 1]],
wopt = list(datatype = datatype(inrast))
)
smoothed <- focal(
merged_list[[nsteps - 1]],
w = myfilter2,
fun = "sum",
na.policy = "all",
na.rm = TRUE,
wopt = list(datatype = datatype(inrast))
)
summed <- focal(
!is.na(merged_list[[nsteps - 1]]),
w = myfilter2,
fun = "sum",
na.policy = "all",
na.rm = TRUE
)
smooth_up_list[[nsteps - 1]] <- smoothed / summed
for (i in (nsteps - 2):1) {
split_list[[i]] <- project(
smooth_up_list[[i + 1]],
aggregated_list[[i]],
method = "near",
datatype = datatype(inrast)
)
merged_list[[i]] <- terra::merge(
x = smoothed_down_list[[i]],
y = split_list[[i]],
wopt = list(datatype = datatype(inrast))
)
smoothed <- focal(
merged_list[[i]],
w = myfilter2,
fun = "sum",
na.policy = "all",
na.rm = TRUE,
wopt = list(datatype = datatype(inrast))
)
summed <- focal(
!is.na(merged_list[[i]]),
w = myfilter2,
fun = "sum",
na.policy = "all",
na.rm = TRUE
)
smooth_up_list[[i]] <- smoothed / summed
}
out <- merge(
inrast,
smooth_up_list[[1]],
wopt = list(datatype = datatype(inrast))
)
return(out)
}
# Fill gaps
for (j in 1:length(names_in)) {
# Mask all layers (especially s1), to the same extent.
# Mainly to reduce the effect from edge cells.
r <- paste0(dir_cov, names_in[[j]], ".tif") %>%
rast() %>%
mask(., mask = bare_mask)
r2 <- fill_gaps_gauss(r, 10)
r3 <- mask(
r2,
dem,
filename = paste0(tmpfolder, "filled_", names(r), ".tif"),
names = paste0("filled_", names(r)),
datatype = datatype(r)
)
tmpFiles(remove = TRUE)
}
library(terra)
library(magrittr)
library(tools)
library(dplyr)
library(viridis)
dir_code <- getwd()
root <- dirname(dir_code)
dir_dat <- paste0(root, "/digijord_data/")
tmpfolder <- paste0(dir_dat, "/Temp/")
terraOptions(tempdir = tmpfolder)
mycrs <- "EPSG:25832"
dir_cov <- dir_dat %>%
paste0(., "/covariates/")
cov_files <- dir_cov %>%
list.files(
pattern = ".tif",
full.names = TRUE
)
dem_ind <- grepl(
"dhm",
cov_files
)
dem <- cov_files[dem_ind] %>% rast()
bare_mask <- "s2_geomedian_b2" %>%
paste0(dir_cov, ., ".tif") %>%
rast()
cov_cats <- dir_code %>%
paste0(., "/cov_categories_20231110.csv") %>%
read.table(
sep = ";",
header = TRUE
)
names_in <- cov_cats %>%
filter(
category == "bare_soil",
scorpan == "S"
) %>%
select(name) %>%
unlist() %>%
unname()
# Function to fill gaps
?merge
?focal
?aggregate
?project
?mask
# Fill gaps in the bare soil layers
library(terra)
library(magrittr)
library(tools)
library(dplyr)
library(viridis)
dir_code <- getwd()
root <- dirname(dir_code)
dir_dat <- paste0(root, "/digijord_data/")
tmpfolder <- paste0(dir_dat, "/Temp/")
terraOptions(
tempdir = tmpfolder,
memfrac = 0.3
)
mycrs <- "EPSG:25832"
dir_cov <- dir_dat %>%
paste0(., "/covariates/")
cov_files <- dir_cov %>%
list.files(
pattern = ".tif",
full.names = TRUE
)
dem_ind <- grepl(
"dhm",
cov_files
)
dem <- cov_files[dem_ind] %>% rast()
bare_mask <- "s2_geomedian_b2" %>%
paste0(dir_cov, ., ".tif") %>%
rast()
cov_cats <- dir_code %>%
paste0(., "/cov_categories_20231110.csv") %>%
read.table(
sep = ";",
header = TRUE
)
names_in <- cov_cats %>%
filter(
category == "bare_soil",
scorpan == "S"
) %>%
select(name) %>%
unlist() %>%
unname()
# Function to fill gaps
fill_gaps_gauss <- function(
inrast,
nsteps,
smooth_down = TRUE
) {
r1 <- rast(ncols = 180, nrows = 180, xmin = 0)
# myfilter1 <- focalMat(r1, c(0.5, 1), "Gauss")
myfilter1 <- focalMat(r1, c(1, 2), "Gauss")
myfilter2 <- focalMat(r1, c(1, 2), "Gauss")
aggregated_list <- list()
merged_list <- list()
smooth_up_list <- list()
# Smoothing with a gaussian filter
smoothr <- function(
x,
filt
) {
smoothed <- focal(
x,
w = filt,
fun = "sum",
na.policy = "all",
na.rm = TRUE,
wopt = list(datatype = datatype(x))
)
summed <- focal(
!is.na(x),
w = myfilter1,
fun = "sum",
na.policy = "all",
na.rm = TRUE
)
out <- smoothed / summed
return(out)
}
# Weighted aggregation
agg_weight <- function(x, x_count) {
x_agg <- terra::aggregate(
x,
fun = "sum",
na.rm = TRUE
)
count_agg <- terra::aggregate(
x_count,
fun = "sum",
na.rm = TRUE
)
agg_w <- x_agg / count_agg
out2 <- list()
out2$mean <- agg_w
out2$count <- count_agg
return(out2)
}
# Weighted smoothing
smooth_weight <- function(x, x_count, filt) {
prod_w <- x*x_count
smooth_prod <- focal(
prod_w,
w = filt,
fun = "sum",
na.policy = "all",
na.rm = TRUE
)
smooth_count <- focal(
x_count,
w = filt,
fun = "sum",
na.policy = "all",
na.rm = TRUE
)
out <- list()
out[[1]] <- smooth_prod / smooth_count
out[[2]] <- smooth_count
return(out)
}
if (smooth_down) {
# Smoothing during aggregation
aggregated_list[[1]] <- inrast
smoothed_down_list <- list()
smoothed_down_list[[1]] <- smoothr(
x = aggregated_list[[1]],
filt = myfilter1
)
for (i in 2:nsteps) {
aggregated_list[[i]] <- terra::aggregate(
smoothed_down_list[[i - 1]],
wopt = list(datatype = datatype(inrast))
)
smoothed_down_list[[i]] <- smoothr(
x = aggregated_list[[i]],
filt = myfilter1
)
}
splitted <- project(
smoothed_down_list[[nsteps]],
smoothed_down_list[[nsteps - 1]],
method = "near",
datatype = datatype(inrast)
)
merged_list[[nsteps - 1]] <- terra::merge(
x = smoothed_down_list[[nsteps - 1]],
y = splitted,
wopt = list(datatype = datatype(inrast))
)
smooth_up_list[[nsteps - 1]] <- smoothr(
x = merged_list[[nsteps - 1]],
filt = myfilter2
)
for (i in (nsteps - 2):1) {
splitted <- project(
smooth_up_list[[i + 1]],
smoothed_down_list[[i]],
method = "near",
datatype = datatype(inrast)
)
merged_list[[i]] <- terra::merge(
x = smoothed_down_list[[i]],
y = splitted,
wopt = list(datatype = datatype(inrast))
)
smooth_up_list[[i]] <- smoothr(
merged_list[[i]],
filt = myfilter2
)
}
} else {
# Simple weighted aggregation
aggregated_list[[1]] <- list()
aggregated_list[[1]][[1]] <- inrast
aggregated_list[[1]][[2]] <- !is.na(inrast)
for (i in 2:nsteps) {
aggregated_list[[i]] <- agg_weight(
x = aggregated_list[[i - 1]][[1]],
x_count = aggregated_list[[i - 1]][[2]]
)
}
splitted_x <- project(
aggregated_list[[nsteps]][[1]],
aggregated_list[[nsteps - 1]][[1]],
method = "near",
datatype = datatype(inrast)
)
# Divide the count by 4, to represent the mean number of obs in each pixel
splitted_count <- project(
aggregated_list[[nsteps]][[2]]/4,  # NB
aggregated_list[[nsteps - 1]][[2]],
method = "near"
)
merged_list[[nsteps - 1]] <- list()
# Merge means and counts
merged_list[[nsteps - 1]][[1]] <- terra::merge(
x = aggregated_list[[nsteps - 1]][[1]],
y = splitted_x,
wopt = list(datatype = datatype(inrast))
)
merged_list[[nsteps - 1]][[2]] <- terra::merge(
x = aggregated_list[[nsteps - 1]][[2]],
y = splitted_count,
wopt = list(datatype = datatype(inrast))
)
# Weighted smoothing
smooth_up_list[[nsteps - 1]] <- smooth_weight(
x = merged_list[[nsteps - 1]][[1]],
x_count = merged_list[[nsteps - 1]][[2]],
filt = myfilter2
)
for (i in (nsteps - 2):1) {
splitted_x <- project(
smooth_up_list[[i + 1]][[1]],
aggregated_list[[i]][[1]],
method = "near",
datatype = datatype(inrast)
)
# Divide the count by 4, to represent the mean number of obs in each pixel
splitted_count <- project(
smooth_up_list[[i + 1]][[2]]/4,  # NB
aggregated_list[[i]][[2]],
method = "near"
)
merged_list[[i]] <- list()
# Merge means and counts
merged_list[[i]][[1]] <- terra::merge(
x = aggregated_list[[i]][[1]],
y = splitted_x,
wopt = list(datatype = datatype(inrast))
)
merged_list[[i]][[2]] <- terra::merge(
x = aggregated_list[[i]][[2]],
y = splitted_count
)
# Weighted smoothing
smooth_up_list[[i]] <- smooth_weight(
x = merged_list[[i]][[1]],
x_count = merged_list[[i]][[2]],
filt = myfilter2
)
}
}
out <- terra::merge(
inrast,
smooth_up_list[[1]],
wopt = list(datatype = datatype(inrast))
)
return(out)
}
# Fill gaps
for (j in 1:length(names_in)) {
# Mask all layers (especially s1), to the same extent.
# Mainly to reduce the effect from edge cells.
r <- paste0(dir_cov, names_in[[j]], ".tif") %>% rast()
r_masked <- mask(r, mask = bare_mask, datatype = datatype(r))
r2 <- fill_gaps_gauss(
r_masked,
10,
smooth_down = FALSE
)
r3 <- mask(
r2,
dem,
filename = paste0(tmpfolder, "filled_", names(r), ".tif"),
names = paste0("filled_", names(r)),
datatype = datatype(r),
gdal = "TILED=YES"
)
tmpFiles(remove = TRUE)
}
