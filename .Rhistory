#     }
#   )
# }
bestscores_filename <- paste0(
dir_boot, "/models_boot_bestscores_", frac, ".rds"
)
boot_predictions_filename <- paste0(
dir_boot, "/models_boot_predictions_", frac, ".rds"
)
if (file.exists(bestscores_filename)) {
models_boot_bestscores[[i]] <- bestscores_filename %>% readRDS()
} else {
models_boot_bestscores[[i]] <- list()
}
if (is.data.frame(models_boot_bestscores[[i]])) {
n_bestscores <- nrow(models_boot_bestscores[[i]])
} else {
n_bestscores <- length(models_boot_bestscores[[i]])
}
if (file.exists(boot_predictions_filename)) {
models_boot_predictions[[i]] <- boot_predictions_filename %>% readRDS()
} else {
models_boot_predictions[[i]] <- matrix(
numeric(),
nrow = nrow(obs),
ncol = ncol(poisson_extr)
)
}
n_predictions <- models_boot_predictions[[i]] %>%
colSums() %>%
is.na() %>%
not() %>%
sum()
start_boot <- min(n_models_exist, n_bestscores, n_predictions) + 1
if (start_boot <= nboot) {
# bootstrap procedure
print("Training models")
for (bootr in start_boot:nboot) {
bootr_chr <- bootr %>%
str_pad(
.,
nchar(nboot),
pad = "0"
)
trdat_bootr <- trdat %>%
mutate(
weights_bootr = poisson_extr[trdat_indices, bootr],
w_combined = weights_bootr*w
) %>%
filter(w_combined > 0)
bootr_indices <- which(obs$ID_new %in% trdat_bootr$ID_new)
holdout_bootr <- obs[-bootr_indices, ]
holdout_indices <- which(obs$ID_new %in% holdout_bootr$ID_new)
# List of folds
folds_bootr <- lapply(
unique(trdat_bootr$fold),
function(x) {
out <- trdat_bootr %>%
mutate(
is_j = fold != x,
rnum = row_number(),
ind_j = is_j * rnum
) %>%
filter(ind_j != 0) %>%
dplyr::select(., ind_j) %>%
unlist() %>%
unname()
}
)
# Bayes optimization
foreach::registerDoSEQ()
showConnections()
model_bootr <- optimize_xgboost(
target = frac,  # character vector (length 1), target variable.
cov_names = cov_c_i,  # Character vector, covariate names,
data = trdat_bootr, # data frame, input data
bounds_bayes = bounds, # named list with bounds for bayesian opt.
bounds_pred = bounds_pred_i, # numeric, length 2, bounds for predicted values
cores = 19, # number cores for parallelization
trgrid = tgrid, # data frame with tuning parameters to be tested in basic model
folds = folds_bootr, # list with indices, folds for cross validation
sumfun = sumfun_i, # summary function for accuracy assessment
metric = metrics[i], # character, length 1, name of evaluation metric
max_metric = FALSE, # logical, should the evaluation metric be maximized
weights = trdat_bootr$w_combined, # numeric, weights for model training and evaluation
trees_per_round = 1, # numeric, length 1, number of trees that xgboost should train in each round
obj_xgb = objectives[i], # character, length 1, objective function for xgboost
colsample_bynode_basic = 0.75, # numeric, colsample_bynode for basic model
cov_keep = cov_keep_i, # Character vector, covariates that should always be present
final_round_mult = 1,  # Multiplier for the number of rounds in the final model
maxd = 10^3, # Maximum depth for optimized models
seed = 321,  # Random seed for model training,
classprob = FALSE
)
models_boot_bestscores[[i]][[bootr]] <- model_bootr$best_scores
print(
models_boot_bestscores[[i]][[bootr]]
)
# models_boot[[i]][[bootr]] <- model_bootr$model
# End of optimization
model_bootr_pred <- model_bootr$model$pred %>%
arrange(rowIndex) %>%
distinct(rowIndex, .keep_all = TRUE) %>%
dplyr::select(., pred) %>%
unlist() %>%
unname()
models_boot_predictions[[i]][bootr_indices, bootr] <- model_bootr_pred
models_boot_predictions[[i]][-bootr_indices, bootr] <- predict_passna(
model_bootr$model,
holdout_bootr,
n_const = n_const_i
)
saveRDS(
model_bootr$model,
paste0(dir_boot_models_i, "/model_", frac, "_", bootr_chr, ".rds")
)
saveRDS(
models_boot_bestscores[[i]],
paste0(dir_boot, "/models_boot_bestscores_", frac, ".rds")
)
saveRDS(
models_boot_predictions[[i]],
paste0(dir_boot, "/models_boot_predictions_", frac, ".rds")
)
}
# End of model training
}
saveRDS(
weights_objects[[i]],
paste0(dir_results, "/weights_objects_", frac, ".rds")
)
saveRDS(
models_weights[[i]],
file = paste0(dir_results, "/models_weights_", frac, ".rds")
)
saveRDS(
models_indices[[i]],
file = paste0(dir_results, "/models_indices_", frac, ".csv"),
)
}
} else {
weights_objects <- list()
models_boot_bestscores <- list()
models_weights <- list()
models_indices <- list()
models_boot_predictions <- list()
for (i in 1:length(fractions)) {
frac <- fractions[i]
weights_objects[[i]] <- dir_results %>%
paste0(., "/weights_objects_", frac, ".rds") %>%
readRDS()
models_boot_bestscores[[i]] <- dir_boot %>%
paste0(., "/models_boot_bestscores_", frac, ".rds") %>%
readRDS()
models_boot_predictions[[i]] <- dir_boot %>%
paste0(., "/models_boot_predictions_", frac, ".rds") %>%
readRDS()
models_weights[[i]] <- dir_results %>%
paste0(., "/models_weights_", frac, ".rds") %>%
readRDS()
models_indices[[i]] <- dir_results %>%
paste0(., "/models_indices_", frac, ".csv") %>%
readRDS()
}
}
models_boot_files <- lapply(
1:length(fractions),
function(x) {
out <- fractions[x] %>%
paste0(dir_boot_models, "/", ., "/") %>%
list.files(full.names = TRUE)
return(out)
}
)
# names(models_boot) <- fractions
names(weights_objects) <- fractions
names(models_boot_bestscores) <- fractions
names(models_weights) <- fractions
names(models_indices) <- fractions
names(models_boot_predictions) <- fractions
# END OF MODEL TRAINING LOOP
# models_boot_bestscores[[i]] %<>%
#   bind_rows() %>%
#   mutate(
#     frac = frac
#   )
# Summarise observations
saveRDS(obs, file = paste0(dir_results, "/observations_texture.rds"))
breaks <- c(0, 30, 60, 100, 200)
weights_pivot <- models_weights %>%
bind_rows() %>%
pivot_longer(any_of(fractions), names_to = "fraction")
obs
obs %>%
mutate(
mean_d = (upper + lower)/2,
depth = cut(mean_d, breaks, include.lowest = TRUE),
SOC = case_when(
imputed == TRUE ~ NA,
.default = SOC
)
) %>%
pivot_longer(any_of(fractions), names_to = "fraction") %>%
select(c(value, depth, fraction)) %>%
mutate(weight = weights_pivot$value) %>%
group_by(fraction, depth) %>%
drop_na() %>%
summarise(
mean = weighted.mean(value, weight, na.rm = TRUE),
q05 = weighted.quantile(value, weight, 0.05, na.rm = TRUE),
q95 = weighted.quantile(value, weight, 0.95, na.rm = TRUE),
sd = weighted.var(value, weight, na.rm = TRUE)^0.5,
n = n(),
w = sum(weight)
) %>%
as.data.frame()
obs %>%
mutate(
mean_d = (upper + lower)/2,
depth = cut(mean_d, breaks, include.lowest = TRUE),
SOC = case_when(
imputed == TRUE ~ NA,
.default = SOC
)
) %>%
pivot_longer(any_of(fractions), names_to = "fraction") %>%
select(c(db, value, depth, fraction)) %>%
group_by(db, fraction, depth) %>%
drop_na() %>%
summarise(n = n()) %>%
pivot_wider(
id_cols = c(db, depth),
values_from = n,
names_from = fraction,
values_fill = 0,
) %>%
as.data.frame()
# Model summary
bestscores_boot_df <- lapply(
c(1:length(fractions)),
function(x) {
out <- models_boot_bestscores[[x]] %>%
bind_rows() %>%
summarise(across(where(is.numeric), ~ mean(.x, na.rm = TRUE)))
out$fraction <- fractions[x]
return(out)
}
) %>%
bind_rows()
models_boot_sum <- lapply(
c(1:length(fractions)),
function(x) {
out <- lapply(
models_boot_files[[x]],
function(x2) {
model_x <-  x2 %>% readRDS()
out2 <- model_x$results
return(out2)
}
)
out %<>%
bind_rows() %>%
summarise(across(where(is.numeric), ~ mean(.x, na.rm = TRUE)))
out$fraction <- fractions[x]
return(out)
}
) %>%
bind_rows()
bind_cols(
models_boot_sum,
bestscores_boot_df
) %>%
mutate(
Fraction = fractions,
.before = 1
) %T>%
write.table(
file = paste0(dir_results, "/models_boot_sum.csv"),
sep = ";",
row.names = FALSE
)
boot_mean_predictions
boot_mean_predictions <- matrix(0, ncol = 6, nrow = nrow(obs))
for(i in 1:100) {
pred_boot_i <- data.frame(
clay = models_boot_predictions[[1]][, i],
silt = models_boot_predictions[[2]][, i],
coarse_sand = models_boot_predictions[[4]][, i],
SOC = models_boot_predictions[[5]][, i],
CaCO3 = models_boot_predictions[[6]][, i]
) %>%
mutate(
t_res = 100 - (clay + silt + coarse_sand),
clay = case_when(
t_res < 0 ~ clay*(100 + t_res)/100,
.default = clay
),
silt = case_when(
t_res < 0 ~ silt*(100 + t_res)/100,
.default = silt
),
coarse_sand = case_when(
t_res < 0 ~ coarse_sand*(100 + t_res)/100,
.default = coarse_sand
),
fine_sand = 100 - (clay + silt + coarse_sand)
) %>%
select(-t_res) %>%
relocate(any_of(fractions)) %>%
as.matrix()
boot_mean_predictions %<>% "+"(pred_boot_i)
}
boot_mean_predictions %<>%
"/"(100) %>%
round(digits = 1)
fine_sand_model_mean <- apply(models_boot_predictions[[3]], 1, mean)
cor(boot_mean_predictions[, 3], obs$fine_sand, use = "pairwise.complete.obs")^2
cor(fine_sand_model_mean, obs$fine_sand, use = "pairwise.complete.obs")^2
cor(fine_sand_model_mean, boot_mean_predictions[, 3], use = "pairwise.complete.obs")
saveRDS(
boot_mean_predictions,
paste0(dir_boot, "/models_boot_predictions_mean.rds")
)
boot_mean_predictions
nrow(boot_mean_predictions)
nrow(obs)
obs %>% select(any_of(fractions))
models_weights
models_weights %>% bind_cols()
obs_long <- obs %>%
select(any_of(fractions)) %>%
pivot_longer(
names_to = "fraction",
values_to = "observed"
)
?pivot_longer
obs_long <- obs %>%
select(any_of(fractions)) %>%
pivot_longer(
everything(),
names_to = "fraction",
values_to = "observed"
)
obs_long
pred_long <- boot_mean_predictions %>%
pivot_longer(
everything(),
names_to = "fraction",
values_to = "predicted"
)
pred_long <- boot_mean_predictions %>%
as.data.frame() %>%
pivot_longer(
everything(),
names_to = "fraction",
values_to = "predicted"
)
pred_long
weights_long <- models_weights %>%
bind_rows() %>%
pivot_longer(
everything(),
names_to = "fraction",
values_to = "predicted"
)
weights_long
weights_long <- models_weights %>%
bind_rows() %>%
pivot_longer(
everything(),
names_to = "fraction",
values_to = "w"
)
df_acc_all <- obs_long %>%
mutate(
predicted = pred_long$predicted,
w = weights_long$w
)
df_acc_all
df_acc_all %>%
group_by(fraction) %>%
summarise(
r2w = round(get_R2w(cbind(predicted, observed), w), digits = 3),
rmsew = round(get_RMSEw(cbind(predicted, observed), w), digits = 3)
)
?drop_na_
df_acc_all %>%
drop_na() %>%
group_by(fraction) %>%
summarise(
r2w = round(get_R2w(cbind(predicted, observed), w), digits = 3),
rmsew = round(get_RMSEw(cbind(predicted, observed), w), digits = 3)
)
obs$fold
df_acc_all <- obs_long %>%
mutate(
predicted = pred_long$predicted,
w = weights_long$w,
fold = obs$fold
)
665172 / 110862
?rep
rep(1:10, 10)
df_acc_all <- obs_long %>%
mutate(
predicted = pred_long$predicted,
w = weights_long$w,
fold = rep(obs$fold, 6)
)
df_acc_all %>%
drop_na() %>%
filter(fold == 10) %>%
group_by(fraction) %>%
summarise(
r2w = round(get_R2w(cbind(predicted, observed), w), digits = 3),
rmsew = round(get_RMSEw(cbind(predicted, observed), w), digits = 3)
)
?arrange
df_acc_all %>%
drop_na() %>%
filter(fold == 10) %>%
group_by(fraction) %>%
summarise(
r2w = round(get_R2w(cbind(predicted, observed), w), digits = 3),
rmsew = round(get_RMSEw(cbind(predicted, observed), w), digits = 3)
) %>%
mutate(
fraction = factor(fraction, fractions)
) %>%
arrange(fraction)
df_acc_all %>%
drop_na() %>%
filter(
fold == 10,
fraction == "SOC"
) %>%
mutate(
predicted = log(predicted),
observed = log(observed)
) %>%
summarise(
r2w = round(get_R2w(cbind(predicted, observed), w), digits = 3),
rmsew = round(get_RMSEw(cbind(predicted, observed), w), digits = 3)
)
df_acc_all %>%
drop_na() %>%
filter(
fold == 10,
fraction == "SOC"
) %>%
mutate(
predicted = log(predicted),
observed = log(observed)
) %>%
filter(
is.finite(oberved),
is.finite(predicted)
)
df_acc_all %>%
drop_na() %>%
filter(
fold == 10,
fraction == "SOC"
) %>%
mutate(
predicted = log(predicted),
observed = log(observed)
) %>%
filter(
is.finite(observed),
is.finite(predicted)
)
summarise(
r2w = round(get_R2w(cbind(predicted, observed), w), digits = 3),
rmsew = round(get_RMSEw(cbind(predicted, observed), w), digits = 3)
)
df_acc_all %>%
drop_na() %>%
filter(
fold == 10,
fraction == "SOC"
) %>%
mutate(
predicted = log(predicted),
observed = log(observed)
) %>%
filter(
is.finite(observed),
is.finite(predicted)
) %>%
summarise(
r2w = round(get_R2w(cbind(predicted, observed), w), digits = 3),
rmsew = round(get_RMSEw(cbind(predicted, observed), w), digits = 3)
)
df_acc_all %>%
drop_na() %>%
filter(
fold == 10,
fraction == "CaCO3"
) %>%
mutate(
predicted = sqrt(predicted),
observed = sqrt(observed)
) %>%
filter(
is.finite(observed),
is.finite(predicted)
) %>%
summarise(
r2w = round(get_R2w(cbind(predicted, observed), w), digits = 3),
rmsew = round(get_RMSEw(cbind(predicted, observed), w), digits = 3)
)
