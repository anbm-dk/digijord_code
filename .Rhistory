category == "WATEM" ~ "OR",
category == "sentinel_composite" ~ "S2 time series",
category == "bare_soil" ~ "Bare soil",
.default = "Other"
)
)
l %<>%
left_join(l_cat)
l %<>%
ungroup() %>%
arrange(target, Overall) %>%
mutate(order = row_number())
l %<>% mutate(
category = case_when(
covariate == "upper" ~ "Depth",
covariate == "lower" ~ "Depth",
covariate == "year" ~ "Time",
category == "N" ~ "Spatial position",
category == "R" ~ "Topography",
category == "C" ~ "Climate",
category == "C " ~ "Climate",
category == "P" ~ "Parent materials",
category == "S" ~ "Soil",
category == "SO" ~ "Soil and organisms",
category == "CR" ~ "Climate and topography",
category == "OR" ~ "Organisms and topography",
.default = category
)
)
l$category %<>% as.factor()
catcolors <- l$category %>%
levels() %>%
length() %>%
carto_pal(., "Safe")
names(catcolors) <- levels(l$category)
colScale <- scale_fill_manual(name = "category", values = catcolors)
tiff(
paste0(dir_results, "/importance_test", testn, ".tiff"),
width = 40,
height = 20,
units = "cm",
res = 300
)
l %>%
ggplot(aes(x = order, y = Overall, bg = category)) +
geom_col() +
facet_wrap(
~ target,
ncol = 3,
scales = "free"
) +
# xlim(1, ntop) +
ylim(0, NA) +
coord_flip() +
scale_x_continuous(
breaks = l$order,
labels = l$covariate,
expand = c(0, 0)
) +
colScale
try(dev.off())
# 10: Make maps for the test area
dir_cov_10km <- dir_dat %>%
paste0(., "/testarea_10km/covariates/")
predfolder <- dir_results %>%
paste0(., "/predictions_testarea/") %T>%
dir.create()
source("f_predict_passna.R")
# Make the maps
uppers <- c(0, 25, 50, 100)
lowers <- c(25, 50, 100, 200)
map_spec <- expand_grid(
fraction_i = 1:6,
interval = 1:4
)
showConnections()
numCores <- 20
cl <- makeCluster(numCores)
clusterEvalQ(
cl,
{
library(terra)
library(caret)
library(xgboost)
library(magrittr)
library(dplyr)
library(tools)
}
)
clusterExport(
cl,
c("uppers",
"lowers",
"map_spec",
"predfolder",
"dir_cov_10km",
"models",
"cov_selected",
"predict_passna",
"dir_dat",
"fractions"
)
)
parSapplyLB(
cl,
1:nrow(map_spec),
function(x) {
tmpfolder <- paste0(dir_dat, "/Temp/")
terraOptions(memfrac = 0.02, tempdir = tmpfolder)
cov_10km <- dir_cov_10km %>%
list.files(full.names = TRUE) %>%
rast() %>%
subset(cov_selected)
outname <- predfolder %>%
paste0(
., "/", fractions[map_spec$fraction_i[x]],
"_depth", map_spec$interval[x],
".tif"
)
predict(
cov_10km,
models[[map_spec$fraction_i[x]]],
fun = predict_passna,
na.rm = FALSE,
const = data.frame(
SOM_removed = 1,
year = 2010,
upper = uppers[map_spec$interval[x]],
lower = lowers[map_spec$interval[x]]
),
n_const = 4,
n_digits = 1,
filename = outname,
overwrite = TRUE
)
return(NA)
}
)
stopCluster(cl)
foreach::registerDoSEQ()
rm(cl)
maps_10_km <- list()
for(i in 1:length(fractions)) {
maps_10_km[[i]] <- c(1:4) %>%
paste0(
predfolder, "/", fractions[i],
"_depth", .,
".tif"
) %>% rast()
names(maps_10_km[[i]]) <- paste0(
fraction_names[i], " ", uppers, " - ", lowers, " cm"
)
}
# SOC depth distribution is very obviously wrong. I will need to fix it. (ok)
# Using a separate density for wetlands fixes this issue.
# Ideally, I should use the extent of the central wetlands, which is the survey
# area for the SINKS dataset-
# Figures for 10 km maps
library(viridisLite)
library(tidyterra)
try(dev.off())
lapply(1:6, function(x) {
fname <- paste0(dir_results, "/", fractions[x], "_10km_test", testn, ".tiff")
myplot <- autoplot(maps_10_km[[x]]) +
scale_fill_gradientn(colours = viridis(100), na.value = NA)
tiff(
fname,
width = 16,
height = 14,
units = "cm",
res = 300
)
print(myplot)
try(dev.off())
try(dev.off())
}
)
get_R2w()
depths_acc <- c(0:200)
d_out <- list()
# This operation is somewhat slow
# Also calculate statistics by depth for the observations
for (i in 1:length(fractions)) {
mdata <- models[[i]]$pred %>%
bind_cols(models[[i]]$trainingData)
d_out[[i]] <- lapply(
depths_acc,
function(x) {
ddat <- mdata %>% filter(
upper < x + 10 & lower > x - 10
)
out <- data.frame(
Fraction = fractions[i],
Depth = x,
RMSEw = get_RMSEw(
select(ddat, pred, obs),
ddat$weights
),
R2w = get_R2w(
select(ddat, pred, obs),
ddat$weights
),
Weights = sum(ddat$weights)
)
return(out)
}
) %>% bind_rows()
}
d_out %<>% bind_rows()
depths_acc <- c(0:200)
d_out <- list()
# This operation is somewhat slow
# Also calculate statistics by depth for the observations
for (i in 1:length(fractions)) {
mdata <- models[[i]]$pred %>%
bind_cols(models[[i]]$trainingData)
d_out[[i]] <- lapply(
depths_acc,
function(x) {
ddat <- mdata %>% filter(
upper < x + 10 & lower > x - 10
)
out <- data.frame(
Fraction = fractions[i],
Depth = x,
RMSEw = get_RMSEw(
select(ddat, pred, obs),
ddat$weights
),
R2w = get_R2w(
select(ddat, pred, obs),
ddat$weights
),
Weights = sum(ddat$weights)
)
return(out)
}
) %>% bind_rows()
}
d_out %<>%
bind_rows() %>%
mutate(
Fraction = factor(Fraction, levels = fractions, labels = fraction_names)
)
tiff(
paste0(dir_results, "/depth_RMSEw_test_", testn, ".tiff"),
width = 16,
height = 10,
units = "cm",
res = 300
)
d_out %>%
ggplot(aes(x = RMSEw, y = Depth)) +
facet_wrap(~ Fraction, nrow = 1, scales = "free_x") +
geom_path() +
scale_y_reverse(expand = c(0, 0))
try(dev.off())
try(dev.off())
tiff(
paste0(dir_results, "/depth_R2w_test_", testn, ".tiff"),
width = 16,
height = 10,
units = "cm",
res = 300
)
d_out %>%
ggplot(aes(x = R2w, y = Depth)) +
facet_wrap(~ Fraction, nrow = 1, scales = "free_x") +
geom_path() +
scale_y_reverse(expand = c(0, 0))
try(dev.off())
try(dev.off())
tiff(
paste0(dir_results, "/depth_weights_test_", testn, ".tiff"),
width = 16,
height = 10,
units = "cm",
res = 300
)
d_out %>%
ggplot(aes(x = Weights, y = Depth)) +
facet_wrap(~ Fraction, nrow = 1, scales = "free_x") +
geom_path() +
scale_y_reverse(expand = c(0, 0))
try(dev.off())
try(dev.off())
w_j
mean(w_j)
dens_j
mean(dens_j)
42951*10^6/length(dens_j)
length(dens_j)/42951*10^6
length(dens_j)/(42951*10^6)
dens_j > length(dens_j)/(42951*10^6)
mean(dens_j > length(dens_j)/(42951*10^6))
dens_j / length(dens_j)/(42951*10^6))
dens_j / length(dens_j)/(42951*10^6)
dens_j / (length(dens_j)/(42951*10^6))
(dens_j / (length(dens_j)/(42951*10^6))) %>% plot())
(dens_j / (length(dens_j)/(42951*10^6))) %>% plot()
((length(dens_j)/(42951*10^6)) / dens_j) %>% plot()
((length(dens_j)/(42951*10^6)) / dens_j) %>% mean()
(min(dens_j) / dens_j) %>% mean()
dens_j2 <- dens_j
dens_j / (length(dens_j)/(42951*10^6))
(length(dens_j)/(42951*10^6)) / dens_j
w_j2 <- (length(dens_j)/(42951*10^6)) / dens_j
plot(w_j2)
mean(w_j)
mean(w_j2)
w_j3 <- w_j2
w_j3[w_j3 > 1] <- 1
plot(w_j3)
mean(w_j3)
maps_10_km
maps_10km_jb <- lapply(
1:length(uppers),
function(x) {
maps_10km_s2 <- c(
maps_10km[[1]][[x]],
maps_10km[[2]][[x]],
maps_10km[[3]][[x]],
maps_10km[[5]][[x]]/0.568,
maps_10km[[6]][[x]]
)
out <- lapp(maps_10km_s2, JB)
}
)
maps_10km_jb <- lapply(
1:length(uppers),
function(x) {
maps_10_km_s2 <- c(
maps_10_km[[1]][[x]],
maps_10_km[[2]][[x]],
maps_10_km[[3]][[x]],
maps_10_km[[5]][[x]]/0.568,
maps_10_km[[6]][[x]]
)
out <- lapp(maps_10km_s2, JB)
}
)
maps_10km_jb <- lapply(
1:length(uppers),
function(x) {
maps_10_km_s2 <- c(
maps_10_km[[1]][[x]],
maps_10_km[[2]][[x]],
maps_10_km[[3]][[x]],
maps_10_km[[5]][[x]]/0.568,
maps_10_km[[6]][[x]]
)
out <- lapp(maps_10_km_s2, JB)
}
)
source("f_classify_soil_JB.R")
maps_10km_jb <- lapply(
1:length(uppers),
function(x) {
maps_10_km_s2 <- c(
maps_10_km[[1]][[x]],
maps_10_km[[2]][[x]],
maps_10_km[[3]][[x]],
maps_10_km[[5]][[x]]/0.568,
maps_10_km[[6]][[x]]
)
out <- lapp(maps_10_km_s2, classify_soil_JB())
return(out)
}
)
maps_10km_jb <- lapply(
1:length(uppers),
function(x) {
maps_10_km_s2 <- c(
maps_10_km[[1]][[x]],
maps_10_km[[2]][[x]],
maps_10_km[[3]][[x]],
maps_10_km[[5]][[x]]/0.568,
maps_10_km[[6]][[x]]
)
names(maps_10_km_s2) <- c("clay", "silt", "sand_f", "SOM", "CaCO3")
out <- lapp(maps_10_km_s2, classify_soil_JB())
return(out)
}
)
source("f_classify_soil_JB.R")
maps_10km_jb <- lapply(
1:length(uppers),
function(x) {
maps_10_km_s2 <- c(
maps_10_km[[1]][[x]],
maps_10_km[[2]][[x]],
maps_10_km[[3]][[x]],
maps_10_km[[5]][[x]]/0.568,
maps_10_km[[6]][[x]]
)
names(maps_10_km_s2) <- c("clay", "silt", "sand_f", "SOM", "CaCO3")
out <- lapp(maps_10_km_s2, classify_soil_JB)
return(out)
}
)
maps_10km_jb
maps_10km_jb %>% c() %>% plot()
c(maps_10km_jb)%>% plot()
rast(maps_10km_jb) %>% plot()
source("f_classify_soil_JB.R")
maps_10km_jb <- lapply(
1:length(uppers),
function(x) {
maps_10_km_s2 <- c(
maps_10_km[[1]][[x]],
maps_10_km[[2]][[x]],
maps_10_km[[3]][[x]],
maps_10_km[[5]][[x]]/0.568,
maps_10_km[[6]][[x]]
)
names(maps_10_km_s2) <- c("clay", "silt", "sand_f", "SOM", "CaCO3")
out <- lapp(maps_10_km_s2, classify_soil_JB)
return(out)
}
) %>%
rast() %>%
as.factor()
myrgb <- col2rgb(mycolors)
tsp <- as.TSP(dist(t(myrgb)))
set.seed(1)
sol <- solve_TSP(tsp, control = list(repetitions = 1e3))
ordered_cols <- mycolors[sol]
autoplot(maps_10km_jb)
maps_10km_jb
paste0(
"JB class, ", uppers, " - ", lowers, " cm"
)
names(maps_10km_jb) <- paste0("JB class, ", uppers, " - ", lowers, " cm")
autoplot(maps_10km_jb)
?`as.factor,SpatRaster-method`
data.frame(
id = 1:12,
Class = paste0("JB", 1:12)
)
source("f_classify_soil_JB.R")
maps_10km_jb <- lapply(
1:length(uppers),
function(x) {
maps_10_km_s2 <- c(
maps_10_km[[1]][[x]],
maps_10_km[[2]][[x]],
maps_10_km[[3]][[x]],
maps_10_km[[5]][[x]]/0.568,
maps_10_km[[6]][[x]]
)
names(maps_10_km_s2) <- c("clay", "silt", "sand_f", "SOM", "CaCO3")
out <- lapp(maps_10_km_s2, classify_soil_JB)
return(out)
}
) %>%
rast()
levels(maps_10km_jb) <- data.frame(
id = 1:12,
Class = paste0("JB", 1:12)
)
names(maps_10km_jb) <- paste0("JB class, ", uppers, " - ", lowers, " cm")
plot(maps_10km_jb)
maps_10km_jb
nlyr(maps_10km_jb)
levels(maps_10km_jb) <- rep(
list(
data.frame(
id = 1:12,
Class = paste0("JB", 1:12)
)
),
nlyr(maps_10km_jb)
)
plot(maps_10km_jb)
names(maps_10km_jb) <- paste0("JB class, ", uppers, " - ", lowers, " cm")
plot(maps_10km_jb)
autoplot(maps_10km_jb)
?scale_fill_gradientn
ordered_cols
values(maps_10km_jb)
values(maps_10km_jb) %>% as.matrix()
values(maps_10km_jb) %>% unlist()
values(maps_10km_jb) %>% unlist() %>% unique()
values(maps_10km_jb) %>% unlist() %>% unlist()
values(maps_10km_jb) %>% unlist() %>% str()
values(maps_10km_jb) %>% unlist() %>% numeric()
values(maps_10km_jb) %>% unlist() %>% matrix(ncol = 1)
values(maps_10km_jb) %>% unlist() %>% matrix(ncol = 1) %>% unique()
?sort
values(maps_10km_jb) %>% unlist() %>% matrix(ncol = 1) %>% unique() %>% sort()
classes_in_maps <- values(maps_10km_jb) %>%
unlist() %>%
matrix(ncol = 1) %>%
unique() %>%
sort()
cols_in_maps <- ordered_cols[classes_in_maps]
autoplot(maps_10km_jb) +
scale_fill_gradientn(colours = cols_in_maps, na.value = NA)
?scale_fill_discrete
autoplot(maps_10km_jb) +
scale_fill_discrete(type = cols_in_maps)
plot_jb <- autoplot(maps_10km_jb) +
scale_fill_discrete(type = cols_in_maps)
tiff(
paste0(dir_results, "/JB_test_", testn, ".tiff"),
width = 15,
height = 10,
units = "cm",
res = 300
)
print(plot_jb)
dev.off()
