),
bins = 30
) +
scale_fill_gradientn(
colours = mycolorgradient,
aesthetics = "fill",
breaks = my_breaks_dens,
limits= c(0, 1),
na.value = 0,
trans = "sqrt"
) +
guides(
fill = "legend"
, alpha = "legend"
) +
scale_alpha_continuous(
limits= c(0, 1),
range = c(0.05, 1),
breaks = my_breaks_dens,
na.value = 0,
trans = "sqrt"
) +
facet_wrap(~fraction, nrow = 2, scales = "free", labeller = label_parsed) +
theme_bw() +
theme(aspect.ratio = 1) +
scale_x_continuous(expand = c(0, 0)) +
scale_y_continuous(expand = c(0, 0)) +
geom_abline(col = "red") +
geom_blank(aes(y = ax_max)) +
geom_blank(aes(x = ax_max)) +
geom_blank(aes(y = ax_min)) +
geom_blank(aes(x = ax_min)) +
xlab("Observation") +
ylab("Prediction")
try(dev.off())
tiff(
paste0(dir_results, "/boot_accuracy_all_test", testn, ".tiff"),
width = 15,
height = 10,
units = "cm",
res = 300
)
allpred %>%
ggplot(aes(x = obs, y = pred, weight = w)) +
geom_hex(
aes(
alpha = after_stat(ndensity),
fill = after_stat(ndensity)
),
bins = 30
) +
scale_fill_gradientn(
colours = mycolorgradient,
aesthetics = "fill",
breaks = my_breaks_dens,
limits= c(0, 1),
na.value = 0,
trans = "sqrt"
) +
guides(
fill = "legend"
, alpha = "legend"
) +
scale_alpha_continuous(
limits= c(0, 1),
range = c(0.05, 1),
breaks = my_breaks_dens,
na.value = 0,
trans = "sqrt"
) +
facet_wrap(~fraction, nrow = 2, scales = "free", labeller = label_parsed) +
theme_bw() +
theme(aspect.ratio = 1) +
scale_x_continuous(expand = c(0, 0)) +
scale_y_continuous(expand = c(0, 0)) +
geom_abline(col = "red") +
geom_blank(aes(y = ax_max)) +
geom_blank(aes(x = ax_max)) +
geom_blank(aes(y = ax_min)) +
geom_blank(aes(x = ax_min)) +
xlab("Observation") +
ylab("Prediction")
try(dev.off())
d_out <- list()
# Also calculate statistics by depth for the observations (to do)
allpred_depth <- foreach(i = 1:6) %do%
getpred(
i, axmaxmin = FALSE, drop_imputed = FALSE, drop_inf = FALSE
)
for (i in 1:length(models_boot)) {
depth_weights <- weights_objects[[i]]$w_cm_mat / weights_objects[[i]]$w_cm_sums
mdata <- allpred_depth[[i]]
d_out[[i]] <- apply(
depth_weights, 2,
function(x) {
ddat <- mdata %>%
mutate(
w_div = x
) %>%
filter(
is.finite(w_div),
is.finite(obs),
is.finite(pred)
)
if (i == 5) {
ddat %<>% filter(imputed == FALSE)
}
RMSEws <- numeric()
R2ws <- numeric()
weights_ks <- numeric()
for (k in 1:2) {
if (k == 1) {
ddat_k <- ddat %>%
filter(fold < 10)
} else {
ddat_k <- ddat %>%
filter(fold == 10)
}
if (nrow(ddat_k) > 2) {
RMSEws[k] <- get_RMSEw(
select(ddat_k, c(pred, obs)),
ddat_k$w_div
)
R2ws[k] <- get_R2w(
select(ddat_k, c(pred, obs)),
ddat_k$w_div
)
weights_ks[k] <- sum(ddat_k$w_div)
} else {
RMSEws[k] <- NA
R2ws[k] <- NA
weights_ks[k] <- NA
}
}
out <- data.frame(
RMSEw = RMSEws,
R2w = R2ws,
Weights = weights_ks,
Dataset = tr_partitions
)
return(out)
}
) %>% bind_rows()
d_out[[i]]$Fraction <- fractions[i]
d_out[[i]]$Depth = rep(w_depths, each = 2)
}
d_out <- list()
allpred_depth <- foreach(i = 1:6) %do%
getpred(
i, axmaxmin = FALSE, drop_imputed = FALSE, drop_inf = FALSE
)
for (i in 1:length(fractions)) {
depth_weights <- weights_objects[[i]]$w_cm_mat / weights_objects[[i]]$w_cm_sums
mdata <- allpred_depth[[i]]
d_out[[i]] <- apply(
depth_weights, 2,
function(x) {
ddat <- mdata %>%
mutate(
w_div = x
) %>%
filter(
is.finite(w_div),
is.finite(obs),
is.finite(pred)
)
if (i == 5) {
ddat %<>% filter(imputed == FALSE)
}
RMSEws <- numeric()
R2ws <- numeric()
weights_ks <- numeric()
for (k in 1:2) {
if (k == 1) {
ddat_k <- ddat %>%
filter(fold < 10)
} else {
ddat_k <- ddat %>%
filter(fold == 10)
}
if (nrow(ddat_k) > 2) {
RMSEws[k] <- get_RMSEw(
select(ddat_k, c(pred, obs)),
ddat_k$w_div
)
R2ws[k] <- get_R2w(
select(ddat_k, c(pred, obs)),
ddat_k$w_div
)
weights_ks[k] <- sum(ddat_k$w_div)
} else {
RMSEws[k] <- NA
R2ws[k] <- NA
weights_ks[k] <- NA
}
}
out <- data.frame(
RMSEw = RMSEws,
R2w = R2ws,
Weights = weights_ks,
Dataset = tr_partitions
)
return(out)
}
) %>% bind_rows()
d_out[[i]]$Fraction <- fractions[i]
d_out[[i]]$Depth = rep(w_depths, each = 2)
}
d_out %<>%
bind_rows() %>%
mutate(
Fraction = factor(
Fraction,
levels = fractions,
labels = c(
expression("Clay"~"(%)"),
expression("Silt"~"(%)"),
expression("Fine"~"sand"~"(%)"),
expression("Coarse"~"sand"~"(%)"),
expression("log[SOC"~"(%)]"),
expression(sqrt("CaCO"[3]~"(%)"))
)
),
Dataset = as.factor(Dataset)
)
myBreaks <- function(x) {
breaks <- c(
0,
(max(x)*1/2) %>% log2() %>% round(., digits = 0) %>% (2)^.
)
names(breaks) <- attr(breaks,"labels")
return(breaks)
}
myBreaks <- function(x) {
breaks <- c(
0,
(max(x)*1/2) %>% log2() %>% round(., digits = 0) %>% (2)^.
)
names(breaks) <- attr(breaks,"labels")
return(breaks)
}
tiff(
paste0(dir_results, "/boot_depth_RMSEw_test_", testn, ".tiff"),
width = 16,
height = 10,
units = "cm",
res = 300
)
d_out %>%
ggplot(aes(x = RMSEw, y = Depth, color = Dataset)) +
facet_wrap(~Fraction, nrow = 1, scales = "free_x", labeller = label_parsed) +
geom_path() +
scale_y_reverse(expand = c(0, 0)) +
scale_x_continuous(
guide = guide_axis(check.overlap = TRUE),
breaks = myBreaks,
limits = c(0, NA),
expand = expansion(mult = c(0, 0.2),
add = c(0, 0))
) +
theme_bw() +
theme(strip.text.x = element_text(size = 6)) +
labs(
x = bquote(RMSE[w]),
y = "Depth (cm)"
)
try(dev.off())
try(dev.off())
tiff(
paste0(dir_results, "/boot_depth_R2w_test_", testn, ".tiff"),
width = 16,
height = 10,
units = "cm",
res = 300
)
d_out %>%
ggplot(aes(x = R2w, y = Depth, color = Dataset)) +
facet_wrap(~Fraction, nrow = 1, labeller = label_parsed) +
geom_path() +
scale_y_reverse(expand = c(0, 0)) +
scale_x_continuous(
guide = guide_axis(check.overlap = TRUE),
breaks = c(0, 0.3, 0.6),
expand = expansion(mult = c(0, 0),
add = c(0.01, 0.02))
) +
theme_bw() +
theme(strip.text.x = element_text(size = 6)) +
labs(
x = bquote({R^2}[w]),
y = "Depth (cm)"
)
try(dev.off())
try(dev.off())
tiff(
paste0(dir_results, "/depth_weights_test_", testn, ".tiff"),
width = 16,
height = 10,
units = "cm",
res = 300
)
d_out %>%
ggplot(aes(x = Weights, y = Depth, color = Dataset)) +
facet_wrap(~ Fraction, nrow = 1, labeller = label_parsed) +
geom_path() +
scale_y_reverse(expand = c(0, 0)) +
scale_x_continuous(
guide = guide_axis(check.overlap = TRUE),
breaks = c(0, 2000),
expand = expansion(mult = c(0.01, 0.1),
add = c(0.01, 0.1))
) +
theme_bw() +
theme(strip.text.x = element_text(size = 6)) +
labs(
x = "Total weights",
y = "Depth (cm)"
)
try(dev.off())
try(dev.off())
depth_weights <- weights_objects[[i]]$w_cm_mat / weights_objects[[i]]$w_cm_sums
depth_weights_JB <- lapply(
1:length(fractions),
function(x) {
out <- matrix(
0,
nrow = nrow(obs),
ncol = ncol(weights_objects[[x]]$w_cm_mat)
)
d_w <- weights_objects[[x]]$w_cm_mat / weights_objects[[x]]$w_cm_sums
out[!is.na(models_weights[, x]),] <- d_w
out[is.na(out)] <- 0
return(out)
}
) %>%
Reduce("+", .) %>%
"/"(6)
depth_weights <- weights_objects[[i]]$w_cm_mat / weights_objects[[i]]$w_cm_sums
depth_weights_JB <- lapply(
1:length(fractions),
function(x) {
out <- matrix(
0,
nrow = nrow(obs),
ncol = ncol(weights_objects[[x]]$w_cm_mat)
)
d_w <- weights_objects[[x]]$w_cm_mat / weights_objects[[x]]$w_cm_sums
out[!is.na(models_weights[[x]]),] <- d_w
out[is.na(out)] <- 0
return(out)
}
) %>%
Reduce("+", .) %>%
"/"(6)
depth_weights <- weights_objects[[i]]$w_cm_mat / weights_objects[[i]]$w_cm_sums
depth_weights_JB <- lapply(
1:length(fractions),
function(x) {
out <- matrix(
0,
nrow = nrow(obs),
ncol = ncol(weights_objects[[x]]$w_cm_mat)
)
d_w <- weights_objects[[x]]$w_cm_mat / weights_objects[[x]]$w_cm_sums
out[!is.na(models_weights[[x]])] <- d_w
out[is.na(out)] <- 0
return(out)
}
) %>%
Reduce("+", .) %>%
"/"(6)
JB_forplot <- c("JB1", "JB2", "JB3", "JB4", "JB5", "JB6", "JB7", "JB8", "JB11",
"JB12")
depth_weights <- weights_objects[[i]]$w_cm_mat / weights_objects[[i]]$w_cm_sums
depth_weights_JB <- lapply(
1:length(fractions),
function(x) {
out <- matrix(
0,
nrow = nrow(obs),
ncol = ncol(weights_objects[[x]]$w_cm_mat)
)
d_w <- weights_objects[[x]]$w_cm_mat / weights_objects[[x]]$w_cm_sums
out[!is.na(models_weights[[x]]),] <- d_w
out[is.na(out)] <- 0
return(out)
}
) %>%
Reduce("+", .) %>%
"/"(6)
str(depth_weights)
models_weights
models_weights[[1]] %>% is.na() %>% sum()
models_weights[[3]] %>% is.na() %>% sum()
models_weights
str(models_weights)
plot(models_weights[[1]])
depth_weights <- weights_objects[[i]]$w_cm_mat / weights_objects[[i]]$w_cm_sums
depth_weights_JB <- lapply(
1:length(fractions),
function(x) {
out <- matrix(
0,
nrow = nrow(obs),
ncol = ncol(weights_objects[[x]]$w_cm_mat)
)
d_w <- weights_objects[[x]]$w_cm_mat / weights_objects[[x]]$w_cm_sums
out[0 < models_weights[[x]],] <- d_w
out[is.na(out)] <- 0
return(out)
}
) %>%
Reduce("+", .) %>%
"/"(6)
JB_forplot <- c("JB1", "JB2", "JB3", "JB4", "JB5", "JB6", "JB7", "JB8", "JB11",
"JB12")
JB_acc_d <- lapply(
c(FALSE, TRUE),
function(x2) {
out2 <- lapply(
1:ncol(depth_weights_JB),
function(x) {
ddat <- JB_df %>%
mutate(
w_d = depth_weights_JB[, x]
) %>% filter(
imputed == FALSE,
(fold == 10) == x2,
w_d > 0
) %>%
select(c(predicted, observed, w_d, acc)) %>%
na.omit()
if(nrow(ddat) > 0) {
sens_spec <- ddat %>%
confusion(
x = .[, 1],
y = .[, 2],
weights = .[, 3]
) %>%
summary() %>%
.@.Data %>%
t() %>%
as.data.frame() %>%
select(c(Sensitivity, Specificity)) %>%
mutate(
Sensitivity = case_when(
!is.finite(Sensitivity) ~ 0,
.default = Sensitivity
)
)
out <- sens_spec %>% apply(., 1, mean)
out$BA <- sens_spec %>%
select(Sensitivity) %>%
unlist() %>%
mean()
out$OA <- weighted.mean(ddat$acc, ddat$w_d)
out$Depth <- w_depths[x]
out %<>% as.data.frame()
} else {
out <- NULL
}
return(out)
}
) %>%
bind_rows() %>%
mutate(
Dataset = x2 + 1
# ,
# Depth = w_depths
)
}
) %>%
bind_rows()
if(length(unique(JB_acc_d$Dataset)) > 1) {
JB_acc_d %<>% mutate(
Dataset = factor(Dataset, labels = c("CV", "Holdout"))
)
}
JB_forplot <- c("JB1", "JB2", "JB3", "JB4", "JB5", "JB6", "JB7", "JB8", "JB11",
"JB12", "BA", "OA")
tiff(
paste0(dir_results, "/boot_JB_acc_test", testn, ".tiff"),
width = 16,
height = 10,
units = "cm",
res = 300
)
JB_acc_d %>%
select(-c(JB9, JB10)) %>%
pivot_longer(
-c(Depth, Dataset),
values_to = "Accuracy"
) %>%
mutate(
name = factor(
name,
levels = JB_forplot
)
) %>%
ggplot(aes(x = Accuracy, y = Depth, color = Dataset)) +
geom_path() +
facet_wrap(~ name, nrow = 2) +
scale_y_reverse(expand = expansion(mult = 0, add = 0)) +
scale_x_continuous(breaks = c(0.5, 1))
try(dev.off())
write.table(
obs,
paste0(dir_results, "observations_texture.csv"),
row.names = FALSE,
col.names = TRUE,
sep = ";"
)
