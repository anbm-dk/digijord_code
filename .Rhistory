#   )
# }
# TO do:
# Write a function to convert covariate importance from PCs to original covs
# In this, take into account different sums for the columns.
# END
# 03: Extract covariates
library(terra)
library(magrittr)
library(exactextractr)
library(sf)
dir_code <- getwd()
root <- dirname(dir_code)
dir_dat <- paste0(root, "/digijord_data/")
mycrs <- "EPSG:25832"
# 1 Load observations
dir_obs_proc <- dir_dat %>%
paste0(., "/observations/processed/")
dsc <- dir_obs_proc %>%
paste0(., "dsc.csv") %>%
read.table(
header = TRUE,
sep = ";",
) %>%
vect(
geom = c("UTMX", "UTMY"),
crs = mycrs,
keepgeom = TRUE
)
SEGES <- dir_obs_proc %>%
paste0(., "SEGES.csv") %>%
read.table(
header = TRUE,
sep = ";",
) %>%
vect(
geom = c("UTMX", "UTMY"),
crs = mycrs,
keepgeom = TRUE
)
SINKS <- dir_obs_proc %>%
paste0(., "SINKS.csv") %>%
read.table(
header = TRUE,
sep = ";",
) %>%
vect(
geom = c("UTMX", "UTMY"),
crs = mycrs,
keepgeom = TRUE
)
profiles_shp <- dir_dat %>%
paste0(
.,
"/observations/profiles/Profiles_coordinates_new/Profiles_coordinates_new.shp"
) %>%
vect()
forest_samples <- dir_obs_proc %>%
paste0(., "forest_samples.csv") %>%
read.table(
header = TRUE,
sep = ";",
) %>%
vect(
geom = c("UTMX", "UTMY"),
crs = mycrs,
keepgeom = TRUE
)
# 2 Load covariates
cov_dir <- dir_dat %>% paste0(., "/covariates")
cov_files <- cov_dir %>% list.files()
cov_names <- cov_files %>% tools::file_path_sans_ext()
cov <- paste0(cov_dir, "/", cov_files) %>%
rast()
names(cov) <- cov_names
crs(cov) <- mycrs
cov_cats <- dir_code %>%
paste0(., "/cov_categories_20231110.csv") %>%
read.table(
sep = ",",
header = TRUE
)
cov_selected <- cov_cats %>%
filter(anbm_use == 1) %>%
dplyr::select(., name) %>%
unlist() %>%
unname()
cov <- terra::subset(cov, cov_selected)
# 3 Create buffers (40 m = ~ 0.5 ha)
buffer_dsc <- terra::buffer(
dsc,
width = 40
) %>%
st_as_sf()
buffer_SEGES <- terra::buffer(
SEGES,
width = 40
) %>%
st_as_sf()
# 4 Extract
dsc_extr <- terra::extract(
x = cov,
y = dsc,
ID = FALSE,
)
# buffer_dsc_extr <- exact_extract(
#     x = cov,
#     y = buffer_dsc,
#     fun = "mean",
#     progress = TRUE
#   )
# names(buffer_dsc_extr) <- names(cov)
SEGES_extr <- terra::extract(
x = cov,
y = SEGES,
ID = FALSE,
)
# buffer_SEGES_extr <- exact_extract(
#   x = cov,
#   y = buffer_SEGES,
#   fun = "mean",
#   progress = TRUE
# )
# names(buffer_SEGES_extr) <- names(cov)
SINKS_extr <- terra::extract(
x = cov,
y = SINKS,
ID = FALSE,
)
profiles_extr <- terra::extract(
x = cov,
y = profiles_shp,
ID = FALSE,
)
profiles_extr$PROFILNR <- profiles_shp$PROFILNR
forests_extr <- terra::extract(
x = cov,
y = forest_samples,
ID = FALSE,
)
# 5 Write to csv
dir_extr <- dir_dat %>%
paste0(., "/extracts/")
write.table(
dsc_extr,
paste0(dir_extr, "dsc_extr.csv"),
row.names = FALSE,
sep = ";"
)
# write.table(
#   buffer_dsc_extr,
#   paste0(dir_extr, "buffer_dsc_extr.csv"),
#   row.names = FALSE,
#   sep = ";"
# )
write.table(
SEGES_extr,
paste0(dir_extr, "SEGES_extr.csv"),
row.names = FALSE,
sep = ";"
)
# write.table(
#   buffer_SEGES_extr,
#   paste0(dir_extr, "buffer_SEGES_extr.csv"),
#   row.names = FALSE,
#   sep = ";"
# )
write.table(
SINKS_extr,
paste0(dir_extr, "SINKS_extr.csv"),
row.names = FALSE,
sep = ";"
)
write.table(
profiles_extr,
paste0(dir_extr, "profiles_extr.csv"),
row.names = FALSE,
sep = ";"
)
write.table(
forests_extr,
paste0(dir_extr, "forests_extr.csv"),
row.names = FALSE,
sep = ";"
)
# Save as RDS
saveRDS(
dsc_extr,
paste0(dir_extr, "dsc_extr.rds")
)
saveRDS(
SEGES_extr,
paste0(dir_extr, "SEGES_extr.rds")
)
saveRDS(
SINKS_extr,
paste0(dir_extr, "SINKS_extr.rds")
)
saveRDS(
profiles_extr,
paste0(dir_extr, "profiles_extr.rds")
)
saveRDS(
forests_extr,
paste0(dir_extr, "forests_extr.rds")
)
# END
?prcomp
C <- chol(S <- toeplitz(.9 ^ (0:31))) # Cov.matrix and its root
all.equal(S, crossprod(C))
set.seed(17)
X <- matrix(rnorm(32000), 1000, 32)
Z <- X %*% C  ## ==>  cov(Z) ~=  C'C = S
all.equal(cov(Z), S, tolerance = 0.08)
pZ <- prcomp(Z, tol = 0.1)
summary(pZ) # only ~14 PCs (out of 32)
## or choose only 3 PCs more directly:
pz3 <- prcomp(Z, rank. = 3)
summary(pz3) # same numbers as the first 3 above
stopifnot(ncol(pZ$rotation) == 14, ncol(pz3$rotation) == 3,
all.equal(pz3$sdev, pZ$sdev, tolerance = 1e-15)) # exactly equal typically
## signs are random
require(graphics)
## the variances of the variables in the
## USArrests data vary by orders of magnitude, so scaling is appropriate
prcomp(USArrests)  # inappropriate
prcomp(USArrests, scale. = TRUE)
prcomp(~ Murder + Assault + Rape, data = USArrests, scale. = TRUE)
plot(prcomp(USArrests))
summary(prcomp(USArrests, scale. = TRUE))
biplot(prcomp(USArrests, scale. = TRUE))
Z
C <- chol(S <- toeplitz(.9 ^ (0:31))) # Cov.matrix and its root
all.equal(S, crossprod(C))
set.seed(17)
X <- matrix(rnorm(32000), 1000, 32)
Z <- X %*% C  ## ==>  cov(Z) ~=  C'C = S
all.equal(cov(Z), S, tolerance = 0.08)
pZ <- prcomp(Z, tol = 0.1)
pZ
summary(pZ) # only ~14 PCs (out of 32)
summary(pZ) # only ~14 PCs (out of 32) %>% str()
str(summary(pZ))
summary(pZ)
summary(pZ)$importance
summary(pZ)$importance[3, ]
Z_na <- Z
Z_na[1, 1] <- NA
predict(pZ, Z_na)
# 07: Train texture models
# 1: Start up
# library(Cubist)
library(terra)
library(magrittr)
library(tools)
library(dplyr)
library(caret)
library(tibble)
library(tidyr)
library(xgboost)
library(doParallel)
library(spatstat) # weights
dir_code <- getwd()
root <- dirname(dir_code)
dir_dat <- paste0(root, "/digijord_data/")
source("f_predict_passna.R")
train_models <- TRUE
# To do:
# Pdp with depth
# Profile examples
# Test 1 - 8: Cubist.
# Test 8: New covariates (chelsa, river valley bottoms, hillyness).
# Test 9: xgboost.
# Test 10: Predicted row and column (poor accuracy).
# Test 11: Fever data, excluding water, sealed areas and urban areas.
# Test 12: Depth boundaries as covariates, stepwise xgb optimization.
# Test 13: Bayesian optimization.
# Test 14: Fix mistake in covariate selection, new optimization function.
# Categorical covariates now have fuzzy boundaries.
# Filled gaps in bare soil composite.
# Using colsample_bynode instead of colsample_bylevel.
testn <- 14
mycrs <- "EPSG:25832"
# Results folder
dir_results <- dir_dat %>%
paste0(., "/results_test_", testn, "/") %T>%
dir.create()
# 2: Load observations
dir_obs_proc <- dir_dat %>%
paste0(., "/observations/processed/")
dsc <- dir_obs_proc %>%
paste0(., "dsc.csv") %>%
read.table(
header = TRUE,
sep = ";"
) %>%
vect(
geom = c("UTMX", "UTMY"),
crs = mycrs,
keepgeom = TRUE
)
SEGES <- dir_obs_proc %>%
paste0(., "SEGES.csv") %>%
read.table(
header = TRUE,
sep = ";"
) %>%
vect(
geom = c("UTMX", "UTMY"),
crs = mycrs,
keepgeom = TRUE
)
SINKS <- dir_obs_proc %>%
paste0(., "SINKS.csv") %>%
read.table(
header = TRUE,
sep = ";"
) %>%
vect(
geom = c("UTMX", "UTMY"),
crs = mycrs,
keepgeom = TRUE
)
profiles_texture <- dir_obs_proc %>%
paste0(., "profiles_texture.csv") %>%
read.table(
header = TRUE,
sep = ";"
) %>%
vect(
geom = c("UTMX", "UTMY"),
crs = mycrs,
keepgeom = TRUE
)
forest_samples <- dir_obs_proc %>%
paste0(., "forest_samples.csv") %>%
read.table(
header = TRUE,
sep = ";"
) %>%
vect(
geom = c("UTMX", "UTMY"),
crs = mycrs,
keepgeom = TRUE
)
# 3: Load folds
dir_folds <- dir_dat %>%
paste0(., "/folds/")
dsc_folds <- dir_folds %>%
paste0(., "dsc_folds.csv") %>%
read.table(
header = TRUE,
sep = ";"
)
SEGES_folds <- dir_folds %>%
paste0(., "SEGES_folds.csv") %>%
read.table(
header = TRUE,
sep = ";"
)
SINKS_folds <- dir_folds %>%
paste0(., "SINKS_folds.csv") %>%
read.table(
header = TRUE,
sep = ";"
)
profiles_folds <- dir_folds %>%
paste0(., "profiles_folds.csv") %>%
read.table(
header = TRUE,
sep = ";"
) %>%
right_join(values(profiles_texture)) %>%
select(lyr.1)
forest_folds <- dir_folds %>%
paste0(., "forest_folds.csv") %>%
read.table(
header = TRUE,
sep = ";"
)
# 4: Load covariate data
dir_cov <- dir_dat %>% paste0(., "/covariates")
cov_cats <- dir_code %>%
paste0(., "/cov_categories_20231110.csv") %>%
read.table(
sep = ";",
header = TRUE
)
cov_files <- dir_cov %>% list.files()
cov_names <- cov_files %>% tools::file_path_sans_ext()
cov_names %>%
write.table(
paste0("cov_names_", Sys.Date(), ".csv")
)
cov_names[!cov_names %in% cov_cats$name]
# 5: Load extracted covariates
dir_extr <- dir_dat %>%
paste0(., "/extracts/")
usebuffer <- FALSE
if (usebuffer) {
dsc_extr <- dir_extr %>%
paste0(., "/buffer_dsc_extr.csv") %>%
read.table(
header = TRUE,
sep = ";"
)
SEGES_extr <- dir_extr %>%
paste0(., "/buffer_SEGES_extr.csv") %>%
read.table(
header = TRUE,
sep = ";"
)
} else {
dsc_extr <- dir_extr %>%
paste0(., "/dsc_extr.rds") %>%
readRDS()
SEGES_extr <- dir_extr %>%
paste0(., "/SEGES_extr.rds") %>%
readRDS()
}
SINKS_extr <- dir_extr %>%
paste0(., "/SINKS_extr.rds") %>%
readRDS()
profiles_extr <- dir_extr %>%
paste0(., "profiles_extr.rds") %>%
readRDS() %>%
right_join(values(profiles_texture)) %>%
select(any_of(cov_names))
SINKS_extr <- dir_extr %>%
paste0(., "/SINKS_extr.rds") %>%
readRDS()
forests_extr <- dir_extr %>%
paste0(., "/forests_extr.rds") %>%
readRDS()
# 6: Merge data
obs_v <- list(dsc, SEGES, SINKS, profiles_texture, forest_samples) %>%
vect()
# Extract mask values for all the observations
mask_LU <- paste0(dir_dat, "/layers/Mask_LU.tif") %>% rast()
mask_LU_extr <- terra::extract(
mask_LU,
obs_v,
ID = FALSE
)
mask_LU_extr %<>% unlist() %>% unname()
obs_data <- obs_v %>%
values() %>%
mutate(
# logSOC = log(SOC),
# logCaCO3 = log(CaCO3),
year = date %>%
as.character() %>%
substr(start = 1, stop = 4) %>%
as.numeric(),
mask_LU = mask_LU_extr
)
# fractions <- c("clay", "silt", "fine_sand", "coarse_sand", "logSOC", "logCaCO3")
fractions_alt <- c("clay", "silt", "fine_sand", "coarse_sand", "SOC", "CaCO3")
fractions <- fractions_alt
fraction_names <- c(
"Clay", "Silt", "Fine sand", "Coarse sand", "SOC", "CaCO3"
)
bounds_lower <- rep(0, 6)
bounds_upper <- rep(100, 6)
# 7: Make training data
folds <- bind_rows(
dsc_folds,
SEGES_folds,
SINKS_folds,
profiles_folds,
forest_folds
)
names(folds) <- "fold"
extr <- bind_rows(
dsc_extr,
SEGES_extr,
SINKS_extr,
profiles_extr,
forests_extr
)
obs <- cbind(obs_data, extr, folds) %>%
filter(
!is.na(UTMX),
!is.na(UTMY),
!is.na(mask_LU),
is.finite(fold)
)
# Make new ID
obs %<>%
rownames_to_column() %>%
mutate(ID_new = rowname, .before = everything()) %>%
select(-rowname)
pcs_cov <- readRDS(paste0(dir_dat, "pcs_cov.rds"))
if (use_pca) {
pcs_cov <- readRDS(paste0(dir_dat, "pcs_cov.rds"))
obs_pcs <- predict(pcs_cov, obs)
}
use_pca <- TRUE
if (use_pca) {
pcs_cov <- readRDS(paste0(dir_dat, "pcs_cov.rds"))
obs_pcs <- predict(pcs_cov, obs)
}
obs_pcs
cbind(obs, obs_pcs)
cbind(obs, obs_pcs) %>% str()
use_pca <- TRUE
if (use_pca) {
pcs_cov <- readRDS(paste0(dir_dat, "pcs_cov.rds"))
obs_pcs <- predict(pcs_cov, obs)
obs <- cbind(obs, obs_pcs)
}
colnames(obs_pcs)
