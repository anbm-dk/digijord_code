scales = "free"
) +
# xlim(1, ntop) +
ylim(0, NA) +
coord_flip() +
scale_x_continuous(
breaks = l$order,
labels = l$covariate,
expand = c(0, 0)
) +
colScale
dev.off()
outfolder <- dir_dat %>%
paste0(., "/testarea_10km/covariates/")
cov_10km <- outfolder %>%
list.files(full.names = TRUE) %>%
rast
names(cov_10km) <- names(cov)
predfolder <- dir_dat %>%
paste0(., "/testarea_10km/predictions_", testn, "/") %T>%
dir.create()
rfun <- function(mod, dat, ...) {
library(caret)
library(Cubist)
rfun2 <- function(mod2, dat2, ...) {
notallnas <- rowSums(is.na(dat2)) < (ncol(dat2) - 2)  # NB: Edit this line
out2 <- rep(NA, nrow(dat2))
if (sum(notallnas) > 0) {
out2[notallnas] <- predict(
object = mod2,
newdata = dat2[notallnas, ],
na.action = na.pass,
...
)
}
return(out2)
}
out <- rfun2(mod, dat, ...)
return(out)
}
# Make the maps
maps_10km <- list()
showConnections()
for(i in 1:length(fractions))
{
frac <- fractions[i]
maps_10km[[i]] <- predict(
cov_10km,
models[[i]],
fun = rfun,
na.rm = FALSE,
cores = 2,
filename = paste0(predfolder, frac,  "_10km.tif"),
overwrite = TRUE,
const = data.frame(
SOM_removed = TRUE,
year = 2010
)
)
}
maps_10km <- predfolder %>%
paste0(., fractions,  "_10km.tif") %>%
rast()
names(maps_10km) <- fractions
# Looking at 10 km maps
library(viridisLite)
plot(maps_10km, col = cividis(100))
maps_10km_stack2 <- c(
maps_10km[[1:4]],
exp(maps_10km[[5]]),
exp(maps_10km[[6]])
)
names(maps_10km_stack2) <- fraction_names
tiff(
paste0(dir_results, "/maps_test", testn, ".tiff"),
width = 24,
height = 16,
units = "cm",
res = 300
)
plot(maps_10km_stack2, col = cividis(100))
dev.off()
JB <- function(clay, silt, sand_f, SOM, CaCO3)
{
out <- rep(0, length(clay))
out[CaCO3 > 10] <- 12
out[out == 0 & SOM > 10] <- 11
out[out == 0 & clay < 5 & silt < 20 & sand_f < 50] <- 1
out[out == 0 & clay < 5 & silt < 20] <- 2
out[out == 0 & clay < 10 & silt < 25 & sand_f < 40] <- 3
out[out == 0 & clay < 10 & silt < 25]<-4
out[out == 0 & clay < 15 & silt < 30 & sand_f < 40] <- 5
out[out == 0 & clay < 15 & silt < 30] <- 6
out[out == 0 & clay < 25 & silt < 35] <- 7
out[out == 0 & clay < 45 & silt < 45] <- 8
out[out == 0 & silt < 50] <- 9
out[out == 0] <- 10
return(out)
}
maps_10km_s2 <- c(maps_10km[[1]], maps_10km[[2]], maps_10km[[3]], exp(maps_10km[[5]])/0.568, exp(maps_10km[[6]]))
maps_10km_jb <- lapp(maps_10km_s2, JB) %>% as.factor()
myrgb <- col2rgb(mycolors)
tsp <- as.TSP(dist(t(myrgb)))
set.seed(1)
sol <- solve_TSP(tsp, control = list(repetitions = 1e3))
ordered_cols <- mycolors[sol]
ggplot2::qplot(x = 1:12, y = 1, fill = I(ordered_cols), geom = "col", width = 1) + ggplot2::theme_void()
tiff(
paste0(dir_results, "/JB_test", testn, ".tiff"),
width = 15,
height = 10,
units = "cm",
res = 300
)
plot(
maps_10km_jb,
col = ordered_cols[levels(maps_10km_jb)[[1]]$ID],
main = "JB-nummer"
)
dev.off()
library(parallel)
numCores <- detectCores()
numCores
dir_tiles <- dir_dat %>%
paste0(., "/tiles_591/")
subdir_tiles <- dir_tiles %>% list.dirs() %>% .[-1]
dir_pred_all <- dir_results %>%
paste0(., "/predictions/") %T>%
dir.create()
dir_pred_tiles <- dir_pred_all  %>%
paste0(., "/tiles/") %T>%
dir.create()
for (i in 1:length(fractions)) {
frac <- fractions[i]
dir_pred_tiles_frac <- dir_pred_tiles %>%
paste0(., "/", names(models)[i], "/") %T>%
dir.create()
model_i <- models[[i]]
showConnections()
cl <- makeCluster(numCores)
clusterEvalQ(
cl,
{
library(terra)
library(caret)
library(Cubist)
library(magrittr)
library(dplyr)
}
)
clusterExport(
cl,
c("model_i",
"subdir_tiles",
"dir_pred_tiles_frac",
"frac",
"cov_names",
"cov_selected",
"rfun",
"dir_dat"
)
)
parSapplyLB(
cl,
1:length(subdir_tiles),
function(x) {
tmpfolder <- paste0(dir_dat, "/Temp/")
terraOptions(memfrac = 0.02, tempdir = tmpfolder)
cov_x <- subdir_tiles[x] %>%
list.files(full.names = TRUE) %>%
rast()
names(cov_x) <- cov_names
cov_x2 <- subset(cov_x, cov_selected)
tilename_x <- basename(subdir_tiles[x])
outname_x <- dir_pred_tiles_frac %>%
paste0(., "/", frac, "_", tilename_x, ".tif")
predict(
cov_x2,
model_i,
fun = rfun,
na.rm = FALSE,
filename = outname_x,
overwrite = TRUE,
const = data.frame(
SOM_removed = TRUE,
year = 2010
)
)
}
)
stopCluster(cl)
registerDoSEQ()
rm(cl)
outtiles_frac <- dir_pred_tiles_frac %>%
list.files(full.names = TRUE) %>%
sprc()
merge(
outtiles_frac,
filename = paste0(dir_pred_all, frac, "_merged.tif"),
overwrite = TRUE
)
}
library(terra)
library(magrittr)
library(tools)
library(dplyr)
library(caret)
library(tibble)
library(tidyr)
dir_code <- getwd()
root <- dirname(dir_code)
dir_dat <- paste0(root, "/digijord_data/")
testn <- 8
mycrs <- "EPSG:25832"
dir_results <- dir_dat %>%
paste0(., "/results_test_", testn, "/")
outfolder <- dir_dat %>%
paste0(., "/testarea_10km/covariates/")
predfolder <- dir_dat %>%
paste0(., "/testarea_10km/predictions_", testn, "/")
vindum_obs <- dir_dat %>%
paste0(., "/observations/Vindum/Vindum_everything.csv") %>%
read.table(
header = TRUE,
sep = ";"
) %>%
filter(DEPTH == 25) %>%
vect(
geom = c("UTMX", "UTMY"),
crs = mycrs,
keepgeom = TRUE
)
predictions <- predfolder %>%
list.files(full.names = TRUE) %>%
rast()
names(predictions) <- predfolder %>%
list.files() %>%
file_path_sans_ext()
vindum_extr <- terra::extract(predictions, vindum_obs)
plot(predictions[[1]], ext = ext(vindum_obs))
plot(vindum_obs, "LER", add = TRUE)
plot(vindum_extr$clay_10km, vindum_obs$LER)
abline(1,1)
cor(vindum_extr$clay_10km, vindum_obs$LER, use =  "pairwise.complete.obs")^2
plot(vindum_extr$logSOC_10km, log(vindum_obs$SOC))
abline(1,1)
plot(exp(vindum_extr$logSOC_10km), vindum_obs$SOC)
abline(1,1)
cor(exp(vindum_extr$logSOC_10km), vindum_obs$SOC, use =  "pairwise.complete.obs")^2
plot(exp(predictions[[5]]), ext = ext(vindum_obs))
plot(vindum_obs, "SOC", add = TRUE)
plot(vindum_extr$logSOC_10km, vindum_obs$SOC)
abline(1,1)
library(Cubist)
library(terra)
library(magrittr)
library(tools)
library(dplyr)
library(caret)
library(tibble)
library(tidyr)
library(xgboost)
library(doParallel)
library(spatstat)  # weights
dir_code <- getwd()
root <- dirname(dir_code)
dir_dat <- paste0(root, "/digijord_data/")
# Test 1 - 8: Cubist
# Test 9: xgboost
testn <- 9
mycrs <- "EPSG:25832"
dir_results <- dir_dat %>%
paste0(., "/results_test_", testn, "/") %T>%
dir.create()
dir_obs_proc <- dir_dat %>%
paste0(., "/observations/processed/")
dsc <- dir_obs_proc %>%
paste0(., "dsc.csv") %>%
read.table(
header = TRUE,
sep = ";",
) %>%
vect(
geom = c("UTMX", "UTMY"),
crs = mycrs,
keepgeom = TRUE
)
SEGES <- dir_obs_proc %>%
paste0(., "SEGES.csv") %>%
read.table(
header = TRUE,
sep = ";",
) %>%
vect(
geom = c("UTMX", "UTMY"),
crs = mycrs,
keepgeom = TRUE
)
SINKS <- dir_obs_proc %>%
paste0(., "SINKS.csv") %>%
read.table(
header = TRUE,
sep = ";",
) %>%
vect(
geom = c("UTMX", "UTMY"),
crs = mycrs,
keepgeom = TRUE
)
dir_folds <- dir_dat %>%
paste0(., "/folds/")
dsc_folds <- dir_folds %>%
paste0(., "dsc_folds.csv") %>%
read.table(
header = TRUE,
sep = ";",
)
SEGES_folds <- dir_folds %>%
paste0(., "SEGES_folds.csv") %>%
read.table(
header = TRUE,
sep = ";",
)
SINKS_folds <- dir_folds %>%
paste0(., "SINKS_folds.csv") %>%
read.table(
header = TRUE,
sep = ";",
)
dir_cov <- dir_dat %>% paste0(., "/covariates")
cov_cats <- dir_code %>%
paste0(., "/cov_categories_20230323.csv") %>%
read.table(
sep = ";",
header = TRUE
)
cov_files <- dir_cov %>% list.files()
cov_names <- cov_files %>% tools::file_path_sans_ext()
cov_names %>%
write.table(
paste0("cov_names_", Sys.Date(), ".csv")
)
cov_names[!cov_names %in% cov_cats$name]
cov <- paste0(dir_cov, "/", cov_files) %>%
rast()
names(cov) <- cov_names
dir_extr <- dir_dat %>%
paste0(., "/extracts/")
usebuffer <- FALSE
if (usebuffer) {
dsc_extr <- dir_extr %>%
paste0(., "/buffer_dsc_extr.csv") %>%
read.table(
header = TRUE,
sep = ";",
)
SEGES_extr <- dir_extr %>%
paste0(., "/buffer_SEGES_extr.csv") %>%
read.table(
header = TRUE,
sep = ";",
)
} else {
dsc_extr <- dir_extr %>%
paste0(., "/dsc_extr.csv") %>%
read.table(
header = TRUE,
sep = ";",
)
SEGES_extr <- dir_extr %>%
paste0(., "/SEGES_extr.csv") %>%
read.table(
header = TRUE,
sep = ";",
)
}
SINKS_extr <- dir_extr %>%
paste0(., "/SINKS_extr.csv") %>%
read.table(
header = TRUE,
sep = ";",
)
obs <- list(dsc, SEGES, SINKS) %>%
vect() %>%
values() %>%
mutate(
logSOC = log(SOC),
logCaCO3 = log(CaCO3),
year = date %>%
as.character() %>%
substr(start = 1, stop = 4) %>%
as.numeric()
)
fractions <- c("clay", "silt", "fine_sand", "coarse_sand", "logSOC", "logCaCO3")
fraction_names <- c(
"Clay", "Silt", "Fine sand", "Coarse sand", "SOC", "CaCO3"
)
bounds_lower <- c(0, 0, 0, 0, NA, NA)
bounds_upper <- c(100, 100, 100, 100, log(100), log(100))
folds <- bind_rows(
dsc_folds,
SEGES_folds,
SINKS_folds
)
names(folds) <- "fold"
extr <- bind_rows(
dsc_extr,
SEGES_extr,
SINKS_extr
)
obs <- cbind(obs, extr, folds)
obs_top <- obs %>%
filter(
upper == 0,
is.finite(fold)
)
obs_top_v <- obs_top %>% vect(geom = c("UTMX", "UTMY"))
library(viridisLite)
tiff(
paste0(dir_results, "/obs_map_test", testn, ".tiff"),
width = 15,
height = 10,
units = "cm",
res = 300
)
plot(obs_top_v, "clay", breaks = 5, breakby = "cases", col = cividis(5))
dev.off()
plot(obs_top_v, "clay", breaks = 5, breakby = "cases", col = cividis(5))
cov_selected <- cov_cats %>%
filter(anbm_use == 1) %>%
select(name) %>%
unlist() %>%
unname()
# Weighted RMSE
RMSEw <- function(d, w)
{
sqe <- w*(d[, 1] - d[, 2])^2
msqe <- sum(sqe)/sum(w)
out <- sqrt(msqe)
return(out)
}
# Weighted R^2
R2w <- function(d, w)
{
require(boot)
out <- boot::corr(d[, 1:2], w)^2
return(out)
}
# Weighted summary function
WeightedSummary <- function (
data,
lev = NULL,
model = NULL,
...
) {
out <- numeric()
# Weighted RMSE
RMSEw <- function(d, w) {
sqe <- w*(d[, 1] - d[, 2])^2
msqe <- sum(sqe)/sum(w)
out <- sqrt(msqe)
return(out)
}
out[1] <- RMSEw(data[, 1:2], data$weights)
# Weighted R^2
require(boot)
out[2] <- boot::corr(
data[, 1:2],
data$weights
)^2
names(out) <- c('RMSEw', 'R2w')
return(out)
}
# Small random sample for testing
# Remember to include full dataset in the final model
n <- 1000
# use_all_points <- TRUE
use_all_points <- FALSE
l <- getModelInfo("cubist")
cubist_weighted <- l$cubist
cubist_weighted$label <- "cubist_weighted"
cubist_weighted$fit <- function(x, y, wts, param, lev, last, classProbs, ...) {
if(!is.null(wts)) {
out <- Cubist::cubist(x,
y,
committees = param$committees,
weights = wts,
...)
} else {
out <- Cubist::cubist(x, y, committees =  param$committees,  ...)
}
if(last) out$tuneValue$neighbors <- param$neighbors
out
}
cubist_weighted$predict <- function(modelFit, newdata, submodels = NULL) {
out <- predict(modelFit,
as.data.frame(newdata),
neighbors = modelFit$tuneValue$neighbors)
if(!is.null(submodels)) {
tmp <- vector(mode = "list", length = nrow(submodels) + 1)
tmp[[1]] <- out
for(j in seq(along = submodels$neighbors))
tmp[[j+1]] <- predict(modelFit,
as.data.frame(newdata),
neighbors = submodels$neighbors[j])
out <- tmp
}
out
}
cubist_weighted$tags <- c(l$cubist$tags, "Accepts Case Weights")
?trainControl
?train
