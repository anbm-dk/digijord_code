"subdir_tiles",
"frac",
"cov_selected",
"predict_passna",
"dir_dat",
"n_digits",
"breaks_j",
"breaks_j_chr",
"dir_mineral_raw_j"
)
)
parSapplyLB(
cl,
1:length(subdir_tiles),
function(x) {
tmpfolder <- paste0(dir_dat, "/Temp/")
terraOptions(memfrac = 0.02, tempdir = tmpfolder)
cov_x_files <- subdir_tiles[x] %>%
list.files(full.names = TRUE)
cov_x_names <- cov_x_files %>%
basename() %>%
file_path_sans_ext()
cov_x <- cov_x_files %>% rast()
names(cov_x) <- cov_x_names
cov_x2 <- subset(cov_x, cov_selected)
tilename_x <- basename(subdir_tiles[x])
outname_x <- dir_mineral_raw_j[x] %>%
paste0(
., "/frc", i, "_", frac, "_",
breaks_j_chr[1], "_", breaks_j_chr[2], "_cm_",
tilename_x, ".tif"
)
predict(
cov_x2,
model_i,
fun = predict_passna,
na.rm = FALSE,
const = data.frame(
SOM_removed = 1,
# year = 2010,
upper = breaks_j[1],
lower = breaks_j[2]
),
n_const = 3,
n_digits = 1,
filename = outname_x,
overwrite = TRUE
)
return(NULL)
}
)
stopCluster(cl)
foreach::registerDoSEQ()
rm(cl)
}
# Standardize to a sum of 100
dir_pred_tiles_100 <- dir_pred_tiles %>%
paste0(
., "/tex_100_",
breaks_j_chr[1], "_", breaks_j_chr[2], "_cm/"
) %T>%
dir.create(showWarnings = FALSE, recursive = TRUE)
dir_pred_tiles_frac <- dir_pred_tiles %>%
paste0(
., "/", fraction_names_underscore[1:4], "_",
breaks_j_chr[1], "_", breaks_j_chr[2], "_cm/"
) %T>%
lapply(function(x) dir.create(x, showWarnings = FALSE, recursive = TRUE))
showConnections()
cl <- makeCluster(numCores)
clusterEvalQ(
cl,
{
library(terra)
library(magrittr)
library(dplyr)
library(tools)
}
)
clusterExport(
cl,
c(
"subdir_tiles",
"dir_dat",
"n_digits",
"dir_pred_tiles_frac",
"dir_pred_tiles_100",
"fraction_names_underscore",
"breaks_j_chr",
"dir_mineral_raw_j"
)
)
parSapplyLB(
cl,
1:length(subdir_tiles),
function(x) {
tmpfolder <- paste0(dir_dat, "/Temp/")
terraOptions(memfrac = 0.02, tempdir = tmpfolder)
tilename_x <- basename(subdir_tiles[x])
rs_pred_tile_x <- dir_mineral_raw_j[x] %>%
list.files(full.names = TRUE) %>%
rast()
outname_x <- dir_pred_tiles_100 %>%
paste0(
., "/tex100_", tilename_x,
breaks_j_chr[1], "_", breaks_j_chr[2], "_cm.tif"
)
layernames <- paste0(
fraction_names_underscore[1:4], "_",
breaks_j_chr[1], "_", breaks_j_chr[2], "_cm"
)
app(
rs_pred_tile_x,
function(r) {
out <- r * 100 / sum(r)
out %<>% round(digits = 1)
names(out) <- layernames
return(out)
},
overwrite = TRUE,
filename = outname_x
)
tex100_x <- outname_x %>% rast()
outnames_fractions_x <- dir_pred_tiles_frac %>%
paste0(
., "/", fraction_names_underscore[1:4], "_",
breaks_j_chr[1], "_", breaks_j_chr[2], "_cm_",
tilename_x, ".tif"
)
for (i in 1:4) {
writeRaster(
tex100_x[[i]],
filename = outnames_fractions_x[i],
overwrite = TRUE
)
}
return(NULL)
}
)
stopCluster(cl)
foreach::registerDoSEQ()
rm(cl)
for (i in 1:4) {
frac <- fraction_names_underscore[i]
outtiles_frac <- dir_pred_tiles_frac[i] %>%
list.files(full.names = TRUE) %>%
sprc()
merge(
outtiles_frac,
filename = paste0(
dir_pred_all, frac, "_",
breaks_j_chr[1], "_", breaks_j_chr[2], "_cm.tif"),
overwrite = TRUE,
gdal = "TILED=YES",
names = paste0(
frac, "_", breaks_j_chr[1], "_", breaks_j_chr[2], "_cm")
)
}
}
# Calculate JB
source("f_classify_soil_JB.R")
for (j in 1:(length(breaks) - 1)) {
breaks_j_chr <- breaks_chr[j:(j + 1)]
dir_pred_tiles_JB <- dir_pred_tiles %>%
paste0(., "/JB_", breaks_j_chr[1], "_", breaks_j_chr[2], "_cm/") %T>%
dir.create(showWarnings = FALSE, recursive = TRUE)
showConnections()
cl <- makeCluster(numCores)
clusterEvalQ(
cl,
{
library(terra)
library(magrittr)
library(dplyr)
library(tools)
}
)
clusterExport(
cl,
c(
"breaks_j_chr",
"subdir_tiles",
"dir_dat",
"dir_pred_tiles",
"dir_pred_tiles_100",
"fraction_names_underscore",
"dir_pred_tiles_JB",
"classify_soil_JB"
)
)
parSapplyLB(
cl,
1:length(subdir_tiles),
function(x) {
tmpfolder <- paste0(dir_dat, "/Temp/")
terraOptions(memfrac = 0.02, tempdir = tmpfolder)
tilename_x <- basename(subdir_tiles[x])
rs_100 <- dir_pred_tiles_100 %>%
paste0(
., "/tex100_", tilename_x,
breaks_j_chr[1], "_", breaks_j_chr[2], "_cm.tif"
) %>%
rast()
tile_soc <- dir_pred_tiles %>%
paste0(
., "/", fraction_names_underscore[5], "_",
breaks_j_chr[1], "_", breaks_j_chr[2], "_cm/"
) %>%
list.files(full.names = TRUE) %>%
.[x] %>%
rast()
tile_CaCO3 <- dir_pred_tiles %>%
paste0(
., "/", fraction_names_underscore[6], "_",
breaks_j_chr[1], "_", breaks_j_chr[2], "_cm/"
) %>%
list.files(full.names = TRUE) %>%
.[x] %>%
rast()
rs_s2 <- c(subset(rs_100, 1:3), tile_soc, tile_CaCO3)
names(rs_s2) <- c("clay", "silt", "sand_f", "SOM", "CaCO3")
outname_x <- dir_pred_tiles_JB %>%
paste0(
., "/JB_",
breaks_j_chr[1], "_", breaks_j_chr[2], "_cm_",
tilename_x, ".tif"
)
lapp(
rs_s2,
classify_soil_JB,
SOM_factor = 1 / 0.568,
filename = outname_x,
overwrite = TRUE,
wopt = list(
datatype = "INT1U",
NAflag = 13
)
)
return(NULL)
}
)
stopCluster(cl)
foreach::registerDoSEQ()
rm(cl)
outtiles_JB <- dir_pred_tiles_JB %>%
list.files(full.names = TRUE) %>%
sprc()
merge(
outtiles_JB,
filename = paste0(
dir_pred_all, "/JB_",
breaks_j_chr[1], "_", breaks_j_chr[2], "_cm.tif"
),
overwrite = TRUE,
gdal = "TILED=YES",
datatype = "INT1U",
NAflag = 13,
names = paste0(
"JB_",
breaks_j_chr[1], "_", breaks_j_chr[2], "_cm"
)
)
}
subdir_tiles
stopCluster(cl)
foreach::registerDoSEQ()
rm(cl)
source("f_classify_soil_JB.R")
for (j in 1:(length(breaks) - 1)) {
breaks_j_chr <- breaks_chr[j:(j + 1)]
dir_pred_tiles_100 <- dir_pred_tiles %>%
paste0(
., "/tex_100_",
breaks_j_chr[1], "_", breaks_j_chr[2], "_cm/"
)
dir_pred_tiles_JB <- dir_pred_tiles %>%
paste0(., "/JB_", breaks_j_chr[1], "_", breaks_j_chr[2], "_cm/") %T>%
dir.create(showWarnings = FALSE, recursive = TRUE)
showConnections()
cl <- makeCluster(numCores)
clusterEvalQ(
cl,
{
library(terra)
library(magrittr)
library(dplyr)
library(tools)
}
)
clusterExport(
cl,
c(
"breaks_j_chr",
"subdir_tiles",
"dir_dat",
"dir_pred_tiles",
"dir_pred_tiles_100",
"fraction_names_underscore",
"dir_pred_tiles_JB",
"classify_soil_JB"
)
)
parSapplyLB(
cl,
1:length(subdir_tiles),
function(x) {
tmpfolder <- paste0(dir_dat, "/Temp/")
terraOptions(memfrac = 0.02, tempdir = tmpfolder)
tilename_x <- basename(subdir_tiles[x])
rs_100 <- dir_pred_tiles_100 %>%
paste0(
., "/tex100_", tilename_x,
breaks_j_chr[1], "_", breaks_j_chr[2], "_cm.tif"
) %>%
rast()
tile_soc <- dir_pred_tiles %>%
paste0(
., "/", fraction_names_underscore[5], "_",
breaks_j_chr[1], "_", breaks_j_chr[2], "_cm/"
) %>%
list.files(full.names = TRUE) %>%
.[x] %>%
rast()
tile_CaCO3 <- dir_pred_tiles %>%
paste0(
., "/", fraction_names_underscore[6], "_",
breaks_j_chr[1], "_", breaks_j_chr[2], "_cm/"
) %>%
list.files(full.names = TRUE) %>%
.[x] %>%
rast()
rs_s2 <- c(subset(rs_100, 1:3), tile_soc, tile_CaCO3)
names(rs_s2) <- c("clay", "silt", "sand_f", "SOM", "CaCO3")
outname_x <- dir_pred_tiles_JB %>%
paste0(
., "/JB_",
breaks_j_chr[1], "_", breaks_j_chr[2], "_cm_",
tilename_x, ".tif"
)
lapp(
rs_s2,
classify_soil_JB,
SOM_factor = 1 / 0.568,
filename = outname_x,
overwrite = TRUE,
wopt = list(
datatype = "INT1U",
NAflag = 13
)
)
return(NULL)
}
)
stopCluster(cl)
foreach::registerDoSEQ()
rm(cl)
outtiles_JB <- dir_pred_tiles_JB %>%
list.files(full.names = TRUE) %>%
sprc()
merge(
outtiles_JB,
filename = paste0(
dir_pred_all, "/JB_",
breaks_j_chr[1], "_", breaks_j_chr[2], "_cm.tif"
),
overwrite = TRUE,
gdal = "TILED=YES",
datatype = "INT1U",
NAflag = 13,
names = paste0(
"JB_",
breaks_j_chr[1], "_", breaks_j_chr[2], "_cm"
)
)
}
library(terra)
library(magrittr)
dir_code <- getwd()
root <- dirname(dir_code)
dir_dat <- paste0(root, "/digijord_data/")
mycrs <- "EPSG:25832"
# 1 Load observations
dir_obs_proc <- dir_dat %>%
paste0(., "/observations/processed/")
dsc <- dir_obs_proc %>%
paste0(., "dsc.csv") %>%
read.table(
header = TRUE,
sep = ";",
) %>%
vect(
geom = c("UTMX", "UTMY"),
crs = mycrs,
keepgeom = TRUE
)
SEGES <- dir_obs_proc %>%
paste0(., "SEGES.csv") %>%
read.table(
header = TRUE,
sep = ";",
) %>%
vect(
geom = c("UTMX", "UTMY"),
crs = mycrs,
keepgeom = TRUE
)
SINKS <- dir_obs_proc %>%
paste0(., "SINKS.csv") %>%
read.table(
header = TRUE,
sep = ";",
) %>%
vect(
geom = c("UTMX", "UTMY"),
crs = mycrs,
keepgeom = TRUE
)
profiles_shp <- dir_dat %>%
paste0(
.,
"/observations/profiles/Profiles_coordinates_new/Profiles_coordinates_new.shp"
) %>%
vect()
forest_samples <- dir_obs_proc %>%
paste0(., "forest_samples.csv") %>%
read.table(
header = TRUE,
sep = ";",
) %>%
vect(
geom = c("UTMX", "UTMY"),
crs = mycrs,
keepgeom = TRUE
)
# 2 Load and aggregate DEM
cov_dir <- dir_dat %>% paste0(., "/covariates/")
DEM_10m <- cov_dir %>%
paste0(., "/dhm2015_terraen_10m.tif") %>%
rast()
fun_agg <- function(x) {
out <- sum(!is.na(x)) == 0
return(out)
}
dir_folds <- dir_dat %>%
paste0(., "/folds/") %T>%
dir.create()
# file_dem_mask_100m <- paste0(dir_folds, "/dem_mask_100m.tif")
#
# terra::aggregate(
#   DEM_10m,
#   10,
#   fun = fun_agg,
#   cores = 19,
#   filename = file_dem_mask_100m
# )
#
# dem_mask_100m <- rast(file_dem_mask_100m)
#
# dem_mask_100m2 <- ifel(dem_mask_100m == 1, NA, 1)
file_dem_mask_100m_2 <- paste0(dir_folds, "/dem_mask_100m_2.tif")
# writeRaster(
#   dem_mask_100m2,
#   filename = file_dem_mask_100m_2,
#   overwrite = TRUE,
#   datatype = "INT1U"
#   )
dem_mask_100m2 <- rast(file_dem_mask_100m_2)
plot(dem_mask_100m2)
?app
?writeRaster
fun1 <- function(x, n_layers = 1) {
# if (is.matrix(x) & ncol(x) > 1) {
#   x <- x[, 1]
# }
out <- matrix(numeric(), nrow = length(x), ncol = n_layers)
sumNA <- sum(is.na(x))
out[!is.na(x), ] <- 0 + rpois(n_layers*(length(x) - sumNA), 1)
# out <- x * 0 + rpois(n_layers, 1)
# out <- as.matrix(out, nrow = length(x))
return(out)
}
nlyr_out <- 100
set.seed(8863)
r_poisson <- app(
dem_mask_100m2,
fun = function(i, ff, outlayers) ff(i, n_layers = outlayers),
cores = 19,
ff = fun1,
outlayers = nlyr_out,
filename  = paste0(dir_folds, "/poisson_100m.tif"),
overwrite = TRUE,
wopt = list(
atatype = "INT1U"
)
)
set.seed(8863)
r_poisson <- app(
dem_mask_100m2,
fun = function(i, ff, outlayers) ff(i, n_layers = outlayers),
cores = 19,
ff = fun1,
outlayers = nlyr_out,
filename  = paste0(dir_folds, "/poisson_100m.tif"),
overwrite = TRUE,
wopt = list(
datatype = "INT1U"
)
)
poisson_r <- paste0(dir_folds, "/poisson_100m.tif") %>% rast()
possion_r
poisson_r
plot(poisson_r[[1]])
