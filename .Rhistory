sigma = sig,
at = 'points',
leaveoneout = FALSE
)
attributes(dens_out) <- NULL
return(dens_out)
}
# Tuning grid
tgrid <- expand.grid(
nrounds = 100,
eta = seq(0.1, 1, 0.1),
max_depth = 6,
min_child_weight = 1,
gamma = 0,
colsample_bytree = 0.5,
subsample = 0.3
)
max_depth_test <- seq(1, 20, 3)
min_child_weight_test <- c(1, 2, 4, 8, 16, 32)
gamma_test <- seq(0, 0.5, 0.1)
objectives <- c(rep("reg:squarederror", 4), rep("reg:tweedie", 2))
trees_per_round <- 10
install.packages("styler")
library(styler)
getwd()
wd <- getwd()
style_dir(wd)
library(terra)
?as.data.frame
?sample
?spatSample
one <- matrix(runif(10), ncol = 2)
vect(one)
one <- vect(one)
is(one, "SpatVector")
length(one)
?geom
x1 <- rbind(c(-175,-20), c(-140,55), c(10, 0), c(-140,-60))
x2 <- rbind(c(-125,0), c(0,60), c(40,5), c(15,-45))
x3 <- rbind(c(-10,0), c(140,60), c(160,0), c(140,-55))
x4 <- rbind(c(80,0), c(105,13), c(120,2), c(105,-13))
z <- rbind(cbind(object=1, part=1, x1), cbind(object=2, part=1, x2),
cbind(object=3, part=1, x3), cbind(object=3, part=2, x4))
colnames(z)[3:4] <- c('x', 'y')
z <- cbind(z, hole=0)
z[(z[, "object"]==3 & z[,"part"]==2), "hole"] <- 1
p <- vect(z, "polygons")
crds(p)
f <- system.file("ex/lux.shp", package="terra")
v <- vect(f)
g <- crds(v)
head(g)
z
p
str(p)
geomtype(p)
?geomtype
geomtype(one)
?`as.data.frame,SpatVector-method`
p
v
as.data.frame(v)
values(one) <- 1
as.data.frame(one)
as.data.frame(one, geom = "XY")
values(one)
require(magrittr)
require(future.apply)
require(fields)
require(ClusterR)
?KMeans_rcpp
?rdist
?init
?subset
?calc
?app
?cppfunction
library(parallel)
?parApply
?writeRaster
?do.call
?`zonal,SpatRaster,SpatRaster-method`
?clusterExport
?showConnections
?stopCluster
?as.points
as.data.frame(one)
as.data.frame(one, xy = true)
as.data.frame(one, xy = TRUE)
rast(matrix(1, ncol = 5, nrow = 5))
as.data.frame(rast(matrix(1, ncol = 5, nrow = 5)))
as.data.frame(rast(matrix(1, ncol = 5, nrow = 5)), xy = TRUE)
as.points(rast(matrix(1, ncol = 5, nrow = 5)))
?as.data.frame
?as.data.frame
?duplicated
?values
?drop_na
?complete.cases
library(tools)
?file_ext
?write.table
?do.call
+vect
?vect
?coordinates
library(terra)
library(tidyverse)
library(ClusterR) # Required in function, not to be confused with the clusterR function from raster
library(Rcpp) # Required in function
library(future.apply) # Required in function
library(magrittr) # Required in function
library(fields) # Required in function
library(snow) # Required in function
library(tools) # Required in function
library(parallel)
source("sample_kmeans_terra.R")
library(obliquer)
myvars <- Vindum_covariates
myvars <- unwrap(Vindum_covariates)
rm(list = ls())
dir_code <- getwd()
root <- dirname(dir_code)
dir_dat <- paste0(dir_code, "/digijord_data/")
mycrs <- "EPSG:25832"
source("sample_kmeans_terra.R")
paste0(root, "/sampletest/") %>% dir.create()
library(obliquer)
myvars <- unwrap(Vindum_covariates)
crs(myvars) <- mycrs
set.seed(1)
letstry <- sample_kmeans(
input = myvars,
use_xy = TRUE,
# clusters = 2,
scale = TRUE
)
source("sample_kmeans_terra.R")
letstry <- sample_kmeans(
input = myvars,
use_xy = TRUE,
# clusters = 2,
scale = TRUE
)
rm(sample_kmeans())
rm(sample_kmeans())
library(terra)
library(tidyverse)
library(ClusterR) # Required in function, not to be confused with the clusterR function from raster
library(Rcpp) # Required in function
library(future.apply) # Required in function
library(magrittr) # Required in function
library(fields) # Required in function
library(tools) # Required in function
library(parallel)
# Empty memory
rm(list = ls())
# Start up
dir_code <- getwd()
root <- dirname(dir_code)
dir_dat <- paste0(dir_code, "/digijord_data/")
mycrs <- "EPSG:25832"
try(rm(sample_kmeans))
source("sample_kmeans_terra.R")
library(obliquer)
myvars <- unwrap(Vindum_covariates)
crs(myvars) <- mycrs
try(rm(sample_kmeans))
source("sample_kmeans_terra.R")
library(obliquer)
myvars <- unwrap(Vindum_covariates)
crs(myvars) <- mycrs
set.seed(1)
letstry <- sample_kmeans(
input = myvars,
use_xy = TRUE,
clusters = 2,
scale = TRUE
)
library(terra)
library(tidyverse)
library(ClusterR) # Required in function, not to be confused with the clusterR function from raster
library(Rcpp) # Required in function
library(future.apply) # Required in function
library(magrittr) # Required in function
library(fields) # Required in function
library(tools) # Required in function
library(parallel)
# Empty memory
rm(list = ls())
# Start up
dir_code <- getwd()
root <- dirname(dir_code)
dir_dat <- paste0(dir_code, "/digijord_data/")
mycrs <- "EPSG:25832"
try(rm(sample_kmeans))
source("sample_kmeans_terra.R")
library(obliquer)
myvars <- unwrap(Vindum_covariates)
crs(myvars) <- mycrs
set.seed(1)
letstry <- sample_kmeans(
input = myvars,
use_xy = TRUE,
clusters = 2,
scale = TRUE
)
library(terra)
library(tidyverse)
library(ClusterR) # Required in function, not to be confused with the clusterR function from raster
library(Rcpp) # Required in function
library(future.apply) # Required in function
library(magrittr) # Required in function
library(fields) # Required in function
library(tools) # Required in function
library(parallel)
# Empty memory
rm(list = ls())
# Start up
dir_code <- getwd()
root <- dirname(dir_code)
dir_dat <- paste0(dir_code, "/digijord_data/")
mycrs <- "EPSG:25832"
try(rm(sample_kmeans))
source("sample_kmeans_terra.R")
library(obliquer)
myvars <- unwrap(Vindum_covariates)
crs(myvars) <- mycrs
set.seed(1)
letstry <- sample_kmeans(
input = myvars,
use_xy = TRUE,
clusters = 2,
scale = TRUE
)
letstry
cl_colors <- expand.grid(
r = seq(0, 1, 0.05),
g = seq(0, 1, 0.05),
b = seq(0, 1, 0.05)
) %>%
KMeans_rcpp(clusters = n_clusters) %>%
.$centroids %>%
rgb()
n_clusters <- 2
cl_colors <- expand.grid(
r = seq(0, 1, 0.05),
g = seq(0, 1, 0.05),
b = seq(0, 1, 0.05)
) %>%
KMeans_rcpp(clusters = n_clusters) %>%
.$centroids %>%
rgb()
plot(letstry$clusters, col = cl_colors)
points(letstry$points)
plot(letstry$distances, col = cividis(100))
points(letstry$points)
plot(dem, col = cividis(100))
points(letstry$points)
plot(letstry$distances, col = cividis(100))
points(letstry$points)
n_clusters <- 10
set.seed(1)
letstry <- sample_kmeans(
input = myvars,
use_xy = TRUE,
clusters = n_clusters,
scale = TRUE
)
cl_colors <- expand.grid(
r = seq(0, 1, 0.05),
g = seq(0, 1, 0.05),
b = seq(0, 1, 0.05)
) %>%
KMeans_rcpp(clusters = n_clusters) %>%
.$centroids %>%
rgb()
plot(letstry$clusters, col = cl_colors)
points(letstry$points)
plot(letstry$clusters, col = cl_colors)
points(letstry$points)
plot(letstry$distances, col = cividis(100))
points(letstry$points)
letstry <- sample_kmeans(
input = myvars,
use_xy = FALSE,
clusters = n_clusters,
scale = TRUE
)
cl_colors <- expand.grid(
r = seq(0, 1, 0.05),
g = seq(0, 1, 0.05),
b = seq(0, 1, 0.05)
) %>%
KMeans_rcpp(clusters = n_clusters) %>%
.$centroids %>%
rgb()
plot(letstry$clusters, col = cl_colors)
points(letstry$points)
plot(letstry$distances, col = cividis(100))
points(letstry$points)
letstry
set.seed(1)
letstry2 <- sample_kmeans(
input = myvars,
use_xy = TRUE,
pca = TRUE,
n_pcs = 5,
clusters = 100,
scale = TRUE,
filename_cl = paste0(dir_dat, "vindum_clusters.tif"),
args_cl = list(
overwrite = TRUE,
datatype = "INT2U"
),
filename_d = paste0(dir_dat, "vindum_distances.tif"),
args_d = list(overwrite = TRUE),
filename_pts = paste0(dir_dat, "vindum_points.shp"),
args_pts = list(overwrite = TRUE),
cores = 2,
verbose = TRUE,
sp_pts = FALSE
)
myvars
paste0(dir_dat, "vindum_distances.tif")
warnings()
runif(30) %>% matrix(ncol = 2) %>% vect()
runif(30) %>% matrix(ncol = 2) %>% vect() %>% ncol()
runif(30) %>% matrix(ncol = 3) %>% vect() %>% ncol()
v <- runif(30) %>% matrix(ncol = 2) %>% vect()
v$val <- 1
ncol(v)
library(terra)
library(tidyverse)
library(ClusterR) # Required in function, not to be confused with the clusterR function from raster
library(Rcpp) # Required in function
library(future.apply) # Required in function
library(magrittr) # Required in function
library(fields) # Required in function
library(tools) # Required in function
library(parallel)
# Empty memory
rm(list = ls())
# Start up
dir_code <- getwd()
root <- dirname(dir_code)
dir_dat <- paste0(dir_code, "/digijord_data/")
mycrs <- "EPSG:25832"
try(rm(sample_kmeans))
source("sample_kmeans_terra.R")
library(obliquer)
myvars <- unwrap(Vindum_covariates)
crs(myvars) <- mycrs
# Try it out for Vindum
set.seed(1)
letstry2 <- sample_kmeans(
input = myvars,
use_xy = TRUE,
pca = TRUE,
n_pcs = 5,
clusters = 10,
scale = TRUE,
filename_cl = paste0(dir_dat, "vindum_clusters.tif"),
args_cl = list(
overwrite = TRUE,
datatype = "INT2U"
),
filename_d = paste0(dir_dat, "vindum_distances.tif"),
args_d = list(overwrite = TRUE),
filename_pts = paste0(dir_dat, "vindum_points.shp"),
args_pts = list(overwrite = TRUE),
# cores = 2,
verbose = TRUE,
sp_pts = FALSE
)
library(terra)
library(tidyverse)
library(ClusterR) # Required in function, not to be confused with the clusterR function from raster
library(Rcpp) # Required in function
library(future.apply) # Required in function
library(magrittr) # Required in function
library(fields) # Required in function
library(tools) # Required in function
library(parallel)
# Empty memory
rm(list = ls())
# Start up
dir_code <- getwd()
root <- dirname(dir_code)
dir_dat <- paste0(dir_code, "/digijord_data/")
mycrs <- "EPSG:25832"
try(rm(sample_kmeans))
source("sample_kmeans_terra.R")
library(obliquer)
myvars <- unwrap(Vindum_covariates)
crs(myvars) <- mycrs
# Try it out for Vindum
set.seed(1)
letstry2 <- sample_kmeans(
input = myvars,
use_xy = TRUE,
pca = TRUE,
n_pcs = 5,
clusters = 10,
scale = TRUE,
filename_cl = paste0(dir_dat, "vindum_clusters.tif"),
args_cl = list(
overwrite = TRUE,
datatype = "INT2U"
),
filename_d = paste0(dir_dat, "vindum_distances.tif"),
args_d = list(overwrite = TRUE),
filename_pts = paste0(dir_dat, "vindum_points.shp"),
args_pts = list(overwrite = TRUE),
# cores = 2,
verbose = TRUE,
sp_pts = FALSE
)
library(terra)
library(tidyverse)
library(ClusterR) # Required in function, not to be confused with the clusterR function from raster
library(Rcpp) # Required in function
library(future.apply) # Required in function
library(magrittr) # Required in function
library(fields) # Required in function
library(tools) # Required in function
library(parallel)
# Empty memory
rm(list = ls())
# Start up
dir_code <- getwd()
root <- dirname(dir_code)
dir_dat <- paste0(dir_code, "/digijord_data/")
mycrs <- "EPSG:25832"
try(rm(sample_kmeans))
source("sample_kmeans_terra.R")
library(obliquer)
myvars <- unwrap(Vindum_covariates)
crs(myvars) <- mycrs
# Try it out for Vindum
set.seed(1)
letstry2 <- sample_kmeans(
input = myvars,
use_xy = TRUE,
pca = TRUE,
n_pcs = 5,
clusters = 10,
scale = TRUE,
filename_cl = paste0(dir_dat, "vindum_clusters.tif"),
args_cl = list(
overwrite = TRUE,
datatype = "INT2U"
),
filename_d = paste0(dir_dat, "vindum_distances.tif"),
args_d = list(overwrite = TRUE),
filename_pts = paste0(dir_dat, "vindum_points.shp"),
args_pts = list(overwrite = TRUE),
# cores = 2,
verbose = TRUE,
sp_pts = FALSE
)
paste0(dir_dat, "vindum_distances.tif")
library(terra)
library(tidyverse)
library(ClusterR) # Required in function, not to be confused with the clusterR function from raster
library(Rcpp) # Required in function
library(future.apply) # Required in function
library(magrittr) # Required in function
library(fields) # Required in function
library(tools) # Required in function
library(parallel)
# Empty memory
rm(list = ls())
# Start up
dir_code <- getwd()
root <- dirname(dir_code)
dir_dat <- paste0(root, "/digijord_data/")
mycrs <- "EPSG:25832"
try(rm(sample_kmeans))
source("sample_kmeans_terra.R")
library(obliquer)
myvars <- unwrap(Vindum_covariates)
crs(myvars) <- mycrs
# Try it out for Vindum
set.seed(1)
letstry2 <- sample_kmeans(
input = myvars,
use_xy = TRUE,
pca = TRUE,
n_pcs = 5,
clusters = 10,
scale = TRUE,
filename_cl = paste0(dir_dat, "vindum_clusters.tif"),
args_cl = list(
overwrite = TRUE,
datatype = "INT2U"
),
filename_d = paste0(dir_dat, "vindum_distances.tif"),
args_d = list(overwrite = TRUE),
filename_pts = paste0(dir_dat, "vindum_points.shp"),
args_pts = list(overwrite = TRUE),
# cores = 2,
verbose = TRUE,
sp_pts = FALSE
)
letstry2
plot(letstry2$clusters)
points(letstry2$points)
plot(letstry2$distances, col = cividis(100))
points(letstry2$points)
plot(Vindum_covariates$DEM, col = cividis(100))
?names
