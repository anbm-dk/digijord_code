include.lowest = TRUE,
right = FALSE
)
ispeat = observed > log(6)
logSOC_df %<>% mutate(
peat_probability = peat_probability_all,
prob_interval = cut(
peat_probability,
prob_breaks,
include.lowest = TRUE,
right = FALSE
),
ispeat = observed > log(6)
)
logSOC_df
?mean
?weighted.mean
logSOC_df %>%
group_by(depth, indices, prob_interval) %>%
summarise(f_peat = weighted.mean(ispeat, w = w, na.rm = TRUE))
logSOC_df %>%
group_by(depth, indices, prob_interval) %>%
summarise(f_peat = weighted.mean(ispeat, w = w, na.rm = TRUE)*100) %>%
print(100)
logSOC_df %>%
group_by(depth, indices, prob_interval) %>%
summarise(f_peat = weighted.mean(ispeat, w = w, na.rm = TRUE)*100) %>%
print(n = 100)
?arrange
logSOC_df %>%
group_by(depth, indices, prob_interval) %>%
summarise(f_peat = weighted.mean(ispeat, w = w, na.rm = TRUE)*100) %>%
arrange(indices) %>%
print(n = 100)
logSOC_df %>%
group_by(depth, indices, prob_interval) %>%
summarise(
f_peat = weighted.mean(ispeat, w = w, na.rm = TRUE)*100,
n = n()
) %>%
arrange(indices) %>%
print(n = 100)
logSOC_df %>%
group_by(depth, indices, prob_interval) %>%
summarise(
f_peat = weighted.mean(ispeat, w = w, na.rm = TRUE)*100,
n = n()
) %>%
arrange(desc(indices)) %>%
print(n = 100)
logSOC_df %>%
group_by(depth, indices, prob_interval, combination) %>%
summarise(
f_peat = weighted.mean(ispeat, w = w, na.rm = TRUE)*100,
n = n()
) %>%
arrange(desc(combination), desc(indices)) %>%
print(n = 200)
qs100 <- seq(0.005, 0.995, 0.01)
soc_qs100 <- logSOC_df %>%
select(predicted, pse) %>%
apply(., 1, function(x) {
out <- calc_q_log(x)
return(out)
}
)
soc_qs100
head(soc_qs100)
t(soc_qs100)
prob_q_out <- c(0.5, 2.5, 5.0, 16.0, 84.0, 95.0, 97.5, 99.5)/100
prob_q_out8
prob_q_out_chr <- prob_q_out %>%
multiply_by(1000) %>%
formatC(width = 4, flag = "0") %>%
paste0("p", .)
qs100 <- seq(0.005, 0.995, 0.01)
prob_q_out <- qs100
soc_qs100 <- logSOC_df %>%
select(predicted, pse) %>%
apply(., 1, function(x) {
out <- calc_q_log(x)
return(out)
}
) %>%
t()
soc_qs100
prob_q_out_chr <- prob_q_out %>%
multiply_by(1000) %>%
formatC(width = 4, flag = "0") %>%
paste0("p", .)
soc_qs100 <- logSOC_df %>%
select(predicted, pse) %>%
apply(., 1, function(x) {
out <- calc_q_log(x)
return(out)
}
) %>%
t()
soc_qs100
logSOC_df
logSOC_df <- obs_texture %>%
select(c(ID_new, db, ID_old, upper, lower, SOC, imputed, fold)) %>%
mutate(
SOC = case_when(
SOC == 0 ~ 0.01831564,
.default = SOC
),
observed = log(SOC),
predicted = logsoc_mean_prediction,
w = models_weights_soc,
combination = SOC_combination$Band_1,
indices = factor((!fold == 10) + 1, labels = c("CV", "Holdout")),
mean_d = (upper + lower)/2,
depth = cut(mean_d, breaks, include.lowest = TRUE)
) %>%
filter(
is.finite(SOC),
is.finite(predicted),
is.finite(w),
imputed == FALSE,
is.finite(mean_d),
is.finite(depth)
)
library(MetricsWeighted)
logsoc_mse_all <- logSOC_df %>%
group_by(
indices, depth
) %>%
summarise(
# r2w = round(get_R2w(cbind(predicted, observed), w), digits = 3),
# rmsew = round(get_RMSEw(cbind(predicted, observed), w), digits = 3),
msew = MetricsWeighted::mse(observed, predicted, w = w)
)
# indices   depth     msew
# <fct>     <fct>     <dbl>
# 1 CV      [0,30]    0.283
# 2 CV      (30,60]   0.898
# 3 CV      (60,100]  1.57
# 4 CV      (100,200] 2.10
# 5 Holdout [0,30]    0.247
# 6 Holdout (30,60]   0.834
# 7 Holdout (60,100]  1.81
# 8 Holdout (100,200] 1.73
logSOC_df
logSOC_df <- obs_texture %>%
select(c(ID_new, db, ID_old, upper, lower, SOC, imputed, fold)) %>%
mutate(
SOC = case_when(
SOC == 0 ~ 0.01831564,
.default = SOC
),
observed = log(SOC),
predicted = logsoc_mean_prediction,
w = models_weights_soc,
combination = SOC_combination$Band_1,
indices = factor((!fold == 10) + 1, labels = c("Holdout", "CV")),
mean_d = (upper + lower)/2,
depth = cut(mean_d, breaks, include.lowest = TRUE)
) %>%
filter(
is.finite(SOC),
is.finite(predicted),
is.finite(w),
imputed == FALSE,
is.finite(mean_d),
is.finite(depth)
)
logSOC_df
library(MetricsWeighted)
logsoc_mse_all <- logSOC_df %>%
group_by(
indices, depth
) %>%
summarise(
# r2w = round(get_R2w(cbind(predicted, observed), w), digits = 3),
# rmsew = round(get_RMSEw(cbind(predicted, observed), w), digits = 3),
msew = MetricsWeighted::mse(observed, predicted, w = w)
)
logsoc_mse_all
logsoc_mse_all <- logSOC_df %>%
group_by(
indices, depth
) %>%
summarise(
# r2w = round(get_R2w(cbind(predicted, observed), w), digits = 3),
# rmsew = round(get_RMSEw(cbind(predicted, observed), w), digits = 3),
msew = MetricsWeighted::mse(observed, predicted, w = w)
) %>%
arrange(indices)
logsoc_mse_all
logsoc_mse_all <- logSOC_df %>%
group_by(
indices, depth
) %>%
summarise(
# r2w = round(get_R2w(cbind(predicted, observed), w), digits = 3),
# rmsew = round(get_RMSEw(cbind(predicted, observed), w), digits = 3),
msew = MetricsWeighted::mse(observed, predicted, w = w)
) %>%
arrange(desc(indices))
logsoc_mse_all
logsoc_mse_splitpeat2022 <- logSOC_df %>%
group_by(
indices, depth, combination
) %>%
summarise(
# r2w = round(get_R2w(cbind(predicted, observed), w), digits = 3),
# rmsew = round(get_RMSEw(cbind(predicted, observed), w), digits = 3),
msew = MetricsWeighted::mse(observed, predicted, w = w)
) %>%
arrange(combination)
logsoc_mse_splitpeat2022
logsoc_mse_splitpeat2022 <- logSOC_df %>%
group_by(
indices, depth, combination
) %>%
summarise(
# r2w = round(get_R2w(cbind(predicted, observed), w), digits = 3),
# rmsew = round(get_RMSEw(cbind(predicted, observed), w), digits = 3),
msew = MetricsWeighted::mse(observed, predicted, w = w)
) %>%
arrange(combination, desc(indices))
logsoc_mse_splitpeat2022
logsoc_mse_depths <- logsoc_mse_all %>%
ungroup() %>%
filter(indices == "CV") %>%
select(msew) %>%
unlist() %>%
unname()
logsoc_mse_depths
logsoc_pvar <- models_boot_predictions_soc %>%
log() %>%
apply(., 1, var)
logSOC_df %<>% mutate(
mse = logsoc_mse_depths[as.numeric(depth)],
pvar = logsoc_pvar[obs_texture$ID_new %in% logSOC_df$ID_new],
pse = sqrt(mse + pvar)
)
# Peat probability for validation sample
peat_probability_all <- logSOC_df %>%
select(predicted, pse) %>%
apply(., 1, function(x) {
out <- calc_prob_q(x, q = log(6))
return(out)
}
)
prob_breaks <- seq(0, 100, 10)
logSOC_df %<>% mutate(
peat_probability = peat_probability_all,
prob_interval = cut(
peat_probability,
prob_breaks,
include.lowest = TRUE,
right = FALSE
),
ispeat = observed > log(6)
)
logSOC_df %>%
group_by(depth, indices, prob_interval) %>%
summarise(
f_peat = weighted.mean(ispeat, w = w, na.rm = TRUE)*100,
n = n()
) %>%
arrange(desc(indices)) %>%
print(n = 100)
logSOC_df %>%
group_by(depth, indices, prob_interval) %>%
summarise(
f_peat = weighted.mean(ispeat, w = w, na.rm = TRUE)*100,
n = n()
) %>%
arrange(indices) %>%
print(n = 100)
qs100 <- seq(0.005, 0.995, 0.01)
prob_q_out <- qs100
prob_q_out_chr <- prob_q_out %>%
multiply_by(1000) %>%
formatC(width = 4, flag = "0") %>%
paste0("p", .)
soc_qs100 <- logSOC_df %>%
select(predicted, pse) %>%
apply(., 1, function(x) {
out <- calc_q_log(x)
return(out)
}
) %>%
t()
soc_qs100
library(dplyr)
library(tidyr)
?.data
logSOC_df %>%
bind_cols(soc_qs100) %>%
pivot_longer(cols = .data[[prob_q_out_chr]])
logSOC_df %>%
bind_cols(soc_qs100) %>%
pivot_longer(cols = all_of(prob_q_out_chr))
logSOC_df %>%
bind_cols(soc_qs100) %>%
pivot_longer(
cols = all_of(prob_q_out_chr),
names_to = quantile
)
logSOC_df %>%
bind_cols(soc_qs100) %>%
pivot_longer(
cols = all_of(prob_q_out_chr),
names_to = "quantile"
)
logSOC_df %>%
bind_cols(soc_qs100) %>%
pivot_longer(
cols = all_of(prob_q_out_chr),
names_to = "quantile"
) %>%
group_by(indices, depth, quantile) %>%
summarise(p_under = weighted.mean(exp(observed) < quantile), w = w)
?pivot_longer
soc_p_under <- logSOC_df %>%
bind_cols(soc_qs100) %>%
pivot_longer(
cols = all_of(prob_q_out_chr),
names_to = "quantile"
) %>%
group_by(indices, depth, quantile) %>%
summarise(p_under = weighted.mean(exp(observed) < value), w = w) %>%
arrange(quantile)
soc_p_under <- logSOC_df %>%
bind_cols(soc_qs100) %>%
pivot_longer(
cols = all_of(prob_q_out_chr),
names_to = "quantile"
) %>%
group_by(indices, depth, quantile) %>%
summarise(
p_under = weighted.mean(exp(observed) < value, w = w),
n = n()
) %>%
arrange(quantile)
soc_p_under
soc_p_under <- logSOC_df %>%
bind_cols(soc_qs100) %>%
pivot_longer(
cols = all_of(prob_q_out_chr),
names_to = "quantile"
) %>%
group_by(indices, depth, quantile) %>%
summarise(
p_under = weighted.mean(exp(observed) < value, w = w),
n = n()
) %>%
arrange(indices, depth)
soc_p_under
soc_p_under <- logSOC_df %>%
bind_cols(soc_qs100) %>%
pivot_longer(
cols = all_of(prob_q_out_chr),
names_to = "quantile"
) %>%
group_by(indices, depth, quantile) %>%
summarise(
p_under = weighted.mean(exp(observed) < value, w = w)*100,
n = n()
) %>%
arrange(indices, depth)
soc_p_under
soc_p_under <- logSOC_df %>%
bind_cols(soc_qs100) %>%
pivot_longer(
cols = all_of(prob_q_out_chr),
names_to = "quantile"
) %>%
group_by(indices, depth, quantile) %>%
summarise(
p_under = weighted.mean(exp(observed) < value, w = w)*100,
n = n()
) %>%
pivot_wider(names_from = quantile, values_from = value) %>%
arrange(indices, depth)
soc_p_under <- logSOC_df %>%
bind_cols(soc_qs100) %>%
pivot_longer(
cols = all_of(prob_q_out_chr),
names_to = "quantile"
) %>%
group_by(indices, depth, quantile) %>%
summarise(
p_under = weighted.mean(exp(observed) < value, w = w)*100,
n = n()
) %>%
pivot_wider(names_from = quantile, values_from = p_under) %>%
arrange(indices, depth)
soc_p_under
soc_p_under <- logSOC_df %>%
bind_cols(soc_qs100) %>%
pivot_longer(
cols = all_of(prob_q_out_chr),
names_to = "quantile"
) %>%
group_by(indices, depth, quantile) %>%
summarise(
p_under = weighted.mean(exp(observed) < value, w = w)*100,
n = n()
) %>%
arrange(indices, depth)
soc_p_under
soc_p_under100 <- logSOC_df %>%
bind_cols(soc_qs100) %>%
pivot_longer(
cols = all_of(prob_q_out_chr),
names_to = "quantile"
) %>%
group_by(indices, depth, quantile) %>%
summarise(
p_under = weighted.mean(exp(observed) < value, w = w)*100,
n = n()
) %>%
arrange(indices, depth)
soc_p_under100
ggplot(
soc_p_under100,
aes(x = .data[[qs100]]*100, y = p_under, col = indices)
) +
geom_line() +
facet_wrap(~depth)
ggplot(
soc_p_under100,
aes(x = qs100*100, y = p_under, col = indices)
) +
geom_line() +
facet_wrap(~depth)
soc_p_under100
ggplot(
soc_p_under100,
aes(x = rep(qs100*100, times = 8), y = p_under, col = indices)
) +
geom_line() +
facet_wrap(~depth)
ggplot(
soc_p_under100,
aes(x = rep(qs100*100, times = 8), y = p_under, col = indices)
) +
geom_line() +
facet_wrap(~depth) +
coord_equal()
ggplot(
soc_p_under100,
aes(x = rep(qs100*100, times = 8), y = p_under, col = indices)
) +
geom_line() +
facet_wrap(~depth) +
coord_equal() +
geom_abline(slope = 1, intercept = 1)
ggplot(
soc_p_under100,
aes(x = rep(qs100*100, times = 8), y = p_under, col = indices)
) +
geom_line() +
facet_wrap(~depth) +
coord_equal() +
geom_abline(slope = 1, intercept = 1) +
ylab("Percent of data") +
xlab("Prediction quantile (%)")
tiff(
paste0(dir_results, "/SOC_quantiles_test", testn, ".tiff"),
width = 10,
height = 10,
units = "cm",
res = 300
)
ggplot(
soc_p_under100,
aes(x = rep(qs100*100, times = 8), y = p_under, col = indices)
) +
geom_line() +
facet_wrap(~depth) +
coord_equal() +
geom_abline(slope = 1, intercept = 1) +
ylab("Percent of data") +
xlab("Prediction quantile (%)")
try(dev.off())
try(dev.off())
prob_q_out <- c(0.5, 2.5, 5.0, 16.0, 84.0, 95.0, 97.5, 99.5)/100
prob_q_out8 <- prob_q_out
prob_q_out <- prob_q_out8
prob_q_out_chr <- prob_q_out %>%
multiply_by(1000) %>%
formatC(width = 4, flag = "0") %>%
paste0("p", .)
soc_qs8 <- logSOC_df %>%
select(predicted, pse) %>%
apply(., 1, function(x) {
out <- calc_q_log(x)
return(out)
}
) %>%
t()
soc_qs8
soc_p_under8 <- logSOC_df %>%
bind_cols(soc_qs8) %>%
pivot_longer(
cols = all_of(prob_q_out_chr),
names_to = "quantile"
) %>%
group_by(indices, depth, quantile) %>%
summarise(
p_under = weighted.mean(exp(observed) < value, w = w)*100,
n = n()
) %>%
pivot_wider(names_from = quantile, values_from = p_under) %>%
arrange(indices, depth)
soc_p_under8
