parSapplyLB(
cl,
1:length(tile_shapes),
function(j) {
tmpfolder <- paste0(dir_dat, "/Temp/")
terraOptions(memfrac = 0.02, tempdir = tmpfolder)
dir_tile_j <- dir_tiles %>%
paste0(., "/tile_", tile_numbers[j], "/") %T>%
dir.create()
my_ext <- paste0(
dir_mask_tiles, "/Mask_LU_tile_", tile_numbers[j], ".tif"
) %>%
rast()
source(paste0(dir_code, "/f_cropstack.R"))
cropstack(
x = cov_files_selected,
y = my_ext,
folder = dir_tile_j,
mask = TRUE
)
}
)
stopCluster(cl)
foreach::registerDoSEQ()
rm(cl)
library(terra)
library(caret)
library(magrittr)
library(dplyr)
library(tibble)
dir_code <- getwd()
root <- dirname(dir_code)
dir_dat <- paste0(root, "/digijord_data/")
dir_cov <- dir_dat %>% paste0(., "/covariates")
mycrs <- "EPSG:25832"
# Load covariates
dir_cov <- dir_dat %>% paste0(., "/covariates")
cov_cats <- dir_code %>%
paste0(., "/cov_categories_20231110.csv") %>%
read.table(
sep = ",",
header = TRUE
)
cov_files <- dir_cov %>% list.files()
cov_names <- cov_files %>% tools::file_path_sans_ext()
cov_names %>%
write.table(
paste0("cov_names_", Sys.Date(), ".csv")
)
cov_names[!cov_names %in% cov_cats$name]
cov <- paste0(dir_cov, "/", cov_files) %>%
rast()
names(cov) <- cov_names
crs(cov) <- mycrs
# Select relevant covariates
cov_selected <- cov_cats %>%
filter(anbm_use == 1) %>%
dplyr::select(., name) %>%
unlist() %>%
unname()
cov_use <- terra::subset(cov, cov_selected)
dir_tiles <- dir_dat %>%
paste0(., "/tiles_591/")
subdir_tiles <- dir_tiles %>%
list.dirs() %>%
.[-1]
ncell(cpv)
ncell(cov)
ncell(cov)/10^5
?spatSample
cells_per_pt <- 5000
dir_tiles <- dir_dat %>%
paste0(., "/tiles_591/")
subdir_tiles <- dir_tiles %>%
list.dirs() %>%
.[-1]
library(parallel)
numCores <- detectCores()
numCores
showConnections()
cl <- makeCluster(numCores)
clusterEvalQ(
cl,
{
library(terra)
library(magrittr)
library(dplyr)
library(tools)
}
)
clusterExport(
cl,
c(
"subdir_tiles",
"cov_selected",
"dir_dat",
"cells_per_pt"
)
)
pts_tiles <- parSapplyLB(
cl,
1:length(subdir_tiles),
function(j) {
set.seed(1)
cov_x_files <- subdir_tiles[x] %>%
list.files(full.names = TRUE)
cov_x_names <- cov_x_files %>%
basename() %>%
file_path_sans_ext()
cov_x <- cov_x_files %>% rast()
names(cov_x) <- cov_x_names
cov_x2 <- subset(cov_x, cov_selected)
cov_pts_x <- terra::spatSample(
x = cov_x2,
size = ncell(cov_x2) / cells_per_pt,
na.rm = FALSE,
as.points = TRUE,
exp = 1
)
return(cov_pts_x)
}
)
library(terra)
library(caret)
library(magrittr)
library(dplyr)
library(tibble)
dir_code <- getwd()
root <- dirname(dir_code)
dir_dat <- paste0(root, "/digijord_data/")
dir_cov <- dir_dat %>% paste0(., "/covariates")
mycrs <- "EPSG:25832"
# Load covariates
dir_cov <- dir_dat %>% paste0(., "/covariates")
cov_cats <- dir_code %>%
paste0(., "/cov_categories_20231110.csv") %>%
read.table(
sep = ",",
header = TRUE
)
cov_files <- dir_cov %>% list.files()
cov_names <- cov_files %>% tools::file_path_sans_ext()
cov_names %>%
write.table(
paste0("cov_names_", Sys.Date(), ".csv")
)
cov_names[!cov_names %in% cov_cats$name]
cov <- paste0(dir_cov, "/", cov_files) %>%
rast()
names(cov) <- cov_names
crs(cov) <- mycrs
# Select relevant covariates
cov_selected <- cov_cats %>%
filter(anbm_use == 1) %>%
dplyr::select(., name) %>%
unlist() %>%
unname()
cov_use <- terra::subset(cov, cov_selected)
# 2023-12-19: Find covariates with missing values for some islands
# missing_islands <- dir_dat %>%
#   paste0(., "/layers/missing_islands_20231219.shp") %>%
#   vect()
#
# terra::extract(cov_use, missing_islands) %>%
#   apply(., 2, function(x) sum(is.na(x))) %>%
#   .[. != 0]
# Drop cost_dist
# Fill holes in terodep
# cost_dist terodep10m
# 110         54
# Extract points from tiles in parallel
cells_per_pt <- 5000
dir_tiles <- dir_dat %>%
paste0(., "/tiles_591/")
subdir_tiles <- dir_tiles %>%
list.dirs() %>%
.[-1]
library(parallel)
numCores <- detectCores()
numCores
showConnections()
cl <- makeCluster(numCores)
clusterEvalQ(
cl,
{
library(terra)
library(magrittr)
library(dplyr)
library(tools)
}
)
clusterExport(
cl,
c(
"subdir_tiles",
"cov_selected",
"dir_dat",
"cells_per_pt"
)
)
pts_tiles <- parSapplyLB(
cl,
1:length(subdir_tiles),
function(j) {
set.seed(1)
cov_x_files <- subdir_tiles[j] %>%
list.files(full.names = TRUE)
cov_x_names <- cov_x_files %>%
basename() %>%
file_path_sans_ext()
cov_x <- cov_x_files %>% rast()
names(cov_x) <- cov_x_names
cov_x2 <- subset(cov_x, cov_selected)
cov_pts_x <- terra::spatSample(
x = cov_x2,
size = ncell(cov_x2) / cells_per_pt,
na.rm = FALSE,
as.points = TRUE,
exp = 1
)
return(cov_pts_x)
}
)
stopCluster(cl)
foreach::registerDoSEQ()
rm(cl)
cells_per_pt <- 5000
dir_tiles <- dir_dat %>%
paste0(., "/tiles_591/")
subdir_tiles <- dir_tiles %>%
list.dirs() %>%
.[-1]
library(parallel)
numCores <- detectCores()
numCores
showConnections()
cl <- makeCluster(numCores)
clusterEvalQ(
cl,
{
library(terra)
library(magrittr)
library(dplyr)
library(tools)
}
)
clusterExport(
cl,
c(
"subdir_tiles",
"dir_dat",
"cells_per_pt"
)
)
pts_tiles <- parSapplyLB(
cl,
1:length(subdir_tiles),
function(j) {
set.seed(1)
cov_x_files <- subdir_tiles[j] %>%
list.files(full.names = TRUE)
cov_x_names <- cov_x_files %>%
basename() %>%
file_path_sans_ext()
cov_x <- cov_x_files %>% rast()
names(cov_x) <- cov_x_names
cov_pts_x <- terra::spatSample(
x = cov_x,
size = ncell(cov_x2) / cells_per_pt,
na.rm = FALSE,
# as.points = TRUE,
xy = TRUE,
exp = 1
)
return(cov_pts_x)
}
)
stopCluster(cl)
foreach::registerDoSEQ()
rm(cl)
cells_per_pt <- 5000
dir_tiles <- dir_dat %>%
paste0(., "/tiles_591/")
subdir_tiles <- dir_tiles %>%
list.dirs() %>%
.[-1]
library(parallel)
numCores <- detectCores()
numCores
showConnections()
cl <- makeCluster(numCores)
clusterEvalQ(
cl,
{
library(terra)
library(magrittr)
library(dplyr)
library(tools)
}
)
clusterExport(
cl,
c(
"subdir_tiles",
"dir_dat",
"cells_per_pt"
)
)
pts_tiles <- parSapplyLB(
cl,
1:length(subdir_tiles),
function(j) {
set.seed(1)
cov_x_files <- subdir_tiles[j] %>%
list.files(full.names = TRUE)
cov_x_names <- cov_x_files %>%
basename() %>%
file_path_sans_ext()
cov_x <- cov_x_files %>% rast()
names(cov_x) <- cov_x_names
cov_pts_x <- terra::spatSample(
x = cov_x,
size = ncell(cov_x) / cells_per_pt,
na.rm = FALSE,
# as.points = TRUE,
xy = TRUE,
exp = 1
)
return(cov_pts_x)
}
)
stopCluster(cl)
foreach::registerDoSEQ()
rm(cl)
pts_tiles
pts_tiles[1, ]
str(pts_tiles)
pts_tiles[[1]]
pts_tiles[[2]]
pts_tiles[[3]]
pts_tiles[, 1]
?parSapplyLB()
t(pts_tiles)
t(pts_tiles) %>% str()
stopCluster(cl)
foreach::registerDoSEQ()
rm(cl)
cells_per_pt <- 5000
dir_tiles <- dir_dat %>%
paste0(., "/tiles_591/")
subdir_tiles <- dir_tiles %>%
list.dirs() %>%
.[-1]
library(parallel)
numCores <- detectCores()
numCores
showConnections()
cl <- makeCluster(numCores)
clusterEvalQ(
cl,
{
library(terra)
library(magrittr)
library(dplyr)
library(tools)
}
)
clusterExport(
cl,
c(
"subdir_tiles",
"dir_dat",
"cells_per_pt"
)
)
pts_tiles <- parSapplyLB(
cl,
1:length(subdir_tiles),
function(j) {
set.seed(1)
cov_x_files <- subdir_tiles[j] %>%
list.files(full.names = TRUE)
cov_x_names <- cov_x_files %>%
basename() %>%
file_path_sans_ext()
cov_x <- cov_x_files %>% rast()
names(cov_x) <- cov_x_names
cov_pts_x <- terra::spatSample(
x = cov_x,
size = ncell(cov_x) / cells_per_pt,
na.rm = FALSE,
# as.points = TRUE,
xy = TRUE,
exp = 1
)
return(cov_pts_x)
},
simplify = FALSE,
USE.NAMES = FALSE
)
stopCluster(cl)
foreach::registerDoSEQ()
rm(cl)
pts_tiles
bind_rows(pts_tiles)
bind_rows(pts_tiles) %>% na.rm()
bind_rows(pts_tiles) %>% na.omit()
cov_pts %<>% bind_rows(pts_tiles) %>% na.omit() %>% sample_n(10^5)
cov_pts <- bind_rows(pts_tiles) %>% na.omit() %>% sample_n(10^5)
cov_pts <- bind_rows(pts_tiles) %>%
na.omit() %>%
sample_n(
min(
10^5,
nrow(pts_tiles)
)
)
cov_pts <- bind_rows(pts_tiles) %>%
na.omit() %>%
sample_n(
min(
10^5,
nrow(.)
)
)
cov_pts <- bind_rows(pts_tiles) %>%
na.omit() %>%
sample_n(
min(
10^5,
nrow(.)
)
)
# Extract random points
# set.seed(1)
# cov_pts <- terra::spatSample(
#   x = cov_use,
#   size = 10^5,
#   na.rm = TRUE,
#   as.df = FALSE
# )
saveRDS(
cov_pts,
paste0(dir_dat, "cov_pts_pca.rds")
)
cov_pts
cov_pts %<>%
select(-c(x, y)) %>%
as.matrix()
cov_pts
covnames_dropogc <- cov_pts %>%
colnames() %>%
grep('ogc_pi', ., value = TRUE, invert = TRUE) %>%
grep('PC', ., value = TRUE, invert = TRUE)
cov_pts_dropogc <- cov_pts[, colnames(cov_pts) %in% covnames_dropogc]
pcs_raw <- prcomp(
x = cov_pts_dropogc,
scale. = TRUE
)
pcs_raw
num_pcs <- sum((cumsum(pcs_raw$sdev) / sum(pcs_raw$sdev)) < 0.99) + 1
pcs <- prcomp(
x = cov_pts_dropogc,
scale. = TRUE,
rank. = num_pcs
)
pcs_rotation <- pcs$rotation %>%
as.data.frame() %>%
rownames_to_column()
pcs_rotation %>%
saveRDS(file = paste0(dir_dat, "pcs_rotation.rds"))
pcs_rotation %>%
write.table(
file = paste0(dir_dat, "pcs_rotation.csv"),
sep = ";",
row.names = FALSE
)
test_pca_10km <- TRUE
# test_pca_10km <- FALSE
if (test_pca_10km) {
# Load covariates for the test area
dir_cov_10km <- dir_dat %>%
paste0(., "/testarea_10km/covariates/")
cov_10km <- dir_cov_10km %>%
list.files(full.names = TRUE) %>%
rast() %>%
subset(covnames_dropogc)
spatSample(cov_10km, 100000) %>%
apply(., 2, function(x) sum(is.na(x))) %>%
.[. != 0]
# Set NAs to zero for terodep10m and the sine and cosine of the aspect
cov_10km$terodep10m %<>% terra::subst(., NA, 0)
cov_10km$cos_aspect_radians %<>% terra::subst(., NA, 0)
cov_10km$sin_aspect_radians  %<>% terra::subst(., NA, 0)
# Predict PCs for the test area
pcs_10km  <- terra::predict(cov_10km, pcs, na.rm = TRUE)
plot(pcs_10km)
}
plot(pcs_10km[[1]])
plot(pcs_10km[[2]])
plot(pcs_10km[[3]])
plot(pcs_10km[[4]])
plot(pcs_10km[[5]])
plot(pcs_10km[[6]])
plot(pcs_10km[[7]])
plot(pcs_10km[[8]])
plot(pcs_10km[[9]])
plot(pcs_10km[[10]])
plot(pcs_10km[[11]])
plot(pcs_10km[[12]])
pcs %>%
saveRDS(file = paste0(dir_dat, "pcs_cov.rds"))
