filter(fold == 10)
}
for (i in 1:(length(breaks) - 1)) {
allpred_i <- allpred_k %>%
filter(
upper < breaks[i + 1],
lower > breaks[i]
)
if (nrow(allpred_i) > 0) {
myplot <- allpred_i %>%
ggplot(aes(x = obs, y = pred, weight = w)) +
ggtitle(
paste0(
"Accuracy at ", breaks[i], " - ", breaks[i + 1], " cm depth, ",
tr_partitions[k]
)
) +
geom_hex(
aes(
alpha = after_stat(ndensity),
fill = after_stat(ndensity)
),
bins = 30
) +
scale_fill_gradientn(
colours = mycolorgradient,
aesthetics = "fill",
breaks = my_breaks_dens,
limits = c(0, 1),
na.value = 0,
trans = "sqrt"
) +
guides(
fill = "legend"
, alpha = "legend"
) +
scale_alpha_continuous(
limits= c(0, 1),
range = c(0.05, 1),
breaks = my_breaks_dens,
na.value = 0,
trans = "sqrt"
) +
facet_wrap(~fraction, nrow = 2, scales = "free", labeller = label_parsed) +
theme_bw() +
theme(aspect.ratio = 1) +
scale_x_continuous(expand = c(0, 0)) +
scale_y_continuous(expand = c(0, 0)) +
geom_abline(col = "red") +
geom_blank(aes(y = ax_max)) +
geom_blank(aes(x = ax_max)) +
geom_blank(aes(y = ax_min)) +
geom_blank(aes(x = ax_min)) +
xlab("Observation") +
ylab("Prediction")
tiff(
paste0(dir_results, "/", tr_partitions[k], "_accuracy_", LETTERS[i],
"_test", testn, ".tiff"),
width = 15,
height = 10,
units = "cm",
res = 300
)
print(myplot)
try(dev.off())
}
}
}
tiff(
paste0(dir_results, "/accuracy_all_test", testn, ".tiff"),
width = 15,
height = 10,
units = "cm",
res = 300
)
allpred %>%
ggplot(aes(x = obs, y = pred, weight = w)) +
geom_hex(
aes(
alpha = after_stat(ndensity),
fill = after_stat(ndensity)
),
bins = 30
) +
scale_fill_gradientn(
colours = mycolorgradient,
aesthetics = "fill",
breaks = my_breaks_dens,
limits= c(0, 1),
na.value = 0,
trans = "sqrt"
) +
guides(
fill = "legend"
, alpha = "legend"
) +
scale_alpha_continuous(
limits= c(0, 1),
range = c(0.05, 1),
breaks = my_breaks_dens,
na.value = 0,
trans = "sqrt"
) +
facet_wrap(~fraction, nrow = 2, scales = "free", labeller = label_parsed) +
theme_bw() +
theme(aspect.ratio = 1) +
scale_x_continuous(expand = c(0, 0)) +
scale_y_continuous(expand = c(0, 0)) +
geom_abline(col = "red") +
geom_blank(aes(y = ax_max)) +
geom_blank(aes(x = ax_max)) +
geom_blank(aes(y = ax_min)) +
geom_blank(aes(x = ax_min)) +
xlab("Observation") +
ylab("Prediction")
try(dev.off())
# Accuracy vs depth
d_out <- list()
# Also calculate statistics by depth for the observations (to do)
allpred_depth <- foreach(i = 1:6) %do%
getpred(
models[[i]], i, axmaxmin = FALSE, drop_imputed = FALSE, drop_inf = FALSE
)
for (i in 1:length(models)) {
depth_weights <- weights_objects[[i]]$w_cm_mat / weights_objects[[i]]$w_cm_sums
mdata <- allpred_depth[[i]]
d_out[[i]] <- apply(
depth_weights, 2,
function(x) {
ddat <- mdata %>%
mutate(
w_div = x
) %>%
filter(
is.finite(w_div),
is.finite(obs),
is.finite(pred)
)
if (i == 5) {
ddat %<>% filter(imputed == FALSE)
}
RMSEws <- numeric()
R2ws <- numeric()
weights_ks <- numeric()
for (k in 1:2) {
if (k == 1) {
ddat_k <- ddat %>%
filter(fold < 10)
} else {
ddat_k <- ddat %>%
filter(fold == 10)
}
if (nrow(ddat_k) > 2) {
RMSEws[k] <- get_RMSEw(
select(ddat_k, c(pred, obs)),
ddat_k$w_div
)
R2ws[k] <- get_R2w(
select(ddat_k, c(pred, obs)),
ddat_k$w_div
)
weights_ks[k] <- sum(ddat_k$w_div)
} else {
RMSEws[k] <- NA
R2ws[k] <- NA
weights_ks[k] <- NA
}
}
out <- data.frame(
RMSEw = RMSEws,
R2w = R2ws,
Weights = weights_ks,
Dataset = tr_partitions
)
return(out)
}
) %>% bind_rows()
d_out[[i]]$Fraction <- fractions[i]
d_out[[i]]$Depth = rep(w_depths, each = 2)
}
d_out %<>%
bind_rows() %>%
mutate(
Fraction = factor(
Fraction,
levels = fractions,
labels = c(
expression("Clay"~"(%)"),
expression("Silt"~"(%)"),
expression("Fine"~"sand"~"(%)"),
expression("Coarse"~"sand"~"(%)"),
expression("log[SOC"~"(%)]"),
expression(sqrt("CaCO"[3]~"(%)"))
)
),
Dataset = as.factor(Dataset)
)
myBreaks <- function(x) {
breaks <- c(
0,
(max(x)*1/2) %>% log2() %>% round(., digits = 0) %>% (2)^.
)
names(breaks) <- attr(breaks,"labels")
return(breaks)
}
tiff(
paste0(dir_results, "/depth_RMSEw_test_", testn, ".tiff"),
width = 16,
height = 10,
units = "cm",
res = 300
)
d_out %>%
ggplot(aes(x = RMSEw, y = Depth, color = Dataset)) +
facet_wrap(~Fraction, nrow = 1, scales = "free_x", labeller = label_parsed) +
geom_path() +
scale_y_reverse(expand = c(0, 0)) +
scale_x_continuous(
guide = guide_axis(check.overlap = TRUE),
breaks = myBreaks,
limits = c(0, NA),
expand = expansion(mult = c(0, 0.2),
add = c(0, 0))
) +
theme_bw() +
theme(strip.text.x = element_text(size = 6)) +
labs(
x = bquote(RMSE[w]),
y = "Depth (cm)"
)
try(dev.off())
try(dev.off())
tiff(
paste0(dir_results, "/depth_R2w_test_", testn, ".tiff"),
width = 16,
height = 10,
units = "cm",
res = 300
)
d_out %>%
ggplot(aes(x = R2w, y = Depth, color = Dataset)) +
facet_wrap(~Fraction, nrow = 1, labeller = label_parsed) +
geom_path() +
scale_y_reverse(expand = c(0, 0)) +
scale_x_continuous(
guide = guide_axis(check.overlap = TRUE),
breaks = c(0, 0.3, 0.6),
expand = expansion(mult = c(0, 0),
add = c(0.01, 0.02))
) +
theme_bw() +
theme(strip.text.x = element_text(size = 6)) +
labs(
x = bquote({R^2}[w]),
y = "Depth (cm)"
)
try(dev.off())
try(dev.off())
tiff(
paste0(dir_results, "/depth_weights_test_", testn, ".tiff"),
width = 16,
height = 10,
units = "cm",
res = 300
)
d_out %>%
ggplot(aes(x = Weights, y = Depth, color = Dataset)) +
facet_wrap(~ Fraction, nrow = 1, labeller = label_parsed) +
geom_path() +
scale_y_reverse(expand = c(0, 0)) +
scale_x_continuous(
guide = guide_axis(check.overlap = TRUE),
breaks = c(0, 2000),
expand = expansion(mult = c(0.01, 0.1),
add = c(0.01, 0.1))
) +
theme_bw() +
theme(strip.text.x = element_text(size = 6)) +
labs(
x = "Total weights",
y = "Depth (cm)"
)
try(dev.off())
try(dev.off())
# JB accuracy with depth
depth_weights <- weights_objects[[i]]$w_cm_mat / weights_objects[[i]]$w_cm_sums
depth_weights_JB <- lapply(
1:length(fractions),
function(x) {
out <- matrix(
0,
nrow = nrow(obs),
ncol = ncol(weights_objects[[x]]$w_cm_mat)
)
d_w <- weights_objects[[x]]$w_cm_mat / weights_objects[[x]]$w_cm_sums
out[!is.na(models_weights[, x]),] <- d_w
out[is.na(out)] <- 0
return(out)
}
) %>%
Reduce("+", .) %>%
"/"(6)
JB_forplot <- c("JB1", "JB2", "JB3", "JB4", "JB5", "JB6", "JB7", "JB8", "JB11",
"JB12")
# Sensitivity = Recall
# Sensitivity= TP / (TP + FN)
# Overall balanced accuracy = mean of recall for all classes
# Recall= TP / (TP+FN)
JB_acc_d <- lapply(
c(FALSE, TRUE),
function(x2) {
out2 <- apply(
depth_weights_JB,
2,
function(x) {
ddat <- JB_df %>%
mutate(
w_d = x
) %>% filter(
imputed == FALSE,
(fold == 10) == x2,
w_d > 0,
) %>%
select(c(predicted, observed, w_d, acc)) %>%
na.omit()
sens_spec <- ddat %>%
confusion(
x = .[, 1],
y = .[, 2],
weights = .[, 3]
) %>% summary() %>%
.@.Data %>%
t() %>%
as.data.frame() %>%
select(c(Sensitivity, Specificity)) %>%
mutate(
Sensitivity = case_when(
!is.finite(Sensitivity) ~ 0,
.default = Sensitivity
)
)
out <- sens_spec %>% apply(., 1, mean)
out$BA <- sens_spec %>%
select(Sensitivity) %>%
unlist() %>%
mean()
out$OA <- weighted.mean(ddat$acc, ddat$w_d)
out %<>% as.data.frame()
return(out)
}
) %>%
bind_rows() %>%
mutate(
Dataset = x2 + 1,
Depth = w_depths
)
}
) %>%
bind_rows() %>%
mutate(
Dataset = factor(Dataset, labels = c("CV", "Holdout"))
)
JB_forplot <- c("JB1", "JB2", "JB3", "JB4", "JB5", "JB6", "JB7", "JB8", "JB11",
"JB12", "BA", "OA")
tiff(
paste0(dir_results, "/JB_acc_test", testn, ".tiff"),
width = 16,
height = 10,
units = "cm",
res = 300
)
JB_acc_d %>%
select(-c(JB9, JB10)) %>%
pivot_longer(
-c(Depth, Dataset),
values_to = "Accuracy"
) %>%
mutate(
name = factor(
name,
levels = JB_forplot
)
) %>%
ggplot(aes(x = Accuracy, y = Depth, color = Dataset)) +
geom_path() +
facet_wrap(~ name, nrow = 2) +
scale_y_reverse(expand = expansion(mult = 0, add = 0)) +
scale_x_continuous(breaks = c(0.5, 1))
try(dev.off())
# Covariate importance
library(colorRamps)
library(rcartocolor) # for colorblind palette
mycolors <- carto_pal(12, "Safe") %>% sort()
library(TSP)
l <- list()
ntop <- 20
for (i in 1:length(models))
{
l[[i]] <- varImp(models[[i]])$importance %>%
as_tibble(rownames = "covariate") %>%
drop_na() %>%
arrange(-Overall) %>%
slice_head(n = ntop) %>%
mutate(target = fractions[i]) %>%
mutate(rank = 1:ntop)
}
rlang::last_trace()
imp_all
models_sum
bestscores_df
l <- list()
ntop <- 20
for (i in 1:length(models))
{
l[[i]] <- varImp(models[[i]])$importance %>%
as_tibble(rownames = "covariate") %>%
drop_na() %>%
arrange(-Overall) %>%
slice_head(n = ntop) %>%
mutate(target = fractions[i]) %>%
rowid_to_column(data, "rank")
}
l <- list()
ntop <- 20
for (i in 1:length(models))
{
l[[i]] <- varImp(models[[i]])$importance %>%
as_tibble(rownames = "covariate") %>%
drop_na() %>%
arrange(-Overall) %>%
slice_head(n = ntop) %>%
mutate(target = fractions[i]) %>%
rowid_to_column("rank")
}
l %<>% bind_rows() %>%
mutate(
target = factor(
target,
levels = fractions
)
)
l_cat <- cov_cats %>%
mutate(
covariate = name,
category = case_when(
category == "basic" ~ scorpan,
category == "WATEM" ~ "OR",
category == "sentinel_composite" ~ "S2 time series",
category == "bare_soil" ~ "Bare soil",
.default = "Other"
)
)
l %<>%
left_join(l_cat)
l %<>%
ungroup() %>%
arrange(target, Overall) %>%
mutate(order = row_number())
l %<>% mutate(
category = case_when(
covariate == "upper" ~ "Depth",
covariate == "lower" ~ "Depth",
covariate == "year" ~ "Time",
category == "N" ~ "Spatial position",
category == "R" ~ "Topography",
category == "C" ~ "Climate",
category == "C " ~ "Climate",
category == "P" ~ "Parent materials",
category == "S" ~ "Soil",
category == "SO" ~ "Soil and organisms",
category == "CR" ~ "Climate and topography",
category == "OR" ~ "Organisms and topography",
category == "O" ~ "Organisms",
category == "RP" ~ "Topography and parent materials",
.default = category
)
)
l$category %<>% as.factor()
catcolors <- l$category %>%
levels() %>%
length() %>%
carto_pal(., "Safe")
names(catcolors) <- levels(l$category)
colScale <- scale_fill_manual(name = "category", values = catcolors)
tiff(
paste0(dir_results, "/importance_test", testn, ".tiff"),
width = 40,
height = 20,
units = "cm",
res = 300
)
l %>%
ggplot(aes(x = order, y = Overall, bg = category)) +
geom_col() +
facet_wrap(
~target,
ncol = 3,
scales = "free"
) +
# xlim(1, ntop) +
ylim(0, NA) +
coord_flip() +
scale_x_continuous(
breaks = l$order,
labels = l$covariate,
expand = c(0, 0)
) +
colScale
try(dev.off())
models[[6]]
models_sum
source("C:/Users/au542768/digijord/digijord_code/f_optimize_xgboost.R", echo=TRUE)
