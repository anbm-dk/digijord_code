#     library(tools)
#   }
# )
#
# clusterExport(
#   cl,
#   c(
#     "subdir_tiles",
#     "dir_dat",
#     "cells_per_pt"
#   )
# )
#
# pts_tiles <- parSapplyLB(
#   cl,
#   1:length(subdir_tiles),
#   function(j) {
#     set.seed(1)
#
#     cov_x_files <- subdir_tiles[j] %>%
#       list.files(full.names = TRUE)
#
#     cov_x_names <- cov_x_files %>%
#       basename() %>%
#       file_path_sans_ext()
#
#     cov_x <- cov_x_files %>% rast()
#
#     names(cov_x) <- cov_x_names
#
#     cov_pts_x <- terra::spatSample(
#       x = cov_x,
#       size = ncell(cov_x) / cells_per_pt,
#       na.rm = FALSE,
#       # as.points = TRUE,
#       xy = TRUE,
#       exp = 1
#     )
#
#     return(cov_pts_x)
#   },
#   simplify = FALSE,
#   USE.NAMES = FALSE
# )
#
# stopCluster(cl)
# foreach::registerDoSEQ()
# rm(cl)
#
# cov_pts <- bind_rows(pts_tiles) %>%
#   na.omit() %>%
#   sample_n(
#     min(
#       10^5,
#       nrow(.)
#     )
#   )
# cov_pts %>%
#   saveRDS(
#     file = paste0(dir_results, "/cov_pts_100k.rds")
#   )
cov_pts <- paste0(dir_results, "/cov_pts_100k.rds") %>% readRDS()
# 2.2 Analyze correlation for top 20
top20_names <- imp_all %>%
filter(
!(Covariate %in% grep('fuzzy', Covariate, value = TRUE)),
!(Covariate %in% c("upper", "lower", "SOM_removed")),
!(Covariate %in% grep('ogc_pi', Covariate, value = TRUE)),
) %>%
select(Covariate) %>%
slice_head(n = 20) %>%
unlist() %>%
unname()
cor_top20 <- cov_pts %>%
select(any_of(top20_names)) %>%
cor()
# 2.3 Find important uncorrelated covariates
# imp_selected <- imp_all %>%
#   filter(
#     !(Covariate %in% grep('fuzzy', Covariate, value = TRUE)),
#     !(Covariate %in% c("upper", "lower", "SOM_removed")),
#     !(Covariate %in% grep('ogc_pi', Covariate, value = TRUE)),
#     is.finite(mean)
#   )
imp_selected <- imp_all %>%
filter(
!(Covariate %in% grep('fuzzy', Covariate, value = TRUE)),
!(Covariate %in% c("upper", "lower", "SOM_removed")),
# !(Covariate %in% grep('ogc_pi', Covariate, value = TRUE)),
is.finite(mean)
)
top_i <- imp_selected %>%
slice_head(n = 1) %>%
select(Covariate) %>%
unlist() %>%
unname()
for (i in 1:19) {
imp_i <- imp_selected %>%
filter(!(Covariate %in% top_i)) %>%
mutate(imp100 = mean/max(mean, na.rm = TRUE))
pts_top_i <- cov_pts %>% select(any_of(top_i))
pts_imp_i <- cov_pts %>% select(any_of(imp_i$Covariate))
max_cor <- cor(
pts_imp_i,
pts_top_i
) %>%
# "^"(2) %>%
abs() %>%
apply(., 1, max) %>%
unname()
imp_i %<>%
mutate(
max_cor = max_cor,
imp_new = imp100*(1 - max_cor)
) %>%
arrange(-imp_new)
top_i <- imp_i %>%
slice_head(n = 1) %>%
select(Covariate) %>%
unlist() %>%
unname() %>%
c(top_i, .)
}
top_i
# Everything:
# "cwl_10m_fuzzy"                          "fuzzy_geology_7"
# "filled_s1_baresoil_composite_vh_8_days" "fuzzy_georeg_3"
# "vdtochn"                                "ogc_pi906"
# "wetlands_10m_fuzzy"                     "fuzzy_landscape_11"
# "dhm2015_terraen_10m"                    "filled_s2_geomedian_b11"
# "fuzzy_geology_5"                        "fuzzy_landscape_9"
# "chelsa_bio17_1981_2010_10m"             "filled_s2_geomedian_b3"
# "flooded_depth_10m_mean"                 "s2_count_max10_fuzzy"
# "filled_s1_baresoil_composite_vv_8_days" "ogc_pi438"
# "chelsa_bio15_1981_2010_10m"             "slope"
# No categorical covariates
# "filled_s1_baresoil_composite_vh_8_days" "vdtochn"
# "chelsa_bio17_1981_2010_10m"             "dhm2015_terraen_10m"
# "filled_s2_geomedian_b11"                "flooded_depth_10m_mean"
# "chelsa_bio15_1981_2010_10m"             "filled_s2_geomedian_b3"
# "ogc_pi906"                              "filled_s1_baresoil_composite_vv_8_days"
# "ogc_pi375"                              "valley_depth"
# "slope"                                  "filled_s2_geomedian_b12"
# "sin_aspect_radians"                     "s2_geomedian_20180701_20180731_b4"
# "ogc_pi125"                              "cos_aspect_radians"
# "s2_geomedian_20180408_20180515_b3"      "standardized_height"
# No categorical covariates or OGCs:
#  "filled_s1_baresoil_composite_vh_8_days" "vdtochn"
#  "chelsa_bio17_1981_2010_10m"             "dhm2015_terraen_10m"
#  "filled_s2_geomedian_b11"                "flooded_depth_10m_mean"
#  "chelsa_bio15_1981_2010_10m"             "filled_s2_geomedian_b3"
#  "filled_s1_baresoil_composite_vv_8_days" "valley_depth"
#  "slope"                                  "filled_s2_geomedian_b12"
#  "sin_aspect_radians"                     "s2_geomedian_20180701_20180731_b4"
#  "cos_aspect_radians"                     "s2_geomedian_20180408_20180515_b3"
#  "standardized_height"                    "rvb_bios"
#  "chelsa_bio16_1981_2010_10m"             "s2_geomedian_20180701_20180731_b8"
# 2.4 Good candidates:
candidates_top <- c(
"filled_s1_baresoil_composite_vh_8_days",
"vdtochn",
"ogc_pi906",
"dhm2015_terraen_10m",
"filled_s2_geomedian_b11",
"chelsa_bio17_1981_2010_10m",
"filled_s2_geomedian_b3",
"flooded_depth_10m_mean",
"s2_count_max10_fuzzy",
"filled_s1_baresoil_composite_vv_8_days"
)
# Other variables to check:
candidates_other <- c(
"ogc_pi438",
"chelsa_bio15_1981_2010_10m",
"slope",
"valley_depth",
"filled_s2_geomedian_b12",
"sin_aspect_radians",
"s2_geomedian_20180701_20180731_b4",
"cos_aspect_radians",
"s2_geomedian_20180408_20180515_b3",
"standardized_height"
)
# Probably not worth checking:
# "rvb_bios" (categorical)
# "chelsa_bio16_1981_2010_10m" (probably just a proxy for geology)
# "s2_geomedian_20180701_20180731_b8" (ok effect for coarse sand)
# 3 Make PDPs for all selected covariates for each fraction
# 3.0 Trial plots using observations
var_i <- 10
var1 <- "s2_geomedian_20180701_20180731_b8"
# var1 <- candidates_top[var_i]
# var1 <- candidates_other[var_i]
obs %>%
select(any_of(c(fractions, var1))) %>%
tidyr::pivot_longer(
cols = any_of(fractions),
names_to = "fraction",
values_to = "value",
values_drop_na = TRUE
) %>%
mutate(fraction = factor(fraction, levels = fractions)) %>%
ggplot(
aes(x = .data[[var1]], y = value)
) +
geom_smooth() +
facet_wrap(vars(fraction))
# Not good enough
# "vdtochn" (big effect close to channels)
# "chelsa_bio17_1981_2010_10m" (probably just a proxy for geology)
# "flooded_depth_10m_mean" (skewed variable)
# "s2_count_max10_fuzzy" (mainly important for SOC)
# "chelsa_bio15_1981_2010_10m" (probably just a proxy for geology)
# "slope" (skewed variable)
# "valley_depth" (big effect at 0)
# "sin_aspect_radians" (no clear effect)
# "cos_aspect_radians" (no clear effect)
# "standardized_height" (ok, but the effect is not strong)
# "s2_geomedian_20180701_20180731_b8" (ok, but the effect is not strong)
# Good for plotting:
goodforplot <- c(
"filled_s1_baresoil_composite_vh_8_days",
"ogc_pi906",
"dhm2015_terraen_10m",
"filled_s2_geomedian_b11",
"filled_s2_geomedian_b3",
"filled_s1_baresoil_composite_vv_8_days",
"ogc_pi438",
"filled_s2_geomedian_b12",
"s2_geomedian_20180701_20180731_b4",
"s2_geomedian_20180408_20180515_b3"
)
for_plot_bare_soil <- c(
"filled_s1_baresoil_composite_vh_8_days",
"filled_s1_baresoil_composite_vv_8_days",
"filled_s2_geomedian_b3",
"filled_s2_geomedian_b11",
"filled_s2_geomedian_b12"
)
for_plot_other <- c(
"dhm2015_terraen_10m",
"ogc_pi438",
"ogc_pi906",
"s2_geomedian_20180408_20180515_b3",
"s2_geomedian_20180701_20180731_b4"
)
# Bare soil plot
obs %>%
select(any_of(c(fractions, for_plot_bare_soil))) %>%
select(-fine_sand) %>%
tidyr::pivot_longer(
cols = any_of(fractions),
names_to = "fraction",
values_to = "value_y",
values_drop_na = TRUE
) %>%
pivot_longer(
cols = any_of(for_plot_bare_soil),
names_to = "Covariate",
values_to = "value_x",
values_drop_na = TRUE
) %>%
mutate(fraction = factor(fraction, levels = fractions)) %>%
ggplot(
aes(x = value_x, y = value_y)
) +
geom_smooth() +
facet_grid(fraction ~ Covariate, scales = "free")
# Other variablespd
obs %>%
select(any_of(c(fractions, for_plot_other))) %>%
select(-fine_sand) %>%
tidyr::pivot_longer(
cols = any_of(fractions),
names_to = "fraction",
values_to = "value_y",
values_drop_na = TRUE
) %>%
pivot_longer(
cols = any_of(for_plot_other),
names_to = "Covariate",
values_to = "value_x",
values_drop_na = TRUE
) %>%
mutate(fraction = factor(fraction, levels = fractions)) %>%
ggplot(
aes(x = value_x, y = value_y)
) +
geom_smooth() +
facet_grid(fraction ~ Covariate, scales = "free")
# Get quantiles for covariates
cov_pts_q <- cov_pts %>%
lapply(
function(x) {
out <- stats::quantile(
x,
probs = seq(0.01, 0.99, 0.02),
# seq(0.05, 0.95, 0.1),
na.rm = TRUE
)
return(out)
}
) %>%
bind_cols()
# 3.1 Plots using models
# Load models
library(stringr)
library(pdp)
library(caret)
nboot_final <- 100
nboot_max <- 100
# nboot_max <- 100
nboot <- min(c(nboot_final, nboot_max))
boot_all_chr <- c(1:nboot) %>%
str_pad(
.,
nchar(nboot_final),
pad = "0"
) %>%
paste0("boot_", .)
# pdp_outlist <- list()
#
# for (i in frac_ind_predict) {
#   print(fractions[i])
#   for (bootr in 1:nboot) {
#     print(bootr)
#     model_i <- models_boot_files[[i]][bootr] %>% readRDS()
#     names_model_i <- varImp(model_i)$importance %>% rownames()
#     for (k in 1:length(goodforplot)) {
#       if (goodforplot[k] %in% names_model_i) {
#         print(goodforplot[k])
#         pg_k <- cov_pts_q %>%
#           select(any_of(goodforplot[k]))
#         outgrid <- partial(
#           model_i,
#           pred.var = goodforplot[k],
#           pred.grid = pg_k
#         )
#         names(outgrid) <- c("x", "yhat")
#         outgrid$Fraction <- fractions[i]
#         outgrid$Covariate <- goodforplot[k]
#         pdp_outlist[[length(pdp_outlist) + 1]] <- outgrid
#       }
#     }
#   }
# }
#
# pdp_df_raw <- pdp_outlist %>%
#   bind_rows()
#
# saveRDS(
#   pdp_df_raw,
#   file = paste0(dir_results, "/pdp_df_raw.rds")
#   )
pdp_df_raw <- readRDS(paste0(dir_results, "/pdp_df_raw.rds"))
pdp_df <- pdp_outlist %>%
bind_rows() %>%
group_by(Fraction, Covariate, x) %>%
summarise(
mean = mean(yhat),
low = stats::quantile(yhat, probs = 0.25),
high = stats::quantile(yhat, probs = 0.75)
)
pdp_df <- pdp_df_raw %>%
group_by(Fraction, Covariate, x) %>%
summarise(
mean = mean(yhat),
low = stats::quantile(yhat, probs = 0.25),
high = stats::quantile(yhat, probs = 0.75)
)
tiff(
paste0(dir_results, "/pdp_texture_bare_test_", testn, ".tiff"),
width = 16,
height = 10,
units = "cm",
res = 600
)
pdp_df %>%
filter(Covariate %in% for_plot_bare_soil) %>%
mutate(Fraction = factor(Fraction, levels = fractions)) %>%
ggplot(
aes(x = x, y = mean)
) +
geom_line(aes(x = x, y = low), colour = "grey70") +
geom_line(aes(x = x, y = high), colour = "grey70") +
geom_ribbon(aes(ymin = low, ymax = high), fill = "grey70") +
geom_line() +
facet_grid(Fraction ~ Covariate, scales = "free")
try(dev.off())
tiff(
paste0(dir_results, "/pdp_texture_other_test_", testn, ".tiff"),
width = 16,
height = 10,
units = "cm",
res = 600
)
pdp_df %>%
filter(Covariate %in% for_plot_other) %>%
mutate(Fraction = factor(Fraction, levels = fractions)) %>%
ggplot(
aes(x = x, y = mean)
) +
geom_line(aes(x = x, y = low), colour = "grey70") +
geom_line(aes(x = x, y = high), colour = "grey70") +
geom_ribbon(aes(ymin = low, ymax = high), fill = "grey70") +
geom_line() +
facet_grid(Fraction ~ Covariate, scales = "free")
try(dev.off())
dir_boot_models
model_i <- models_boot_files[[i]][bootr] %>% readRDS()
model_i <- models_boot_files[[1]][1] %>% readRDS()
model_i
model_i$finalModel
xgb.Booster.complete(model_i)
library(xgboost)
xgb.Booster.complete(model_i)
xgb.Booster.complete(model_i$finalModel)
dir_boot_models
dir_boot_models_fractions
dir_boot
dir_boot_models_raw <- dir_boot %>%
paste0(., "/models_raw/") %T>%
dir.create()
dir_boot_models_raw <- dir_boot %>%
paste0(., "/models_raw/") %T>%
dir.create()
# for loop
i <- 1
bootr <- 1
model_i <- models_boot_files[[i]][bootr] %>% readRDS()
xgb_i <- xgb.Booster.complete(model_i$finalModel)
dir_boot_models_raw_i <- dir_boot_models_raw %>%
paste0(., fractions[i], "/") %T>%
dir.create()
boot_number_chr <- c(1:nboot) %>%
str_pad(
.,
nchar(nboot_final),
pad = "0"
)
boot_all_chr <- boot_number_chr %>%
paste0("boot_", .)
paste0(
dir_boot_models_raw_i,
"/model_", fractions[i], "_", boot_number_chr[bootr], ".model"
)
outname_i <- paste0(
dir_boot_models_raw_i,
"/xgbmodel_", fractions[i], "_", boot_number_chr[bootr], ".model"
)
xgb_i
outname_i <- paste0(
dir_boot_models_raw_i,
"/xgbmodel_", fractions[i], "_", boot_number_chr[bootr], ".model"
)
xgb.save(xgb_i, outname_i)
library(xgboost)
dir_boot_models_raw <- dir_boot %>%
paste0(., "/models_raw/") %T>%
dir.create()
for (i in frac_ind_predict) {
print(fractions[i])
dir_boot_models_raw_i <- dir_boot_models_raw %>%
paste0(., fractions[i], "/") %T>%
dir.create()
for (bootr in 1:nboot) {
print(bootr)
bootr <- 1
model_i <- models_boot_files[[i]][bootr] %>% readRDS()
xgb_i <- xgb.Booster.complete(model_i$finalModel)
outname_i <- paste0(
dir_boot_models_raw_i,
"/xgbmodel_", fractions[i], "_", boot_number_chr[bootr], ".model"
)
xgb.save(xgb_i, outname_i)
}
}
dir_boot_models_raw <- dir_boot %>%
paste0(., "/models_raw/") %T>%
dir.create()
for (i in frac_ind_predict) {
print(fractions[i])
dir_boot_models_raw_i <- dir_boot_models_raw %>%
paste0(., fractions[i], "/") %T>%
dir.create()
for (bootr in 1:nboot) {
print(bootr)
model_i <- models_boot_files[[i]][bootr] %>% readRDS()
xgb_i <- xgb.Booster.complete(model_i$finalModel)
outname_i <- paste0(
dir_boot_models_raw_i,
"/xgbmodel_", fractions[i], "_", boot_number_chr[bootr], ".model"
)
xgb.save(xgb_i, outname_i)
}
}
for (i in 1:length(fractions)) {
print(fractions[i])
dir_boot_models_raw_i <- dir_boot_models_raw %>%
paste0(., fractions[i], "/") %T>%
dir.create()
for (bootr in 1:nboot) {
print(bootr)
model_i <- models_boot_files[[i]][bootr] %>% readRDS()
xgb_i <- xgb.Booster.complete(model_i$finalModel)
outname_i <- paste0(
dir_boot_models_raw_i,
"/xgbmodel_", fractions[i], "_", boot_number_chr[bootr], ".model"
)
xgb.save(xgb_i, outname_i)
}
}
