)
clusterExport(
cl,
c(
"uppers",
"lowers",
"map_spec",
"predfolder",
"dir_cov_10km",
# "models",
"cov_selected",
"predict_passna",
"dir_dat",
"fractions",
"dir_results"
)
)
parSapplyLB(
cl,
1:nrow(map_spec),
function(x) {
tmpfolder <- paste0(dir_dat, "/Temp/")
model_file <- fractions[map_spec$fraction_i] %>%
paste0(dir_results, "/model_", ., ".rds")
while (file.access(model_file, mode = 4) == -1) {
Sys.sleep(1)
}
model_x <- model_file %>% readRDS()
terraOptions(memfrac = 0.02, tempdir = tmpfolder)
cov_10km <- dir_cov_10km %>%
list.files(full.names = TRUE) %>%
rast() %>%
subset(cov_selected)
outname <- predfolder %>%
paste0(
., "/", fractions[map_spec$fraction_i[x]],
"_depth", map_spec$interval[x],
".tif"
)
predict(
cov_10km,
model_x,
fun = predict_passna,
na.rm = FALSE,
const = data.frame(
SOM_removed = 1,
# year = 2010,
upper = uppers[map_spec$interval[x]],
lower = lowers[map_spec$interval[x]]
),
n_const = 3,
n_digits = 1,
filename = outname,
overwrite = TRUE
)
return(NULL)
}
)
try(stopCluster(cl))
try(foreach::registerDoSEQ())
try(rm(cl))
showConnections()
cl <- makeCluster(numCores)
clusterEvalQ(
cl,
{
library(terra)
library(caret)
library(xgboost)
library(magrittr)
library(dplyr)
library(tools)
}
)
clusterExport(
cl,
c(
"uppers",
"lowers",
"map_spec",
"predfolder",
"dir_cov_10km",
# "models",
"cov_selected",
"predict_passna",
"dir_dat",
"fractions",
"dir_results"
)
)
parSapplyLB(
cl,
1:nrow(map_spec),
function(x) {
tmpfolder <- paste0(dir_dat, "/Temp/")
model_file <- fractions[map_spec$fraction_i] %>%
paste0(dir_results, "/model_", ., ".rds")
# while (file.access(model_file, mode = 4) == -1) {
#   Sys.sleep(1)
# }
model_x <- model_file %>% readRDS()
terraOptions(memfrac = 0.02, tempdir = tmpfolder)
cov_10km <- dir_cov_10km %>%
list.files(full.names = TRUE) %>%
rast() %>%
subset(cov_selected)
outname <- predfolder %>%
paste0(
., "/", fractions[map_spec$fraction_i[x]],
"_depth", map_spec$interval[x],
".tif"
)
predict(
cov_10km,
model_x,
fun = predict_passna,
na.rm = FALSE,
const = data.frame(
SOM_removed = 1,
# year = 2010,
upper = uppers[map_spec$interval[x]],
lower = lowers[map_spec$interval[x]]
),
n_const = 3,
n_digits = 1,
filename = outname,
overwrite = TRUE
)
return(NULL)
}
)
try(stopCluster(cl))
try(foreach::registerDoSEQ())
try(rm(cl))
showConnections()
cl <- makeCluster(numCores)
clusterEvalQ(
cl,
{
library(terra)
library(caret)
library(xgboost)
library(magrittr)
library(dplyr)
library(tools)
}
)
clusterExport(
cl,
c(
"uppers",
"lowers",
"map_spec",
"predfolder",
"dir_cov_10km",
# "models",
"cov_selected",
"predict_passna",
"dir_dat",
"fractions",
"dir_results"
)
)
parSapplyLB(
cl,
1:nrow(map_spec),
function(x) {
tmpfolder <- paste0(dir_dat, "/Temp/")
model_file <- fractions[map_spec$fraction_i[x]] %>%
paste0(dir_results, "/model_", ., ".rds")
# while (file.access(model_file, mode = 4) == -1) {
#   Sys.sleep(1)
# }
model_x <- model_file %>% readRDS()
terraOptions(memfrac = 0.02, tempdir = tmpfolder)
cov_10km <- dir_cov_10km %>%
list.files(full.names = TRUE) %>%
rast() %>%
subset(cov_selected)
outname <- predfolder %>%
paste0(
., "/", fractions[map_spec$fraction_i[x]],
"_depth", map_spec$interval[x],
".tif"
)
predict(
cov_10km,
model_x,
fun = predict_passna,
na.rm = FALSE,
const = data.frame(
SOM_removed = 1,
# year = 2010,
upper = uppers[map_spec$interval[x]],
lower = lowers[map_spec$interval[x]]
),
n_const = 3,
n_digits = 1,
filename = outname,
overwrite = TRUE
)
return(NULL)
}
)
stopCluster(cl)
foreach::registerDoSEQ()
rm(cl)
maps_10_km <- list()
for (i in 1:length(fractions)) {
maps_10_km[[i]] <- c(1:4) %>%
paste0(
predfolder, "/", fractions[i],
"_depth", .,
".tif"
) %>%
rast()
names(maps_10_km[[i]]) <- paste0(
fraction_names[i], ", ", uppers, " - ", lowers, " cm"
)
}
# Standardize mineral sum to 100
maps_10_km_mineral_fin <- lapply(
1:4, function(i) {
mineral_raw <- c(
maps_10_km[[1]][[i]],
maps_10_km[[2]][[i]],
maps_10_km[[3]][[i]],
maps_10_km[[4]][[i]]
)
mineral_sum_r <- mineral_raw %>% sum()
mineral_final <- mineral_raw*100 / mineral_sum_r
mineral_final %<>% round(., digits = 1)
return(mineral_final)
}
)
maps_10_km_mineral_fin_frac <- lapply(
1:4, function(x) {
out <- c(
maps_10_km_mineral_fin[[1]][[x]],
maps_10_km_mineral_fin[[2]][[x]],
maps_10_km_mineral_fin[[3]][[x]],
maps_10_km_mineral_fin[[4]][[x]]
)
}
)
for (i in 1:length(maps_10_km_mineral_fin_frac)) {
maps_10_km[[i]] <- maps_10_km_mineral_fin_frac[[i]]
}
# Figures for 10 km maps
library(viridisLite)
library(tidyterra)
try(dev.off())
lapply(1:6, function(x) {
fname <- paste0(dir_results, "/", fractions[x], "_10km_test", testn, ".tiff")
myplot <- autoplot(maps_10_km[[x]]) +
scale_fill_gradientn(colours = viridis(100), na.value = NA)
tiff(
fname,
width = 16,
height = 14,
units = "cm",
res = 300
)
print(myplot)
try(dev.off())
try(dev.off())
})
# Map and plot soil class (JBNR)
source("f_classify_soil_JB.R")
maps_10km_jb <- lapply(
1:length(uppers),
function(x) {
maps_10_km_s2 <- c(
maps_10_km[[1]][[x]],
maps_10_km[[2]][[x]],
maps_10_km[[3]][[x]],
maps_10_km[[5]][[x]] / 0.568,
maps_10_km[[6]][[x]]
)
names(maps_10_km_s2) <- c("clay", "silt", "sand_f", "SOM", "CaCO3")
out <- lapp(maps_10_km_s2, classify_soil_JB)
return(out)
}
) %>%
rast()
levels(maps_10km_jb) <- rep(
list(
data.frame(
id = 1:12,
Class = paste0("JB", 1:12)
)
),
nlyr(maps_10km_jb)
)
names(maps_10km_jb) <- paste0("JB class, ", uppers, " - ", lowers, " cm")
myrgb <- col2rgb(mycolors)
tsp <- as.TSP(dist(t(myrgb)))
set.seed(1)
sol <- solve_TSP(tsp, control = list(repetitions = 1e3))
ordered_cols <- mycolors[sol]
classes_in_maps <- values(maps_10km_jb) %>%
unlist() %>%
matrix(ncol = 1) %>%
unique() %>%
sort()
cols_in_maps <- ordered_cols[classes_in_maps]
plot_jb <- autoplot(maps_10km_jb) +
scale_fill_discrete(type = cols_in_maps)
tiff(
paste0(dir_results, "/JB_test_", testn, ".tiff"),
width = 16,
height = 14,
units = "cm",
res = 300
)
print(plot_jb)
try(dev.off())
library(terra)
library(magrittr)
library(tools)
dir_code <- getwd()
root <- dirname(dir_code)
dir_dat <- paste0(root, "/digijord_data/")
mycrs <- "EPSG:25832"
dir_cov <- dir_dat %>%
paste0(., "/covariates/")
cov_files <- dir_cov %>%
list.files(
pattern = ".tif",
full.names = TRUE
)
cov_cats <- dir_code %>%
paste0(., "/cov_categories_20231110.csv") %>%
read.table(
sep = ";",
header = TRUE
)
cov_cats
cov_cats$category
cov_cats %>% filter(category == "bare_soil")
cov_cats %>% filter(category == "bare_soil")
?filter
library(dplyr)
cov_cats %>% filter(category == "bare_soil")
cov_cats %>% filter(category == "bare_soil", scorpan == "S")
cov_cats %>%
filter(
category == "bare_soil",
scorpan == "S"
) %>%
select(name)
cov_cats %>%
filter(
category == "bare_soil",
scorpan == "S"
) %>%
select(name) %>%
unlist()
cov_cats %>%
filter(
category == "bare_soil",
scorpan == "S"
) %>%
select(name) %>%
unlist() %>%
unname()
names_in <- cov_cats %>%
filter(
category == "bare_soil",
scorpan == "S"
) %>%
select(name) %>%
unlist() %>%
unname()
tmpfolder <- paste0(dir_dat, "/Temp/")
terraOptions(tempdir = tmpfolder)
j <- 1
r <- paste0(dir_cov, names_in[[j]], ".tif") %>% rast()
r
plot(r)
library(viridis)
plot(r, col = cividis(100))
fill_gaps_gauss <- function(
inrast,
nsteps
) {
r1 <- rast(ncols = 180, nrows = 180, xmin=0)
myfilter1 <- focalMat(r1, c(0.5, 1), "Gauss")
myfilter2 <- focalMat(r1, c(1, 2), "Gauss")
smoothed_down_list <- list()
aggregated_list <- list()
split_list <- list()
merged_list <- list()
smooth_up_list <- list()
aggregated_list[[1]] <- inrast
smoothed <- focal(
aggregated_list[[1]],
w = myfilter1,
fun = "sum",
na.policy = "all",
na.rm = TRUE
)
summed <- focal(
!is.na(aggregated_list[[1]]),
w = myfilter1,
fun = "sum",
na.policy = "all",
na.rm = TRUE
)
smoothed_down_list[[1]] <- smoothed / summed
for (i in 2:nsteps) {
aggregated_list[[i]] <- aggregate(smoothed_down_list[[i - 1]])
smoothed <- focal(
aggregated_list[[i]],
w = myfilter1,
fun = "sum",
na.policy = "all",
na.rm = TRUE
)
summed <- focal(
!is.na(aggregated_list[[i]]),
w = myfilter1,
fun = "sum",
na.policy = "all",
na.rm = TRUE
)
smoothed_down_list[[i]] <- smoothed / summed
}
split_list[[nsteps - 1]] <- project(
smoothed_down_list[[nsteps]],
aggregated_list[[nsteps - 1]],
method = "near"
)
merged_list[[nsteps - 1]] <- terra::merge(
x = smoothed_down_list[[nsteps - 1]],
y = split_list[[nsteps - 1]]
)
smoothed <- focal(
merged_list[[nsteps - 1]],
w = myfilter2,
fun = "sum",
na.policy = "all",
na.rm = TRUE
)
summed <- focal(
!is.na(merged_list[[nsteps - 1]]),
w = myfilter2,
fun = "sum",
na.policy = "all",
na.rm = TRUE
)
smooth_up_list[[nsteps - 1]] <- smoothed / summed
for (i in (nsteps - 2):1) {
split_list[[i]] <- project(
smooth_up_list[[i + 1]],
aggregated_list[[i]],
method = "near"
)
merged_list[[i]] <- terra::merge(
x = smoothed_down_list[[i]],
y = split_list[[i]]
)
smoothed <- focal(
merged_list[[i]],
w = myfilter2,
fun = "sum",
na.policy = "all",
na.rm = TRUE
)
summed <- focal(
!is.na(merged_list[[i]]),
w = myfilter2,
fun = "sum",
na.policy = "all",
na.rm = TRUE
)
smooth_up_list[[i]] <- smoothed / summed
}
out <- merge(
inrast,
smooth_up_list[[1]]
)
return(out)
}
r2 <- fill_gaps_gauss(r, 10)
r2
plot(r2)
dem_ind <- grepl(
"dhm",
cov_files
)
dem <- cov_files[dem_ind] %>% rast()
datatype(r2)
datatype(r)
?mask
r3 <- mask(
r2,
dem,
filename = paste0(tmpfolder, "filled_", names(r), ".tif"),
names = paste0("filled_", names(r)),
datatype = datatype(r)
)
plot(r3)
names_in
bare_mask <- "s2_geomedian_b2" %>%
paste0(dir_cov, ., ".tif")
bare_mask
tmpFiles(remove = TRUE)
?focal
?merge
?aggregate
?project
