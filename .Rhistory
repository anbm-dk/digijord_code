) %>%
vect(
geom = c("UTMX", "UTMY"),
crs = mycrs,
keepgeom = TRUE
)
SINKS <- dir_obs_proc %>%
paste0(., "SINKS.csv") %>%
read.table(
header = TRUE,
sep = ";",
) %>%
vect(
geom = c("UTMX", "UTMY"),
crs = mycrs,
keepgeom = TRUE
)
profiles_shp <- dir_dat %>%
paste0(
.,
"/observations/profiles/Profiles_coordinates_new/Profiles_coordinates_new.shp"
) %>%
vect()
forest_samples <- dir_obs_proc %>%
paste0(., "forest_samples.csv") %>%
read.table(
header = TRUE,
sep = ";",
) %>%
vect(
geom = c("UTMX", "UTMY"),
crs = mycrs,
keepgeom = TRUE
)
# 2 Load covariates
cov_dir <- dir_dat %>% paste0(., "/covariates")
cov_files <- cov_dir %>% list.files()
cov_names <- cov_files %>% tools::file_path_sans_ext()
cov <- paste0(cov_dir, "/", cov_files) %>%
rast()
names(cov) <- cov_names
crs(cov) <- mycrs
# 3 Create buffers (40 m = ~ 0.5 ha)
buffer_dsc <- terra::buffer(
dsc,
width = 40
) %>%
st_as_sf()
buffer_SEGES <- terra::buffer(
SEGES,
width = 40
) %>%
st_as_sf()
# 4 Extract
dsc_extr <- terra::extract(
x = cov,
y = dsc,
ID = FALSE,
)
# buffer_dsc_extr <- exact_extract(
#     x = cov,
#     y = buffer_dsc,
#     fun = "mean",
#     progress = TRUE
#   )
# names(buffer_dsc_extr) <- names(cov)
SEGES_extr <- terra::extract(
x = cov,
y = SEGES,
ID = FALSE,
)
# buffer_SEGES_extr <- exact_extract(
#   x = cov,
#   y = buffer_SEGES,
#   fun = "mean",
#   progress = TRUE
# )
# names(buffer_SEGES_extr) <- names(cov)
SINKS_extr <- terra::extract(
x = cov,
y = SINKS,
ID = FALSE,
)
profiles_extr <- terra::extract(
x = cov,
y = profiles_shp,
ID = FALSE,
)
profiles_extr$PROFILNR <- profiles_shp$PROFILNR
forests_extr <- terra::extract(
x = cov,
y = forest_samples,
ID = FALSE,
)
# 5 Write to csv
dir_extr <- dir_dat %>%
paste0(., "/extracts/")
write.table(
dsc_extr,
paste0(dir_extr, "dsc_extr.csv"),
row.names = FALSE,
sep = ";"
)
# write.table(
#   buffer_dsc_extr,
#   paste0(dir_extr, "buffer_dsc_extr.csv"),
#   row.names = FALSE,
#   sep = ";"
# )
write.table(
SEGES_extr,
paste0(dir_extr, "SEGES_extr.csv"),
row.names = FALSE,
sep = ";"
)
# write.table(
#   buffer_SEGES_extr,
#   paste0(dir_extr, "buffer_SEGES_extr.csv"),
#   row.names = FALSE,
#   sep = ";"
# )
write.table(
SINKS_extr,
paste0(dir_extr, "SINKS_extr.csv"),
row.names = FALSE,
sep = ";"
)
write.table(
profiles_extr,
paste0(dir_extr, "profiles_extr.csv"),
row.names = FALSE,
sep = ";"
)
write.table(
forests_extr,
paste0(dir_extr, "forests_extr.csv"),
row.names = FALSE,
sep = ";"
)
# Save as RDS
saveRDS(
dsc_extr,
paste0(dir_extr, "dsc_extr.rds")
)
saveRDS(
SEGES_extr,
paste0(dir_extr, "SEGES_extr.rds")
)
saveRDS(
SINKS_extr,
paste0(dir_extr, "SINKS_extr.rds")
)
saveRDS(
profiles_extr,
paste0(dir_extr, "profiles_extr.rds")
)
saveRDS(
forests_extr,
paste0(dir_extr, "forests_extr.rds")
)
# END
sessionInfo()
# library(Cubist)
library(terra)
library(magrittr)
library(tools)
library(dplyr)
library(caret)
library(tibble)
library(tidyr)
library(xgboost)
library(doParallel)
library(spatstat)  # weights
dir_code <- getwd()
root <- dirname(dir_code)
dir_dat <- paste0(root, "/digijord_data/")
# To do:
# Accuracy by depth (OK)
# Maps for depths (ok)
# Adaptive kernel for point densities (OK)
# Effects of som removal
# Pdp with depth
# Profile examples
# Test 1 - 8: Cubist
# Test 8: New covariates (chelsa, river valley bottoms, hillyness)
# Test 9: xgboost
# Test 10: Predicted row and column (poor accuracy)
# Test 11: Fever data, more
testn <- 12
mycrs <- "EPSG:25832"
# Results folder
dir_results <- dir_dat %>%
paste0(., "/results_test_", testn, "/") %T>%
dir.create()
# 2: Load observations
dir_obs_proc <- dir_dat %>%
paste0(., "/observations/processed/")
dsc <- dir_obs_proc %>%
paste0(., "dsc.csv") %>%
read.table(
header = TRUE,
sep = ";",
) %>%
vect(
geom = c("UTMX", "UTMY"),
crs = mycrs,
keepgeom = TRUE
)
SEGES <- dir_obs_proc %>%
paste0(., "SEGES.csv") %>%
read.table(
header = TRUE,
sep = ";",
) %>%
vect(
geom = c("UTMX", "UTMY"),
crs = mycrs,
keepgeom = TRUE
)
SINKS <- dir_obs_proc %>%
paste0(., "SINKS.csv") %>%
read.table(
header = TRUE,
sep = ";",
) %>%
vect(
geom = c("UTMX", "UTMY"),
crs = mycrs,
keepgeom = TRUE
)
profiles_texture <- dir_obs_proc %>%
paste0(., "profiles_texture.csv") %>%
read.table(
header = TRUE,
sep = ";",
) %>%
vect(
geom = c("UTMX", "UTMY"),
crs = mycrs,
keepgeom = TRUE
)
forest_samples <- dir_obs_proc %>%
paste0(., "forest_samples.csv") %>%
read.table(
header = TRUE,
sep = ";",
) %>%
vect(
geom = c("UTMX", "UTMY"),
crs = mycrs,
keepgeom = TRUE
)
# 3: Load folds
dir_folds <- dir_dat %>%
paste0(., "/folds/")
dsc_folds <- dir_folds %>%
paste0(., "dsc_folds.csv") %>%
read.table(
header = TRUE,
sep = ";",
)
SEGES_folds <- dir_folds %>%
paste0(., "SEGES_folds.csv") %>%
read.table(
header = TRUE,
sep = ";",
)
SINKS_folds <- dir_folds %>%
paste0(., "SINKS_folds.csv") %>%
read.table(
header = TRUE,
sep = ";",
)
profiles_folds <- dir_folds %>%
paste0(., "profiles_folds.csv") %>%
read.table(
header = TRUE,
sep = ";",
) %>%
right_join(values(profiles_texture)) %>%
select(lyr.1)
forest_folds <- dir_folds %>%
paste0(., "forest_folds.csv") %>%
read.table(
header = TRUE,
sep = ";",
)
# 4: Load covariate data
dir_cov <- dir_dat %>% paste0(., "/covariates")
cov_cats <- dir_code %>%
paste0(., "/cov_categories_20230712.csv") %>%
read.table(
sep = ";",
header = TRUE
)
cov_files <- dir_cov %>% list.files()
cov_names <- cov_files %>% tools::file_path_sans_ext()
cov_names %>%
write.table(
paste0("cov_names_", Sys.Date(), ".csv")
)
cov_names[!cov_names %in% cov_cats$name]
# 5: Load extracted covariates
dir_extr <- dir_dat %>%
paste0(., "/extracts/")
usebuffer <- FALSE
if (usebuffer) {
dsc_extr <- dir_extr %>%
paste0(., "/buffer_dsc_extr.csv") %>%
read.table(
header = TRUE,
sep = ";",
)
SEGES_extr <- dir_extr %>%
paste0(., "/buffer_SEGES_extr.csv") %>%
read.table(
header = TRUE,
sep = ";",
)
} else {
dsc_extr <- dir_extr %>%
paste0(., "/dsc_extr.rds") %>%
readRDS()
SEGES_extr <- dir_extr %>%
paste0(., "/SEGES_extr.rds") %>%
readRDS()
}
SINKS_extr <- dir_extr %>%
paste0(., "/SINKS_extr.rds") %>%
readRDS()
profiles_extr <- dir_extr %>%
paste0(., "profiles_extr.rds") %>%
readRDS() %>%
right_join(values(profiles_texture)) %>%
select(any_of(cov_names))
SINKS_extr <- dir_extr %>%
paste0(., "/SINKS_extr.rds") %>%
readRDS()
forests_extr <- dir_extr %>%
paste0(., "/forests_extr.rds") %>%
readRDS()
# 6: Merge data and transform the target variables
obs_data <- list(dsc, SEGES, SINKS, profiles_texture, forest_samples) %>%
vect() %>%
values() %>%
mutate(
logSOC = log(SOC),
logCaCO3 = log(CaCO3),
year = date %>%
as.character() %>%
substr(start = 1, stop = 4) %>%
as.numeric()
)
fractions <- c("clay", "silt", "fine_sand", "coarse_sand", "logSOC", "logCaCO3")
fractions_alt <- c("clay", "silt", "fine_sand", "coarse_sand", "SOC", "CaCO3")
fractions <- fractions_alt
fraction_names <- c(
"Clay", "Silt", "Fine sand", "Coarse sand", "SOC", "CaCO3"
)
# bounds_lower <- c(0, 0, 0, 0, NA, NA)
bounds_lower <- rep(0, 6)
# bounds_upper <- c(100, 100, 100, 100, log(100), log(100))
bounds_upper <- rep(100, 6)
# 7: Make training data
folds <- bind_rows(
dsc_folds,
SEGES_folds,
SINKS_folds,
profiles_folds,
forest_folds
)
names(folds) <- "fold"
extr <- bind_rows(
dsc_extr,
SEGES_extr,
SINKS_extr,
profiles_extr,
forests_extr
)
obs <- cbind(obs_data, extr, folds) %>%
filter(!is.na(UTMX) & !is.na(UTMY))
obs %<>%
rownames_to_column() %>%
mutate(ID_new = rowname, .before = everything()) %>%
select(-rowname)
obs_top <- obs %>%
filter(
upper < 25,
is.finite(fold)
)
obs_prf <- obs %>%
filter(
db == "Profile database",
is.finite(fold)
)
obs_top_v <- obs_top %>% vect(geom = c("UTMX", "UTMY"))
library(viridisLite)
tiff(
paste0(dir_results, "/obs_map_test", testn, ".tiff"),
width = 15,
height = 10,
units = "cm",
res = 300
)
plot(
obs_top_v, "clay", breaks = 5, breakby = "cases", col = cividis(5),
cex = 0.2
)
try(dev.off())
try(dev.off())
plot(
obs_top_v, "clay", breaks = 5, breakby = "cases", col = cividis(5),
cex = 0.4
)
cov_selected <- cov_cats %>%
filter(anbm_use == 1) %>%
dplyr::select(., name) %>%
unlist() %>%
unname()
# Weighted RMSE
get_RMSEw <- function(d, w)
{
sqe <- w*(d[, 1] - d[, 2])^2
msqe <- sum(sqe)/sum(w)
out <- sqrt(msqe)
return(out)
}
# Weighted R^2
get_R2w <- function(d, w)
{
require(boot)
out <- boot::corr(d[, 1:2], w)^2
return(out)
}
# Weighted summary function
WeightedSummary <- function (
data,
lev = NULL,
model = NULL,
...
) {
out <- numeric()
out[1] <- get_RMSEw(data[, 1:2], data$weights)
out[2] <- get_R2w(data[, 1:2], data$weights)
names(out) <- c('RMSEw', 'R2w')
return(out)
}
# Weighted summary function with log transformation
WeightedSummary_log <- function (
data,
lev = NULL,
model = NULL,
...
) {
out <- numeric()
data[, 1:2] <- log(data[, 1:2])
data <- data[is.finite(rowSums(data)), ]
out[1] <- get_RMSEw(data[, 1:2], data$weights)
out[2] <- get_R2w(data[, 1:2], data$weights)
names(out) <- c('RMSEw_log', 'R2w_log')
return(out)
}
# Weighted summary function with square root transformation
WeightedSummary_sqrt <- function (
data,
lev = NULL,
model = NULL,
...
) {
out <- numeric()
data[, 1:2] <- sqrt(data[, 1:2])
data <- data[is.finite(rowSums(data)), ]
out[1] <- get_RMSEw(data[, 1:2], data$weights)
out[2] <- get_R2w(data[, 1:2], data$weights)
names(out) <- c('RMSEw_sqrt', 'R2w_sqrt')
return(out)
}
metrics <- rep('RMSEw', length(fractions))
metrics[fractions == "SOC"] <- 'RMSEw_log'
metrics[fractions == "CaCO3"] <- 'RMSEw_sqrt'
# Function to calculate point densities
qnorm(seq(0.55, 0.95, 0.1), 0, 1)
get_dens <- function(datxy, sig) {
dens_out <- ppp(
datxy$UTMX,
datxy$UTMY,
c(441000, 894000),
c(6049000, 6403000)
) %>%
density(
sigma = sig,
at = 'points',
leaveoneout = FALSE
)
attributes(dens_out) <- NULL
return(dens_out)
}
# Tuning grid
tgrid <- expand.grid(
nrounds = 100,
eta = seq(0.1, 1, 0.1),
max_depth = 6,
min_child_weight = 1,
gamma = 0,
colsample_bytree = 0.5,
subsample = 0.3
)
max_depth_test <- seq(1, 20, 3)
min_child_weight_test <- c(1, 2, 4, 8, 16, 32)
gamma_test <- seq(0, 0.5, 0.1)
objectives <- c(rep("reg:squarederror", 4), rep("reg:tweedie", 2))
trees_per_round <- 10
