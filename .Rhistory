year = 2010,
upper = uppers[map_spec$interval[x]],
lower = lowers[map_spec$interval[x]]
),
n_const = 2,
n_digits = 1,
filename = outname,
overwrite = TRUE
)
}
)
stopCluster(cl)
foreach::registerDoSEQ()
rm(cl)
outname
dir_cov_10km <- dir_dat %>%
paste0(., "/testarea_10km/covariates/")
predfolder <- dir_results %>%
paste0(., "/predictions_testarea/") %T>%
dir.create()
source("f_predict_passna.R")
# Make the maps
uppers <- c(0, 25, 50, 100)
lowers <- c(25, 50, 100, 200)
map_spec <- expand_grid(
fraction_i = 1:6,
interval = 1:4
)
showConnections()
numCores <- 20
cl <- makeCluster(numCores)
clusterEvalQ(
cl,
{
library(terra)
library(caret)
library(xgboost)
library(magrittr)
library(dplyr)
library(tools)
}
)
clusterExport(
cl,
c("uppers",
"lowers",
"map_spec",
"predfolder",
"dir_cov_10km",
"models",
"cov_selected",
"predict_passna",
"dir_dat"
)
)
parSapplyLB(
cl,
1:nrow(map_spec),
function(x) {
tmpfolder <- paste0(dir_dat, "/Temp/")
terraOptions(memfrac = 0.02, tempdir = tmpfolder)
cov_10km <- dir_cov_10km %>%
list.files(full.names = TRUE) %>%
rast() %>%
subset(cov_selected)
outname <- predfolder %>%
paste0(
., "/", fractions[map_spec$fraction_i[x]],
"_depth", map_spec$interval[x],
".tif"
)
outmap <- predict(
cov_10km,
models[map_spec$fraction_i[x]],
fun = predict_passna,
na.rm = FALSE,
const = data.frame(
SOM_removed = 1,
year = 2010,
upper = uppers[map_spec$interval[x]],
lower = lowers[map_spec$interval[x]]
),
n_const = 2,
n_digits = 1,
filename = outname,
overwrite = TRUE
)
}
)
stopCluster(cl)
foreach::registerDoSEQ()
rm(cl)
dir_cov_10km <- dir_dat %>%
paste0(., "/testarea_10km/covariates/")
predfolder <- dir_results %>%
paste0(., "/predictions_testarea/") %T>%
dir.create()
source("f_predict_passna.R")
# Make the maps
uppers <- c(0, 25, 50, 100)
lowers <- c(25, 50, 100, 200)
map_spec <- expand_grid(
fraction_i = 1:6,
interval = 1:4
)
showConnections()
numCores <- 20
cl <- makeCluster(numCores)
clusterEvalQ(
cl,
{
library(terra)
library(caret)
library(xgboost)
library(magrittr)
library(dplyr)
library(tools)
}
)
clusterExport(
cl,
c("uppers",
"lowers",
"map_spec",
"predfolder",
"dir_cov_10km",
"models",
"cov_selected",
"predict_passna",
"dir_dat",
"fractions"
)
)
parSapplyLB(
cl,
1:nrow(map_spec),
function(x) {
tmpfolder <- paste0(dir_dat, "/Temp/")
terraOptions(memfrac = 0.02, tempdir = tmpfolder)
cov_10km <- dir_cov_10km %>%
list.files(full.names = TRUE) %>%
rast() %>%
subset(cov_selected)
outname <- predfolder %>%
paste0(
., "/", fractions[map_spec$fraction_i[x]],
"_depth", map_spec$interval[x],
".tif"
)
outmap <- predict(
cov_10km,
models[map_spec$fraction_i[x]],
fun = predict_passna,
na.rm = FALSE,
const = data.frame(
SOM_removed = 1,
year = 2010,
upper = uppers[map_spec$interval[x]],
lower = lowers[map_spec$interval[x]]
),
n_const = 2,
n_digits = 1,
filename = outname,
overwrite = TRUE
)
}
)
uppers[map_spec$interval[1]]
uppers[map_spec$interval[2]]
predfolder
fractions[map_spec$fraction_i[1]]
fractions[map_spec$fraction_i[2]]
predfolder %>%
paste0(
., "/", fractions[map_spec$fraction_i[2]],
"_depth", map_spec$interval[2],
".tif"
)
stopCluster(cl)
foreach::registerDoSEQ()
rm(cl)
dir_cov_10km <- dir_dat %>%
paste0(., "/testarea_10km/covariates/")
predfolder <- dir_results %>%
paste0(., "/predictions_testarea/") %T>%
dir.create()
source("f_predict_passna.R")
# Make the maps
uppers <- c(0, 25, 50, 100)
lowers <- c(25, 50, 100, 200)
map_spec <- expand_grid(
fraction_i = 1:6,
interval = 1:4
)
showConnections()
numCores <- 20
cl <- makeCluster(numCores)
clusterEvalQ(
cl,
{
library(terra)
library(caret)
library(xgboost)
library(magrittr)
library(dplyr)
library(tools)
}
)
clusterExport(
cl,
c("uppers",
"lowers",
"map_spec",
"predfolder",
"dir_cov_10km",
"models",
"cov_selected",
"predict_passna",
"dir_dat",
"fractions"
)
)
parSapplyLB(
cl,
1:nrow(map_spec),
function(x) {
tmpfolder <- paste0(dir_dat, "/Temp/")
terraOptions(memfrac = 0.02, tempdir = tmpfolder)
cov_10km <- dir_cov_10km %>%
list.files(full.names = TRUE) %>%
rast() %>%
subset(cov_selected)
outname <- predfolder %>%
paste0(
., "/", fractions[map_spec$fraction_i[x]],
"_depth", map_spec$interval[x],
".tif"
)
predict(
cov_10km,
models[[map_spec$fraction_i[x]]],
fun = predict_passna,
na.rm = FALSE,
const = data.frame(
SOM_removed = 1,
year = 2010,
upper = uppers[map_spec$interval[x]],
lower = lowers[map_spec$interval[x]]
),
n_const = 4,
n_digits = 1,
filename = outname,
overwrite = TRUE
)
}
)
predfolder %>%
list.files(full.names = TRUE)
maps_10_km <- predfolder %>%
list.files(full.names = TRUE) %>%
rast()
maps_10_km
plot(maps_10_km)
maps_10_km <- list()
for(i in 1:length(fractions)) {
maps_10_km[[i]] <- c(1:4) %>%
paste0(
predfolder, "/", fractions[i],
"_depth", .,
".tif"
) %>% rast()
}
maps_10_km
plot(maps_10_km[[1]])
?`plot,SpatRaster,numeric-method`
panel(maps_10_km)
panel(maps_10_km[[1]])
stopCluster(cl)
foreach::registerDoSEQ()
rm(cl)
panel(maps_10_km[[2]])
paste0(uppers, lowers)
paste0(uppers, " - ", lowers)
paste0(uppers, " - ", lowers, " cm")
maps_10_km <- list()
for(i in 1:length(fractions)) {
maps_10_km[[i]] <- c(1:4) %>%
paste0(
predfolder, "/", fractions[i],
"_depth", .,
".tif"
) %>% rast()
names(maps_10_km[[i]]) <- paste0(
fraction_names[i], " ", uppers, " - ", lowers, " cm"
)
}
panel(maps_10_km[[2]], col = viridis(100))
panel(maps_10_km[[1]], col = viridis(100))
install.packages("tidyterra")
library(tidyterra)
autoplot(maps_10_km[[1]])
autoplot(maps_10_km[[1]]) + scale_fill_viridis_b()
?scale_fill_viridis_b
?scale_color_viridis_b
autoplot(maps_10_km[[1]]) + scale_color_viridis_b()
?autoplot
autoplot(maps_10_km[[1]], colours = cividis(100))
autoplot(maps_10_km[[1]]) +
scale_fill_gradientn(colours = viridis(100), na.value = NA)
autoplot(maps_10_km[[2]]) +
scale_fill_gradientn(colours = viridis(100), na.value = NA)
autoplot(maps_10_km[[3]]) +
scale_fill_gradientn(colours = viridis(100), na.value = NA)
autoplot(maps_10_km[[4]]) +
scale_fill_gradientn(colours = viridis(100), na.value = NA)
autoplot(maps_10_km[[5]]) +
scale_fill_gradientn(colours = viridis(100), na.value = NA)
autoplot(maps_10_km[[6]]) +
scale_fill_gradientn(colours = viridis(100), na.value = NA)
library(viridisLite)
library(tidyterra)
for (i in 1:6) {
tiff(
paste0(dir_results, "/", fractions[i], "_10km_test", testn, ".tiff"),
width = 16,
height = 14,
units = "cm",
res = 300
)
autoplot(maps_10_km[[i]]) +
scale_fill_gradientn(colours = viridis(100), na.value = NA)
dev.off()
}
library(viridisLite)
library(tidyterra)
for (i in 1:6) {
tiff(
paste0(dir_results, "/", fractions[i], "_10km_test", testn, ".tiff"),
width = 16,
height = 14,
units = "cm",
res = 300
)
autoplot(maps_10_km[[i]]) +
scale_fill_gradientn(colours = viridis(100), na.value = NA)
}
dev.off()
autoplot(maps_10_km[[1]]) +
scale_fill_gradientn(colours = viridis(100), na.value = NA)
for (i in 1:6) {
tiff(
paste0(dir_results, "/", fractions[i], "_10km_test", testn, ".tiff"),
width = 16,
height = 14,
units = "cm",
res = 300
)
autoplot(maps_10_km[[i]]) +
scale_fill_gradientn(colours = viridis(100), na.value = NA)
dev.off()
}
plot_1 <- autoplot(maps_10_km[[i]]) +
scale_fill_gradientn(colours = viridis(100), na.value = NA)
for (i in 1:6) {
tiff(
paste0(dir_results, "/", fractions[i], "_10km_test", testn, ".tiff"),
width = 16,
height = 14,
units = "cm",
res = 300
)
plot_1
dev.off()
}
dev.off()
plot_1
pdf("myplot.pdf")
plot_1
dev.off()
png("myplot.png")
plot_1
dev.off()
?png
tiff("myplot.tif")
plot_1
dev.off()
tiff(
paste0(dir_results, "/", fractions[1], "_10km_test", testn, ".tiff"),
width = 16,
height = 14,
units = "cm",
res = 300
)
plot_1
dev.off()
for (i in 1:6) {
tiff(
paste0(dir_results, "/", fractions[i], "_10km_test", testn, ".tiff"),
width = 16,
height = 14,
units = "cm",
res = 300
)
plot_1
dev.off()
}
dev.off()
for (i in 1:6) {
tiff(
paste0(dir_results, "/", fractions[i], "_10km_test", testn, ".tiff"),
width = 16,
height = 14,
units = "cm",
res = 300
)
plot_1
Sys.sleep(10)
dev.off()
}
dev.off()
for (i in 1:6) {
fname <- paste0(dir_results, "/", fractions[i], "_10km_test", testn, ".tiff")
tiff(
fname,
width = 16,
height = 14,
units = "cm",
res = 300
)
plot_1
dev.off()
}
dev.off()
lapply(1:6, function(x) {
fname <- paste0(dir_results, "/", fractions[x], "_10km_test", testn, ".tiff")
tiff(
fname,
width = 16,
height = 14,
units = "cm",
res = 300
)
autoplot(maps_10_km[[x]]) +
scale_fill_gradientn(colours = viridis(100), na.value = NA)
dev.off()
}
)
lapply(1:6, function(x) {
fname <- paste0(dir_results, "/", fractions[x], "_10km_test", testn, ".tiff")
myplot <- autoplot(maps_10_km[[x]]) +
scale_fill_gradientn(colours = viridis(100), na.value = NA)
tiff(
fname,
width = 16,
height = 14,
units = "cm",
res = 300
)
print(myplot)
dev.off()
}
)
autoplot(maps_10_km[[1]]) +
scale_fill_gradientn(colours = viridis(100), na.value = NA)
autoplot(maps_10_km[[1]]) +
scale_fill_gradientn(colours = viridis(100), na.value = NA)
dev.off()
autoplot(maps_10_km[[1]]) +
scale_fill_gradientn(colours = viridis(100), na.value = NA)
dev.off()
autoplot(maps_10_km[[1]]) +
scale_fill_gradientn(colours = viridis(100), na.value = NA)
maps_10_km[[1]]
plot(maps_10_km[[1]])
autoplot(maps_10_km[[1]])
lapply(1:6, function(x) {
fname <- paste0(dir_results, "/", fractions[x], "_10km_test", testn, ".tiff")
myplot <- autoplot(maps_10_km[[x]]) +
scale_fill_gradientn(colours = viridis(100), na.value = NA)
tiff(
fname,
width = 16,
height = 14,
units = "cm",
res = 300
)
print(myplot)
dev.off()
dev.off()
}
)
dev.off()
try(dev.off())
?tryNew
?try
try(dev.off())
lapply(1:6, function(x) {
fname <- paste0(dir_results, "/", fractions[x], "_10km_test", testn, ".tiff")
myplot <- autoplot(maps_10_km[[x]]) +
scale_fill_gradientn(colours = viridis(100), na.value = NA)
tiff(
fname,
width = 16,
height = 14,
units = "cm",
res = 300
)
print(myplot)
dev.off()
}
)
dev.off()
