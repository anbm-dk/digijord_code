filter(ind_j != 0) %>%
select(ind_j) %>%
unlist() %>%
unname()
}
)
showConnections()
cl <- makePSOCKcluster(10)
registerDoParallel(cl)
set.seed(1)
models[[i]] <- caret::train(
form = formula_i,
data = trdat,
method = cubist_weighted,
# method = "cubist",
na.action = na.pass,
tuneGrid = tgrid,
trControl = trainControl(
index = folds_i,
savePredictions = "final",
predictionBounds = c(bounds_lower[i], bounds_upper[i]),
summaryFunction = WeightedSummary
),
metric = 'RMSEw',
maximize = FALSE,
weights = trdat$w
)
registerDoSEQ()
rm(cl)
saveRDS(
models[[i]],
paste0(dir_results, "/model_", frac, ".rds")
)
}
models_loaded <- lapply(
1:6,
function(x) {
out <- fractions[x] %>%
paste0(dir_results, "/model_", ., ".rds") %>%
readRDS()
return(out)
}
)
# models <- models_loaded
names(models) <- fractions
models
models %>%
seq_along() %>%
lapply(
function(x) {
out <- varImp(models[[x]])$importance %>%
as.data.frame() %>%
rownames_to_column(var = "covariate") %>%
mutate(fraction = names(models)[x])
return(out)
}
) %>%
bind_rows() %>%
pivot_wider(
id_cols = covariate,
names_from = fraction,
values_from = Overall
) %>%
rowwise() %>%
mutate(mean_imp = mean(c_across(-covariate))) %>%
arrange(-mean_imp) %T>%
write.table(
file = paste0(dir_results, "/var_imp.csv"),
sep = ";",
row.names = FALSE
)
get_acc <- function(x2, i2) {
df <- x2$pred %>%
arrange(rowIndex) %>%
distinct(rowIndex, .keep_all = TRUE) %>%
select(c(pred, obs, weights))
if (i2 > 4) df %<>% exp
df %<>% bind_cols(x2$trainingData)
r2_all <- df %$% R2w(cbind(pred, obs), weights)
r2_bare <- df %>%
filter(!is.na(s2_geomedian_b2)) %$%
R2w(cbind(pred, obs), weights)
r2_covered <- df %>%
filter(is.na(s2_geomedian_b2)) %$%
R2w(cbind(pred, obs), weights)
rmse_all <- df %$% RMSEw(cbind(pred, obs), weights)
rmse_bare <- df %>%
filter(!is.na(s2_geomedian_b2)) %$%
RMSEw(cbind(pred, obs), weights)
rmse_covered <- df %>%
filter(is.na(s2_geomedian_b2)) %$%
RMSEw(cbind(pred, obs), weights)
out <- data.frame(
r2_all,
r2_bare,
r2_covered,
rmse_all,
rmse_bare,
rmse_covered
)
return(out)
}
acc_all <- foreach(i = 1:6, .combine = rbind) %do%
get_acc(models[[i]], i)
acc_all %<>% mutate(fraction = fraction_names, .before = 1)
write.table(
acc_all,
paste0(dir_results, "/acc_all_test", testn, ".csv"),
sep = ";",
row.names = FALSE
)
getpred <- function(x2, i2) {
df <- x2$pred %>%
arrange(rowIndex) %>%
distinct(rowIndex, .keep_all = TRUE) %>%
select(c(pred, obs))
if (i2 > 4) df %<>% exp
df %<>% mutate(
fraction = fractions[i2],
upper = quantile(obs, 0.99)
) %>%
filter(obs < upper) %>%
filter(pred < upper) %>%
filter(obs >= 0)
return(df)
}
allpred <- foreach(i = 1:6, .combine=rbind) %do%
getpred(models[[i]], i)
allpred$fraction %<>% factor(levels = fractions)
levels(allpred$fraction) <- c(
"Clay", "Silt", "Fine sand", "Coarse sand", "SOC", "CaCO3"
)
tiff(
paste0(dir_results, "/accuracy_test", testn, ".tiff"),
width = 15,
height = 10,
units = "cm",
res = 300
)
allpred %>%
ggplot(aes(x = obs, y = pred)) +
geom_point(alpha = .01, shape = 16) +
facet_wrap(~ fraction, nrow = 2, scales = "free") +
theme(aspect.ratio = 1) +
scale_x_continuous(expand = c(0, 0)) +
scale_y_continuous(expand = c(0, 0)) +
geom_abline(col = "red") +
geom_blank(aes(y = upper)) +
geom_blank(aes(x = upper)) +
geom_blank(aes(y = 0)) +
geom_blank(aes(x = 0)) +
xlab("Observation (%)") +
ylab("Prediction (%)")
dev.off()
l <- list()
ntop <- 20
for(i in 1:length(models))
{
l[[i]] <- varImp(models[[i]])$importance %>%
as_tibble(rownames = "covariate") %>%
drop_na %>%
arrange(- Overall) %>%
slice_head(n = ntop) %>%
mutate(target = fractions[i]) %>%
mutate(rank = 1:ntop)
}
l %<>% bind_rows() %>%
mutate(
target = factor(
target,
levels = fractions
)
)
l_cat <- cov_cats %>%
mutate(
covariate = name,
category = ifelse(
category == "basic",
scorpan,
category
)
)
l %<>%
left_join(l_cat)
l %<>%
ungroup() %>%
arrange(target, Overall) %>%
mutate(order = row_number())
l$category %<>% as.factor()
# levels(l$category) <- c(
#   "Bare soil",
#   "Spatial position",
#   "Parent materials",
#   "Topography",
#   "S2 time series",
#   "Soil"
# )
catcolors <- l$category %>%
levels() %>%
length() %>%
carto_pal(., "Safe")
library(colorRamps)
library(rcartocolor) # for colorblind palette
mycolors <- carto_pal(12, "Safe") %>% sort()
library(TSP)
l <- list()
ntop <- 20
for(i in 1:length(models))
{
l[[i]] <- varImp(models[[i]])$importance %>%
as_tibble(rownames = "covariate") %>%
drop_na %>%
arrange(- Overall) %>%
slice_head(n = ntop) %>%
mutate(target = fractions[i]) %>%
mutate(rank = 1:ntop)
}
l %<>% bind_rows() %>%
mutate(
target = factor(
target,
levels = fractions
)
)
l_cat <- cov_cats %>%
mutate(
covariate = name,
category = ifelse(
category == "basic",
scorpan,
category
)
)
l %<>%
left_join(l_cat)
l %<>%
ungroup() %>%
arrange(target, Overall) %>%
mutate(order = row_number())
l$category %<>% as.factor()
catcolors <- l$category %>%
levels() %>%
length() %>%
carto_pal(., "Safe")
names(catcolors) <- levels(l$category)
colScale <- scale_fill_manual(name = "category", values = catcolors)
tiff(
paste0(dir_results, "/importance_test", testn, ".tiff"),
width = 40,
height = 20,
units = "cm",
res = 300
)
l %>%
ggplot(aes(x = order, y = Overall, bg = category)) +
geom_col() +
facet_wrap(
~ target,
ncol = 3,
scales = "free"
) +
# xlim(1, ntop) +
ylim(0, NA) +
coord_flip() +
scale_x_continuous(
breaks = l$order,
labels = l$covariate,
expand = c(0, 0)
) +
colScale
dev.off()
outfolder <- dir_dat %>%
paste0(., "/testarea_10km/covariates/")
cov_10km <- outfolder %>%
list.files(full.names = TRUE) %>%
rast
names(cov_10km) <- names(cov)
predfolder <- dir_dat %>%
paste0(., "/testarea_10km/predictions_", testn, "/") %T>%
dir.create()
rfun <- function(mod, dat, ...) {
library(caret)
library(Cubist)
rfun2 <- function(mod2, dat2, ...) {
notallnas <- rowSums(is.na(dat2)) < (ncol(dat2) - 2)  # NB: Edit this line
out2 <- rep(NA, nrow(dat2))
if (sum(notallnas) > 0) {
out2[notallnas] <- predict(
object = mod2,
newdata = dat2[notallnas, ],
na.action = na.pass,
...
)
}
return(out2)
}
out <- rfun2(mod, dat, ...)
return(out)
}
# Make the maps
maps_10km <- list()
showConnections()
for(i in 1:length(fractions))
{
frac <- fractions[i]
maps_10km[[i]] <- predict(
cov_10km,
models[[i]],
fun = rfun,
na.rm = FALSE,
cores = 2,
filename = paste0(predfolder, frac,  "_10km.tif"),
overwrite = TRUE,
const = data.frame(
SOM_removed = TRUE,
year = 2010
)
)
}
maps_10km <- predfolder %>%
paste0(., fractions,  "_10km.tif") %>%
rast()
names(maps_10km) <- fractions
# Looking at 10 km maps
library(viridisLite)
plot(maps_10km, col = cividis(100))
maps_10km_stack2 <- c(
maps_10km[[1:4]],
exp(maps_10km[[5]]),
exp(maps_10km[[6]])
)
names(maps_10km_stack2) <- fraction_names
tiff(
paste0(dir_results, "/maps_test", testn, ".tiff"),
width = 24,
height = 16,
units = "cm",
res = 300
)
plot(maps_10km_stack2, col = cividis(100))
dev.off()
JB <- function(clay, silt, sand_f, SOM, CaCO3)
{
out <- rep(0, length(clay))
out[CaCO3 > 10] <- 12
out[out == 0 & SOM > 10] <- 11
out[out == 0 & clay < 5 & silt < 20 & sand_f < 50] <- 1
out[out == 0 & clay < 5 & silt < 20] <- 2
out[out == 0 & clay < 10 & silt < 25 & sand_f < 40] <- 3
out[out == 0 & clay < 10 & silt < 25]<-4
out[out == 0 & clay < 15 & silt < 30 & sand_f < 40] <- 5
out[out == 0 & clay < 15 & silt < 30] <- 6
out[out == 0 & clay < 25 & silt < 35] <- 7
out[out == 0 & clay < 45 & silt < 45] <- 8
out[out == 0 & silt < 50] <- 9
out[out == 0] <- 10
return(out)
}
maps_10km_s2 <- c(maps_10km[[1]], maps_10km[[2]], maps_10km[[3]], exp(maps_10km[[5]])/0.568, exp(maps_10km[[6]]))
maps_10km_jb <- lapp(maps_10km_s2, JB) %>% as.factor()
myrgb <- col2rgb(mycolors)
tsp <- as.TSP(dist(t(myrgb)))
set.seed(1)
sol <- solve_TSP(tsp, control = list(repetitions = 1e3))
ordered_cols <- mycolors[sol]
ggplot2::qplot(x = 1:12, y = 1, fill = I(ordered_cols), geom = "col", width = 1) + ggplot2::theme_void()
tiff(
paste0(dir_results, "/JB_test", testn, ".tiff"),
width = 15,
height = 10,
units = "cm",
res = 300
)
plot(
maps_10km_jb,
col = ordered_cols[levels(maps_10km_jb)[[1]]$ID],
main = "JB-nummer"
)
dev.off()
library(parallel)
numCores <- detectCores()
numCores
dir_tiles <- dir_dat %>%
paste0(., "/tiles_591/")
subdir_tiles <- dir_tiles %>% list.dirs() %>% .[-1]
dir_pred_all <- dir_results %>%
paste0(., "/predictions/") %T>%
dir.create()
dir_pred_tiles <- dir_pred_all  %>%
paste0(., "/tiles/") %T>%
dir.create()
for (i in 1:length(fractions)) {
frac <- fractions[i]
dir_pred_tiles_frac <- dir_pred_tiles %>%
paste0(., "/", names(models)[i], "/") %T>%
dir.create()
model_i <- models[[i]]
showConnections()
cl <- makeCluster(numCores)
clusterEvalQ(
cl,
{
library(terra)
library(caret)
library(Cubist)
library(magrittr)
library(dplyr)
}
)
clusterExport(
cl,
c("model_i",
"subdir_tiles",
"dir_pred_tiles_frac",
"frac",
"cov_names",
"cov_selected",
"rfun",
"dir_dat"
)
)
parSapplyLB(
cl,
1:length(subdir_tiles),
function(x) {
tmpfolder <- paste0(dir_dat, "/Temp/")
terraOptions(memfrac = 0.02, tempdir = tmpfolder)
cov_x <- subdir_tiles[x] %>%
list.files(full.names = TRUE) %>%
rast()
names(cov_x) <- cov_names
cov_x2 <- subset(cov_x, cov_selected)
tilename_x <- basename(subdir_tiles[x])
outname_x <- dir_pred_tiles_frac %>%
paste0(., "/", frac, "_", tilename_x, ".tif")
predict(
cov_x2,
model_i,
fun = rfun,
na.rm = FALSE,
filename = outname_x,
overwrite = TRUE,
const = data.frame(
SOM_removed = TRUE,
year = 2010
)
)
}
)
stopCluster(cl)
registerDoSEQ()
rm(cl)
outtiles_frac <- dir_pred_tiles_frac %>%
list.files(full.names = TRUE) %>%
sprc()
merge(
outtiles_frac,
filename = paste0(dir_pred_all, frac, "_merged.tif"),
overwrite = TRUE
)
}
library(terra)
library(magrittr)
library(tools)
library(dplyr)
library(caret)
library(tibble)
library(tidyr)
dir_code <- getwd()
root <- dirname(dir_code)
dir_dat <- paste0(root, "/digijord_data/")
testn <- 8
mycrs <- "EPSG:25832"
dir_results <- dir_dat %>%
paste0(., "/results_test_", testn, "/")
outfolder <- dir_dat %>%
paste0(., "/testarea_10km/covariates/")
predfolder <- dir_dat %>%
paste0(., "/testarea_10km/predictions_", testn, "/")
vindum_obs <- dir_dat %>%
paste0(., "/observations/Vindum/Vindum_everything.csv") %>%
read.table(
header = TRUE,
sep = ";"
) %>%
filter(DEPTH == 25) %>%
vect(
geom = c("UTMX", "UTMY"),
crs = mycrs,
keepgeom = TRUE
)
predictions <- predfolder %>%
list.files(full.names = TRUE) %>%
rast()
names(predictions) <- predfolder %>%
list.files() %>%
file_path_sans_ext()
vindum_extr <- terra::extract(predictions, vindum_obs)
plot(predictions[[1]], ext = ext(vindum_obs))
plot(vindum_obs, "LER", add = TRUE)
plot(vindum_extr$clay_10km, vindum_obs$LER)
abline(1,1)
cor(vindum_extr$clay_10km, vindum_obs$LER, use =  "pairwise.complete.obs")^2
plot(vindum_extr$logSOC_10km, log(vindum_obs$SOC))
abline(1,1)
plot(exp(vindum_extr$logSOC_10km), vindum_obs$SOC)
abline(1,1)
cor(exp(vindum_extr$logSOC_10km), vindum_obs$SOC, use =  "pairwise.complete.obs")^2
plot(exp(predictions[[5]]), ext = ext(vindum_obs))
plot(vindum_obs, "SOC", add = TRUE)
plot(vindum_extr$logSOC_10km, vindum_obs$SOC)
abline(1,1)
