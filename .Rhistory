levels() %>%
length() %>%
carto_pal(., "Safe")
names(catcolors) <- levels(l$category)
colScale <- scale_fill_manual(name = "category", values = catcolors)
tiff(
paste0(dir_results, "/importance_test", testn, ".tiff"),
width = 40,
height = 20,
units = "cm",
res = 300
)
l %>%
ggplot(aes(x = order, y = Overall, bg = category)) +
geom_col() +
facet_wrap(
~target,
ncol = 3,
scales = "free"
) +
# xlim(1, ntop) +
ylim(0, NA) +
coord_flip() +
scale_x_continuous(
breaks = l$order,
labels = l$covariate,
expand = c(0, 0)
) +
colScale
try(dev.off())
# 10: Make maps for the test area
dir_cov_10km <- dir_dat %>%
paste0(., "/testarea_10km/covariates/")
predfolder <- dir_results %>%
paste0(., "/predictions_testarea/") %T>%
dir.create()
source("f_predict_passna.R")
# Make the maps
breaks <- c(0, 30, 60, 100, 200)
uppers <- breaks %>% rev() %>% .[-1] %>% rev()
lowers <- breaks %>% .[-1]
map_spec <- expand_grid(
fraction_i = 1:6,
interval = 1:4
)
showConnections()
numCores <- 20
cl <- makeCluster(numCores)
clusterEvalQ(
cl,
{
library(terra)
library(caret)
library(xgboost)
library(magrittr)
library(dplyr)
library(tools)
}
)
clusterExport(
cl,
c(
"uppers",
"lowers",
"map_spec",
"predfolder",
"dir_cov_10km",
"models",
"cov_selected",
"predict_passna",
"dir_dat",
"fractions"
)
)
parSapplyLB(
cl,
1:nrow(map_spec),
function(x) {
tmpfolder <- paste0(dir_dat, "/Temp/")
terraOptions(memfrac = 0.02, tempdir = tmpfolder)
cov_10km <- dir_cov_10km %>%
list.files(full.names = TRUE) %>%
rast() %>%
subset(cov_selected)
outname <- predfolder %>%
paste0(
., "/", fractions[map_spec$fraction_i[x]],
"_depth", map_spec$interval[x],
".tif"
)
predict(
cov_10km,
models[[map_spec$fraction_i[x]]],
fun = predict_passna,
na.rm = FALSE,
const = data.frame(
SOM_removed = 1,
year = 2010,
upper = uppers[map_spec$interval[x]],
lower = lowers[map_spec$interval[x]]
),
n_const = 4,
n_digits = 1,
filename = outname,
overwrite = TRUE
)
return(NA)
}
)
stopCluster(cl)
foreach::registerDoSEQ()
rm(cl)
maps_10_km <- list()
for (i in 1:length(fractions)) {
maps_10_km[[i]] <- c(1:4) %>%
paste0(
predfolder, "/", fractions[i],
"_depth", .,
".tif"
) %>%
rast()
names(maps_10_km[[i]]) <- paste0(
fraction_names[i], ", ", uppers, " - ", lowers, " cm"
)
}
# SOC depth distribution is very obviously wrong. I will need to fix it. (ok)
# Using a separate density for wetlands fixes this issue. (ok)
# Ideally, I should use the extent of the central wetlands, which is the survey
# area for the SINKS dataset. (ok)
# Figures for 10 km maps
library(viridisLite)
library(tidyterra)
try(dev.off())
lapply(1:6, function(x) {
fname <- paste0(dir_results, "/", fractions[x], "_10km_test", testn, ".tiff")
myplot <- autoplot(maps_10_km[[x]]) +
scale_fill_gradientn(colours = viridis(100), na.value = NA)
tiff(
fname,
width = 16,
height = 14,
units = "cm",
res = 300
)
print(myplot)
try(dev.off())
try(dev.off())
})
# maps_10km_s2 <- c(maps_10km[[1]], maps_10km[[2]], maps_10km[[3]], exp(maps_10km[[5]])/0.568, exp(maps_10km[[6]]))
source("f_classify_soil_JB.R")
maps_10km_jb <- lapply(
1:length(uppers),
function(x) {
maps_10_km_s2 <- c(
maps_10_km[[1]][[x]],
maps_10_km[[2]][[x]],
maps_10_km[[3]][[x]],
maps_10_km[[5]][[x]] / 0.568,
maps_10_km[[6]][[x]]
)
names(maps_10_km_s2) <- c("clay", "silt", "sand_f", "SOM", "CaCO3")
out <- lapp(maps_10_km_s2, classify_soil_JB)
return(out)
}
) %>%
rast()
levels(maps_10km_jb) <- rep(
list(
data.frame(
id = 1:12,
Class = paste0("JB", 1:12)
)
),
nlyr(maps_10km_jb)
)
names(maps_10km_jb) <- paste0("JB class, ", uppers, " - ", lowers, " cm")
myrgb <- col2rgb(mycolors)
tsp <- as.TSP(dist(t(myrgb)))
set.seed(1)
sol <- solve_TSP(tsp, control = list(repetitions = 1e3))
ordered_cols <- mycolors[sol]
classes_in_maps <- values(maps_10km_jb) %>%
unlist() %>%
matrix(ncol = 1) %>%
unique() %>%
sort()
cols_in_maps <- ordered_cols[classes_in_maps]
plot_jb <- autoplot(maps_10km_jb) +
scale_fill_discrete(type = cols_in_maps)
tiff(
paste0(dir_results, "/JB_test_", testn, ".tiff"),
width = 15,
height = 10,
units = "cm",
res = 300
)
print(plot_jb)
dev.off()
models_predictions
allpred_i
weights_objects
holdout_i
predict(models[[6]], holdout_i)
holdout_i
?matrix
models_predictions
?ifelse
sum(NA, na.rm = TRUE)
models_predictions %>%
apply(
1, function(x) {
sum_min <- sum(x[1:4], na.rm = TRUE) %>%
{ ifelse(. == 0, NA, .) }
}
)
models_predictions %>%
apply(
1, function(x) {
sum_min <- sum(x[1:4], na.rm = TRUE) %>%
{ ifelse(. == 0, NA, .) }
x[1:4] %<>% `/`(sum_min)
return(x)
}
)
?apply(array, margin, ...)
models_predictions %>%
apply(
1, function(x) {
sum_min <- sum(x[1:4], na.rm = TRUE) %>%
{ ifelse(. == 0, NA, .) }
x[1:4] %<>% `/`(sum_min) %>% `*`(100)
return(x)
},
simplify = FALSE
)
models_predictions %>%
apply(
1, function(x) {
sum_min <- sum(x[1:4], na.rm = TRUE) %>%
{ ifelse(. == 0, NA, .) }
x[1:4] %<>% `/`(sum_min) %>% `*`(100)
return(x)
},
simplify = FALSE
) %>% bind_rows()
models_predictions %>%
apply(
1, function(x) {
sum_min <- sum(x[1:4], na.rm = TRUE) %>%
{ ifelse(. == 0, NA, .) }
x[1:4] %<>% `/`(sum_min) %>% `*`(100)
x %>% matrix(ncol = length(x)) %>% as.data.frame()
return(x)
},
simplify = FALSE
) %>% bind_rows()
models_predictions %>%
apply(
1, function(x) {
sum_min <- sum(x[1:4], na.rm = TRUE) %>%
{ ifelse(. == 0, NA, .) }
x[1:4] %<>% `/`(sum_min) %>% `*`(100)
x %<>% matrix(ncol = length(x)) %>% as.data.frame()
return(x)
},
simplify = FALSE
) %>% bind_rows()
models_predictions
models_weights
obs$fold
source("f_classify_soil_JB.R")
View(classify_soil_JB)
View(classify_soil_JB)
classify_soil_JB(
clay = models_predictions[, 1],
silt = models_predictions[, 2],
sand_f = models_predictions[, 3],
SOM = models_predictions[, 5] / 0.568,
CaCO3 = models_predictions[, 6]
)
classify_soil_JB(
clay = models_predictions[, 1],
silt = models_predictions[, 2],
sand_f = models_predictions[, 3],
SOM = models_predictions[, 5] / 0.568,
CaCO3 = models_predictions[, 6]
) %>% plot()
View(classify_soil_JB)
JB_predicted <- classify_soil_JB(
clay = models_predictions[, 1],
silt = models_predictions[, 2],
sand_f = models_predictions[, 3],
SOM = models_predictions[, 5] / 0.568,
CaCO3 = models_predictions[, 6]
)
models_predictions[JB_predicted == 10, ]
View(classify_soil_JB)
JB_predicted <- classify_soil_JB(
clay = models_predictions[, 1],
silt = models_predictions[, 2],
sand_f = models_predictions[, 3],
SOM = models_predictions[, 5] / 0.568,
CaCO3 = models_predictions[, 6]
)
source("f_classify_soil_JB.R")
JB_predicted <- classify_soil_JB(
clay = models_predictions[, 1],
silt = models_predictions[, 2],
sand_f = models_predictions[, 3],
SOM = models_predictions[, 5] / 0.568,
CaCO3 = models_predictions[, 6]
)
JB_predicted
plot(JB_predicted)
JB_observed <- classify_soil_JB(
clay = obs$clay,
silt = obs$silt,
sand_f = obs$fine_sand,
SOM = obs$SOC / 0.568,
CaCO3 = obs$CaCO3
)
plot(JB_observed)
JB_observed == JB_predicted
mean(JB_observed == JB_predicted, na.rm = TRUE)
?cor
cor(JB_observed == JB_predicted, use = "pairwise.complete.obs")
cor(JB_observed, JB_predicted, use = "pairwise.complete.obs")
cor(JB_observed, JB_predicted, use = "pairwise.complete.obs")^2
?factor
classify_soil_JB(
clay = models_predictions[, 1],
silt = models_predictions[, 2],
sand_f = models_predictions[, 3],
SOM = models_predictions[, 5] / 0.568,
CaCO3 = models_predictions[, 6]
) %>%
factor(
levels = 1:12,
labels = paste0("JB", 1:12)
)
JB_predicted <- classify_soil_JB(
clay = models_predictions[, 1],
silt = models_predictions[, 2],
sand_f = models_predictions[, 3],
SOM = models_predictions[, 5] / 0.568,
CaCO3 = models_predictions[, 6]
) %>%
factor(
levels = 1:12,
labels = paste0("JB", 1:12)
)
JB_observed <- classify_soil_JB(
clay = obs$clay,
silt = obs$silt,
sand_f = obs$fine_sand,
SOM = obs$SOC / 0.568,
CaCO3 = obs$CaCO3
) %>%
factor(
levels = 1:12,
labels = paste0("JB", 1:12)
)
?confusionMatrix
confusionMatrix(JB_predicted, JB_observed)
data.frame(
ID_new = obs$ID_new,
observed = JB_observed,
predicted = JB_predicted,
upper = obs$upper,
lower = obs$lower,
imputed = obs$imputed
)
JB_df <- data.frame(
ID_new = obs$ID_new,
observed = JB_observed,
predicted = JB_predicted,
upper = obs$upper,
lower = obs$lower,
imputed = obs$imputed,
w = NA,
fold = obs$fold
) %>%
filter(imputed == FALSE) %>%
select(-imputed)
JB_df
models_predictions
models_predictions %<>%
apply(
1, function(x) {
sum_min <- sum(x[1:4], na.rm = TRUE) %>%
{ ifelse(. == 0, NA, .) }
x[1:4] %<>% `/`(sum_min) %>% `*`(100)
x %<>% matrix(ncol = length(x)) %>% as.data.frame()
return(x)
},
simplify = FALSE
) %>% bind_rows()
source("f_classify_soil_JB.R")
JB_predicted <- classify_soil_JB(
clay = models_predictions[, 1],
silt = models_predictions[, 2],
sand_f = models_predictions[, 3],
SOM = models_predictions[, 5] / 0.568,
CaCO3 = models_predictions[, 6]
) %>%
factor(
levels = 1:12,
labels = paste0("JB", 1:12)
)
JB_observed <- classify_soil_JB(
clay = obs$clay,
silt = obs$silt,
sand_f = obs$fine_sand,
SOM = obs$SOC / 0.568,
CaCO3 = obs$CaCO3
) %>%
factor(
levels = 1:12,
labels = paste0("JB", 1:12)
)
mean_weights <- apply(models_weights, 1, function(x) { mean(x, na.rm = TRUE) })
JB_df <- data.frame(
ID_new = obs$ID_new,
observed = JB_observed,
predicted = JB_predicted,
upper = obs$upper,
lower = obs$lower,
imputed = obs$imputed,
w = NA,
fold = obs$fold
) %>%
filter(imputed == FALSE) %>%
select(-imputed)
JB_df %>%
filter(fold == 10) %>%
confusionMatrix(.$predicted, .$JB_observed)
JB_df %>%
filter(fold == 10) %>%
confusionMatrix(.$predicted, .$observed)
str(JB_df)
JB_df %>%
filter(fold == 10)
JB_df %>%
filter(fold != 10) %>%
confusionMatrix(.$predicted, .$observed)
JB_df %>%
filter(fold != 10)
JB_df %>%
filter(fold != 10) %>% str
JB_df %>%
filter(fold != 10) %>%
select(c(predicted, observed))
JB_df %>%
filter(fold != 10) %>%
select(c(predicted, observed)) %>%
confusionMatrix(.[, 1], .[, 2])
JB_df %>%
filter(fold != 10) %>%
select(c(predicted, observed))
JB_df %>%
filter(fold != 10) %>%
select(c(predicted, observed)) %>% .[, 1]
JB_df %>%
filter(fold != 10) %>%
select(c(predicted, observed)) %>% .[, 2]
JB_df %>%
filter(fold != 10) %>%
select(c(predicted, observed))
JB_df %>%
filter(fold != 10) %>%
select(c(predicted, observed)) %>% .[, 2]
JB_df %>%
filter(fold != 10) %>%
select(c(predicted, observed)) %>%
na.omit() %>%
confusionMatrix(.[, 1], .[, 2])
JB_df %>%
filter(fold != 10) %>%
select(c(predicted, observed)) %>%
na.omit()
JB_df %>%
filter(fold != 10) %>%
select(c(predicted, observed)) %>%
na.omit() %>% str
JB_df %>%
filter(fold != 10) %>%
select(c(predicted, observed)) %>%
na.omit() %>%
confusionMatrix(data = .[, 1], reference = .[, 2])
?table
JB_df %>%
filter(fold != 10) %>%
select(c(predicted, observed)) %>%
na.omit() %>%
table()
JB_df %>%
filter(fold != 10) %>%
select(c(predicted, observed)) %>%
na.omit() %>%
table() %>%
confusionMatrix(data = .[, 1], reference = .[, 2])
JB_df %>%
filter(fold != 10) %>%
select(c(predicted, observed)) %>%
na.omit() %>%
table() %>%
confusionMatrix()
plot(obs$year)
plot(is.na(obs$year))
0.99^(max(obs$year) - obs$year)
plot(0.99^(max(obs$year) - obs$year))
2^NA
