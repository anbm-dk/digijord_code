#   r1,
#   y = dem,
#   filename = paste0(
#     tmpfolder,
#     "temp2.tif"
#   ),
#   overwrite = TRUE
# )
#
# for (i in 1:nlyr(r2)) {
#   outname <- dir_cov %>%
#     paste0(., "/", detrended_newnames[i], ".tif")
#
#   writeRaster(
#     r2[[i]],
#     datatype = "FLT4S",
#     filename = outname,
#     overwrite = TRUE
#   )
# }
# 3.5: Hillyness (2023-03-23)
# hillyness <- dir_dat %>%
#   paste0(., "/hillyness/hillyness.tif") %>%
#   rast()
#
# names(hillyness) <- "hillyness"
# NAflag(hillyness) <- 128
#
# outname_hillyness <- dir_cov %>%
#   paste0(., "/hillyness.tif")
#
# terra::crop(
#   hillyness,
#   dem,
#   filename = outname_hillyness,
#   datatype = "INT1U",
#   overwrite = TRUE
# )
# Edit: Mask hillyness with DEM
# r <- dir_dat %>%
#   paste0(., "/hillyness.tif") %>%
#   rast()
#
# terra::mask(
#   r,
#   mask = dem,
#   filename = outname_hillyness,
#   datatype = "INT1U",
#   overwrite = TRUE
# )
# 4: Update names in covariate table (2023-02-27)
# cov_cats <- dir_code %>%
#   paste0(., "/cov_categories_20230202.csv") %>%
#   read.table(
#     sep = ";",
#     header = TRUE,
#     encoding = "latin1"
#   )
#
# newnames <- cov_cats$name %>%
#   gsub("\\.", "_", .) %>%
#   gsub("-", "_", .) %>%
#   tolower()
#
# cov_cats$name <- newnames
#
# write.table(
#   cov_cats,
#   file = paste0(dir_code, "/cov_categories_20230227.csv"),
#   row.names = FALSE,
#   sep = ";",
#   fileEncoding = "latin1"
# )
# 5: Make new sets of oblique geographic coordinates
# install.packages('devtools')
# library(devtools)
# install_github("anbm-dk/obliquer")
# library(obliquer)
#
# dir_tiles <- dir_dat %>%
#   paste0(., "/tiles_591/")
#
# tile_shapes <- dir_tiles %>%
#   paste0(., "/tiles.shp") %>%
#   vect()
#
# # split dem into tiles
#
# tmp_dem_tiles <- paste0(tmpfolder, "/dem/") %T>% dir.create()
# tmp_ogc_tiles <- paste0(tmpfolder, "/ogc/") %T>% dir.create()
#
# for (i in 1:length(tile_shapes)) {
#   terra::crop(
#     dem,
#     tile_shapes[i],
#     filename = paste0(tmp_dem_tiles, "/dem_tile_", i, ".tif")
#   )
# }
#
# dem_files <- tmp_dem_tiles %>% list.files(full.names = TRUE)
#
# library(parallel)
#
# numCores <- detectCores()
# numCores
#
# showConnections()
#
# cl <- makeCluster(numCores)
#
# clusterEvalQ(
#   cl,
#   {
#     library(terra)
#     library(magrittr)
#     library(obliquer)
#   }
# )
#
# clusterExport(
#   cl,
#   c(
#     "dem_files",
#     "tmp_ogc_tiles",
#     "tmpfolder"
#   )
# )
#
# parSapplyLB(
#   cl,
#   1:length(dem_files),
#   function(j) {
#     terraOptions(memfrac = 0.02, tempdir = tmpfolder)
#
#     dem_j <- dem_files[j] %>% rast()
#
#     obliquify(
#       dem_j,
#       n_angles = 64,
#       n_digits = 0,
#       digits_names = 3,
#       filename = paste0(tmp_ogc_tiles, "/ogcs_tile_", j, ".tif"),
#       datatype = "INT4S"
#       )
#
#     return(NULL)
#   }
# )
#
# stopCluster(cl)
# foreach::registerDoSEQ()
# rm(cl)
#
# ogc_files <- tmp_ogc_tiles %>% list.files(full.names = TRUE)
#
# ogc_names <- ogc_files[1] %>% rast() %>% names()
#
# for (i in 1:length(ogc_names)) {
#   ogcs_i <- ogc_files %>% lapply(
#     function(x) {
#       out <- x %>% rast() %>% subset(i)
#       return(out)
#     }
#   )
#
#   ogcs <- sprc(ogcs_i)
#
#   ogcs_merged <- merge(
#     ogcs,
#     filename = paste0(dir_cov, "/ogc_", ogc_names[i], ".tif"),
#     datatype = "INT4S",
#     gdal = "TILED=YES"
#   )
# }
# 6: Rename the layers for all covariates (2023-03-23)
# First check in the names match
cov_files <- dir_cov %>%
list.files(
pattern = ".tif",
full.names = TRUE
)
cov_origin <- cov_files %>% rast()
cov_origin_lyrnames <- names(cov_origin)
cov_origin_filenames <- cov_files %>% basename() %>% tools::file_path_sans_ext()
mismatches <- cbind(
cov_origin_filenames,
cov_origin_lyrnames
)[cov_origin_filenames != cov_origin_lyrnames]
mismatches
changethese <- cov_files[cov_origin_filenames != cov_origin_lyrnames]
cov_cats <- dir_code %>%
paste0(., "/cov_categories_20231110.csv") %>%
read.table(
sep = ";",
header = TRUE,
encoding = "latin1"
)
cov_files <- dir_cov %>%
list.files(
pattern = ".tif",
full.names = TRUE
)
cov_names <- cov_files %>%
basename() %>%
file_path_sans_ext()
data.frame(new = setdiff(cov_names, cov_cats$name))
cov_files <- dir_cov %>%
list.files(
pattern = ".tif",
full.names = TRUE
)
squareshape <- dir_dat %>%
paste0(., "/testarea_10km/square10km.shp") %>%
vect()
square_ext <- squareshape %>%
ext() %>%
round(-1)
outfolder <- dir_dat %>%
paste0(., "/testarea_10km/covariates/")
outfolder %>% dir.create()
source("f_cropstack.R")
cov_files %>%
cropstack(
y = square_ext,
folder = outfolder
)
# 09: Split covariates using tiles
# 1: Start up
library(terra)
library(magrittr)
library(dplyr)
library(stringr)
dir_code <- getwd()
root <- dirname(dir_code)
dir_dat <- paste0(root, "/digijord_data/")
dir_cov <- dir_dat %>% paste0(., "/covariates")
mycrs <- "EPSG:25832"
dir_tiles <- dir_dat %>%
paste0(., "/tiles_591/")
dir_mask_tiles <- dir_dat %>%
paste0(., "/layers/Mask_LU_tiles/")
# Load tile shape polygons
tile_shapes <- dir_tiles %>%
paste0(., "/tiles.shp") %>%
vect()
# Find covariates
cov_files <- dir_cov %>%
list.files(
pattern = ".tif",
full.names = TRUE
)
# Make names for tiles
max_char <- length(tile_shapes) %>%
1:. %>%
as.character() %>%
nchar() %>%
max()
tile_numbers <- length(tile_shapes) %>%
1:. %>%
str_pad(
.,
max_char,
pad = "0"
)
# Cropping function
source("f_cropstack.R")
# Process for tile creation
library(parallel)
numCores <- detectCores()
numCores
showConnections()
cl <- makeCluster(numCores)
clusterEvalQ(
cl,
{
library(terra)
library(magrittr)
library(dplyr)
library(tools)
}
)
clusterExport(
cl,
c(
"dir_dat",
"dir_tiles",
"dir_code",
"tile_numbers",
"cov_files",
"dir_mask_tiles"
)
)
parSapplyLB(
cl,
1:length(tile_shapes),
function(j) {
tmpfolder <- paste0(dir_dat, "/Temp/")
terraOptions(memfrac = 0.02, tempdir = tmpfolder)
dir_tile_j <- dir_tiles %>%
paste0(., "/tile_", tile_numbers[j], "/") %T>%
dir.create()
# tile_shapes <- dir_tiles %>%
#   base::paste0(., "/tiles.shp") %>%
#   terra::vect()
# my_ext <- tile_shapes[j]
my_ext <- paste0(
dir_mask_tiles, "/Mask_LU_tile_", tile_numbers[j], ".tif"
) %>%
rast()
source(paste0(dir_code, "/f_cropstack.R"))
cropstack(
x = cov_files,
y = my_ext,
folder = dir_tile_j,
mask = TRUE
)
}
)
stopCluster(cl)
foreach::registerDoSEQ()
rm(cl)
# END
stopCluster(cl)
# 03: Extract covariates
library(terra)
library(magrittr)
library(exactextractr)
library(sf)
dir_code <- getwd()
root <- dirname(dir_code)
dir_dat <- paste0(root, "/digijord_data/")
mycrs <- "EPSG:25832"
# 1 Load observations
dir_obs_proc <- dir_dat %>%
paste0(., "/observations/processed/")
dsc <- dir_obs_proc %>%
paste0(., "dsc.csv") %>%
read.table(
header = TRUE,
sep = ";",
) %>%
vect(
geom = c("UTMX", "UTMY"),
crs = mycrs,
keepgeom = TRUE
)
SEGES <- dir_obs_proc %>%
paste0(., "SEGES.csv") %>%
read.table(
header = TRUE,
sep = ";",
) %>%
vect(
geom = c("UTMX", "UTMY"),
crs = mycrs,
keepgeom = TRUE
)
SINKS <- dir_obs_proc %>%
paste0(., "SINKS.csv") %>%
read.table(
header = TRUE,
sep = ";",
) %>%
vect(
geom = c("UTMX", "UTMY"),
crs = mycrs,
keepgeom = TRUE
)
profiles_shp <- dir_dat %>%
paste0(
.,
"/observations/profiles/Profiles_coordinates_new/Profiles_coordinates_new.shp"
) %>%
vect()
forest_samples <- dir_obs_proc %>%
paste0(., "forest_samples.csv") %>%
read.table(
header = TRUE,
sep = ";",
) %>%
vect(
geom = c("UTMX", "UTMY"),
crs = mycrs,
keepgeom = TRUE
)
# 2 Load covariates
cov_dir <- dir_dat %>% paste0(., "/covariates")
cov_files <- cov_dir %>% list.files()
cov_names <- cov_files %>% tools::file_path_sans_ext()
cov <- paste0(cov_dir, "/", cov_files) %>%
rast()
names(cov) <- cov_names
crs(cov) <- mycrs
# 3 Create buffers (40 m = ~ 0.5 ha)
buffer_dsc <- terra::buffer(
dsc,
width = 40
) %>%
st_as_sf()
buffer_SEGES <- terra::buffer(
SEGES,
width = 40
) %>%
st_as_sf()
# 4 Extract
dsc_extr <- terra::extract(
x = cov,
y = dsc,
ID = FALSE,
)
# buffer_dsc_extr <- exact_extract(
#     x = cov,
#     y = buffer_dsc,
#     fun = "mean",
#     progress = TRUE
#   )
# names(buffer_dsc_extr) <- names(cov)
SEGES_extr <- terra::extract(
x = cov,
y = SEGES,
ID = FALSE,
)
# buffer_SEGES_extr <- exact_extract(
#   x = cov,
#   y = buffer_SEGES,
#   fun = "mean",
#   progress = TRUE
# )
# names(buffer_SEGES_extr) <- names(cov)
SINKS_extr <- terra::extract(
x = cov,
y = SINKS,
ID = FALSE,
)
profiles_extr <- terra::extract(
x = cov,
y = profiles_shp,
ID = FALSE,
)
profiles_extr$PROFILNR <- profiles_shp$PROFILNR
forests_extr <- terra::extract(
x = cov,
y = forest_samples,
ID = FALSE,
)
# 5 Write to csv
dir_extr <- dir_dat %>%
paste0(., "/extracts/")
write.table(
dsc_extr,
paste0(dir_extr, "dsc_extr.csv"),
row.names = FALSE,
sep = ";"
)
# write.table(
#   buffer_dsc_extr,
#   paste0(dir_extr, "buffer_dsc_extr.csv"),
#   row.names = FALSE,
#   sep = ";"
# )
write.table(
SEGES_extr,
paste0(dir_extr, "SEGES_extr.csv"),
row.names = FALSE,
sep = ";"
)
# write.table(
#   buffer_SEGES_extr,
#   paste0(dir_extr, "buffer_SEGES_extr.csv"),
#   row.names = FALSE,
#   sep = ";"
# )
write.table(
SINKS_extr,
paste0(dir_extr, "SINKS_extr.csv"),
row.names = FALSE,
sep = ";"
)
write.table(
profiles_extr,
paste0(dir_extr, "profiles_extr.csv"),
row.names = FALSE,
sep = ";"
)
write.table(
forests_extr,
paste0(dir_extr, "forests_extr.csv"),
row.names = FALSE,
sep = ";"
)
# Save as RDS
saveRDS(
dsc_extr,
paste0(dir_extr, "dsc_extr.rds")
)
saveRDS(
SEGES_extr,
paste0(dir_extr, "SEGES_extr.rds")
)
saveRDS(
SINKS_extr,
paste0(dir_extr, "SINKS_extr.rds")
)
saveRDS(
profiles_extr,
paste0(dir_extr, "profiles_extr.rds")
)
saveRDS(
forests_extr,
paste0(dir_extr, "forests_extr.rds")
)
# END
