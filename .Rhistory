}
# Calculate soil class
source("f_classify_soil_JB.R")
maps_10km_jb <- lapply(
1:nrow(maps_raw_paths),
function(x) {
maps_loaded <- paste0(
predfolder,
maps_raw_paths$SOM_removal[x],
"/depth_", maps_raw_paths$interval[x], "/sum/") %>%
list.files(full.names = TRUE) %>%
rast()
maps_forclass <- c(
maps_loaded[[1]],
maps_loaded[[2]],
maps_loaded[[3]],
maps_loaded[[5]] / 0.568,
maps_loaded[[6]]
)
names(maps_forclass) <- c("clay", "silt", "sand_f", "SOM", "CaCO3")
out <- lapp(maps_forclass, classify_soil_JB)
return(out)
}
) %>%
rast()
levels(maps_10km_jb) <- rep(
list(
data.frame(
id = 1:12,
Class = paste0("JB", 1:12)
)
),
nlyr(maps_10km_jb)
)
maps_10km_jb_list <- list()
maps_10km_jb_list$SOM_remov <- subset(maps_10km_jb, c(5:8))
maps_10km_jb_list$SOM_norem <- subset(maps_10km_jb, c(1:4))
jb_lyrnames <- paste0("JB class, ", uppers, " - ", lowers, " cm")
names(maps_10km_jb_list$SOM_norem) <- jb_lyrnames
names(maps_10km_jb_list$SOM_remov) <- jb_lyrnames
# Load maps into a list
maps_10_km <- lapply(
c("SOM_remov", "SOM_norem"),
function(x) {
out <- list()
for (i in 1:length(fractions)) {
out[[i]] <- c(1:4) %>%
paste0(
predfolder, "/", x,
"/depth_", .,
"/sum/frc", i, "_", fractions[i],
".tif"
) %>%
rast()
names(out[[i]]) <- paste0(
fraction_names[i], ", ", uppers, " - ", lowers, " cm"
)
}
return(out)
}
)
names(maps_10_km) <- c("SOM_remov", "SOM_norem")
# Figures for 10 km maps
library(viridisLite)
library(tidyterra)
# Plot texture fractions with and without SOM removal
somrem_names <- c("SOM_remov", "SOM_norem")
try(dev.off())
for (i in 1:length(somrem_names)) {
lapply(1:4, function(x) {
fname <- paste0(
dir_results, "/",
fractions[x],
"_", somrem_names[i],
"_10km_test",
testn, ".tiff"
)
myplot <- autoplot(maps_10_km[[i]][[x]]) +
scale_fill_gradientn(colours = viridis(100), na.value = NA)
tiff(
fname,
width = 16,
height = 14,
units = "cm",
res = 300
)
print(myplot)
try(dev.off())
try(dev.off())
})
}
# Plot SOC and CaCO3 only once
try(dev.off())
lapply(5:6, function(x) {
fname <- paste0(dir_results, "/", fractions[x], "_10km_test", testn, ".tiff")
myplot <- autoplot(maps_10_km[[1]][[x]]) +
scale_fill_gradientn(colours = viridis(100), na.value = NA)
tiff(
fname,
width = 16,
height = 14,
units = "cm",
res = 300
)
print(myplot)
try(dev.off())
try(dev.off())
})
# Plot soil class (JBNR)
myrgb <- col2rgb(mycolors)
tsp <- as.TSP(dist(t(myrgb)))
set.seed(1)
sol <- solve_TSP(tsp, control = list(repetitions = 1e3))
ordered_cols <- mycolors[sol]
classes_in_maps <- values(maps_10km_jb) %>%
unlist() %>%
matrix(ncol = 1) %>%
unique() %>%
sort()
cols_in_maps <- ordered_cols[classes_in_maps]
plot_jb <- lapply(
maps_10km_jb_list,
function(x) {
out <- autoplot(x) +
scale_fill_discrete(type = cols_in_maps)
return(out)
}
)
for (i in 1:2) {
tiff(
paste0(dir_results, "/JB_", somrem_names[i],"_test_", testn, ".tiff"),
width = 16,
height = 14,
units = "cm",
res = 300
)
print(plot_jb[[i]])
try(dev.off())
}
# Plot effects of SOM removal
clay_SOM_rem <- c(maps_10_km[[1]][[1]][[1]], maps_10_km[[2]][[1]][[1]])
names(clay_SOM_rem) <- c("SOM removed", "No SOM removal")
tiff(
paste0(dir_results, "/clay_SOM_rem_test_", testn, ".tiff"),
width = 16,
height = 10,
units = "cm",
res = 300
)
autoplot(clay_SOM_rem) +
scale_fill_gradientn(colours = viridis(100), na.value = NA) +
ggtitle("Clay (%), 0 - 30 cm depth") +
theme(plot.title = element_text(hjust = 0.5))
try(dev.off())
clay_difference <- maps_10_km[[1]][[1]][[1]] - maps_10_km[[2]][[1]][[1]]
names(clay_difference) <- "Clay (%) difference"
tiff(
paste0(dir_results, "/clay_difference_test_", testn, ".tiff"),
width = 16,
height = 10,
units = "cm",
res = 300
)
autoplot(clay_difference) +
scale_fill_gradientn(colours = viridis(100), na.value = NA) +
ggtitle("Effect of SOM removal, clay (%) difference") +
theme(plot.title = element_text(hjust = 0.5))
try(dev.off())
JB_SOM_rem <- c(maps_10km_jb_list[[1]][[1]], maps_10km_jb_list[[2]][[1]])
names(JB_SOM_rem) <- c("SOM removed", "No SOM removal")
tiff(
paste0(dir_results, "/JB_SOM_rem_test_", testn, ".tiff"),
width = 16,
height = 10,
units = "cm",
res = 300
)
autoplot(JB_SOM_rem) +
scale_fill_discrete(type = cols_in_maps) +
ggtitle("JB, 0 - 30 cm depth") +
theme(plot.title = element_text(hjust = 0.5))
try(dev.off())
set.seed(1)
tiff(
paste0(dir_results, "/SOM_rem_map_cor_test_", testn, ".tiff"),
width = 16,
height = 10,
units = "cm",
res = 300
)
c(maps_10_km[[1]][[5]][[1]], clay_difference) %>%
spatSample(100000) %>%
rename(
soc = 1,
clay_dif = 2
) %>%
ggplot(aes(x = soc, y = clay_dif)) +
geom_point(alpha = 0.01, shape = 21, col = "black", bg = "black") +
geom_smooth() +
scale_x_log10() +
xlab("SOC (%)") +
ylab("Clay (%) difference")
try(dev.off())
# Write observations to table
write.table(
obs,
paste0(dir_results, "observations_texture.csv"),
row.names = FALSE,
col.names = TRUE,
sep = ","
)
# END
l
l %>% as.data.frame()
l$covariate
imp_all
imp_all %>% as.data.frame()
imp_all %>%
select(-mean_imp) %>%
pivot_longer(
cols = -covariate,
names_to = "target",
values_to = "Overall"
) %>%
filter(!(covariate %in% grep('ogc_pi', colnames(obs), value = TRUE)))
imp_all %>%
select(-mean_imp) %>%
pivot_longer(
cols = -covariate,
names_to = "target",
values_to = "Overall"
) %>%
filter(!(covariate %in% grep('ogc_pi', colnames(obs), value = TRUE))) %>% as.data.frame()
imp_all %>%
filter(!(covariate %in% grep('ogc_pi', colnames(obs), value = TRUE)))
imp_all %>%
filter(!(covariate %in% grep('ogc_pi', colnames(obs), value = TRUE))) %>% as.data.frame()
imp_all %>%
filter(!(covariate %in% grep('ogc_pi', colnames(obs), value = TRUE))) %>% arrange (clay)%>% as.data.frame()
imp_all %>%
filter(!(covariate %in% grep('ogc_pi', colnames(obs), value = TRUE))) %>% arrange (-clay)%>% as.data.frame()
cov_cats
l
l$covariate
imp_all %>%
select(-mean_imp) %>%
pivot_longer(
cols = -covariate,
names_to = "target",
values_to = "Overall"
) %>%
filter(!(covariate %in% grep('ogc_pi', colnames(obs), value = TRUE)))
imp_all %>%
select(-mean_imp) %>%
pivot_longer(
cols = -covariate,
names_to = "target",
values_to = "Overall"
) %>%
filter(!(covariate %in% grep('ogc_pi', colnames(obs), value = TRUE))) %>% .$covariate
imp_all %>%
select(-mean_imp) %>%
pivot_longer(
cols = -covariate,
names_to = "target",
values_to = "Overall"
) %>%
filter(!(covariate %in% grep('ogc_pi', colnames(obs), value = TRUE))) %>%
group_by(target) %>%
mutate(Overall = Overall*100/max(Overall))
imp_all %>%
select(-mean_imp) %>%
pivot_longer(
cols = -covariate,
names_to = "target",
values_to = "Overall"
) %>%
filter(!(covariate %in% grep('ogc_pi', colnames(obs), value = TRUE))) %>%
group_by(target) %>%
mutate(Overall = Overall*100/max(Overall)) %>% as.data.frame()
imp_all %>%
select(-mean_imp) %>%
pivot_longer(
cols = -covariate,
names_to = "target",
values_to = "Overall"
) %>%
filter(!(covariate %in% grep('ogc_pi', colnames(obs), value = TRUE))) %>%
group_by(target) %>%
mutate(Overall = Overall*100/max(Overall)) %>% arrange(-Overall)
imp_all %>%
select(-mean_imp) %>%
pivot_longer(
cols = -covariate,
names_to = "target",
values_to = "Overall"
) %>%
filter(!(covariate %in% grep('ogc_pi', colnames(obs), value = TRUE))) %>%
group_by(target) %>%
mutate(Overall = Overall*100/max(Overall)) %>% arrange(-Overall) %>% as.data.frame()
imp_all %>%
select(-mean_imp) %>%
pivot_longer(
cols = -covariate,
names_to = "target",
values_to = "Overall"
) %>%
filter(!(covariate %in% grep('ogc_pi', colnames(obs), value = TRUE))) %>%
group_by(target) %>%
mutate(Overall = Overall*100/max(Overall)) %>% arrange(-Overall) %>%
slice_head(n = ntop)%>% as.data.frame()
l <- imp_all %>%
select(-mean_imp) %>%
pivot_longer(
cols = -covariate,
names_to = "target",
values_to = "Overall"
) %>%
filter(!(covariate %in% grep('ogc_pi', colnames(obs), value = TRUE))) %>%
group_by(target) %>%
mutate(Overall = Overall*100/max(Overall)) %>%
arrange(-Overall) %>%
slice_head(n = ntop) %>%
arrange(-Overall) %>%
mutate(
target = factor(
target,
levels = fractions
)
)
l_cat <- cov_cats %>%
mutate(
covariate = name,
category = case_when(
category == "basic" ~ scorpan,
category == "WATEM" ~ "OR",
category == "sentinel_composite" ~ "S2 time series",
category == "bare_soil" ~ "Bare soil",
.default = "Other"
)
)
l %<>%
left_join(l_cat)
l %<>%
ungroup() %>%
arrange(target, Overall) %>%
mutate(order = row_number())
l %<>% mutate(
category = case_when(
covariate == "upper" ~ "Depth",
covariate == "lower" ~ "Depth",
covariate == "year" ~ "Time",
category == "N" ~ "Spatial position",
category == "R" ~ "Topography",
category == "C" ~ "Climate",
category == "C " ~ "Climate",
category == "P" ~ "Parent materials",
category == "S" ~ "Soil",
category == "SO" ~ "Soil and organisms",
category == "CR" ~ "Climate and topography",
category == "OR" ~ "Organisms and topography",
category == "O" ~ "Organisms",
category == "RP" ~ "Topography and parent materials",
.default = category
)
)
l$category %<>% as.factor()
catcolors <- l$category %>%
levels() %>%
length() %>%
carto_pal(., "Safe")
names(catcolors) <- levels(l$category)
colScale <- scale_fill_manual(name = "category", values = catcolors)
# Plot covariate importance
tiff(
paste0(dir_results, "/importance_test", testn, ".tiff"),
width = 40,
height = 20,
units = "cm",
res = 300
)
l %>%
ggplot(aes(x = order, y = Overall, bg = category)) +
geom_col() +
facet_wrap(
~target,
ncol = 3,
scales = "free"
) +
# xlim(1, ntop) +
ylim(0, NA) +
coord_flip() +
scale_x_continuous(
breaks = l$order,
labels = l$covariate,
expand = c(0, 0)
) +
colScale
try(dev.off())
cov_cats
l$desc_text
grep("bare soil", l$desc_text, value = TRUE)
grep("bare soil", cov_cats$desc_text, value = TRUE)
grep("bare soil", cov_cats$desc_text)
?grep
l <- list()
ntop <- 20
# for (i in 1:length(models))
# {
#   l[[i]] <- varImp(models[[i]])$importance %>%
#     as_tibble(rownames = "covariate") %>%
#     drop_na() %>%
#     arrange(-Overall) %>%
#     slice_head(n = ntop) %>%
#     mutate(target = fractions[i]) %>%
#     rowid_to_column("rank")
# }
#
# l %<>% bind_rows()
l <- imp_all %>%
select(-mean_imp) %>%
pivot_longer(
cols = -covariate,
names_to = "target",
values_to = "Overall"
) %>%
filter(!(covariate %in% grep('ogc_pi', colnames(obs), value = TRUE))) %>%
group_by(target) %>%
mutate(Overall = Overall*100/max(Overall)) %>%
arrange(-Overall) %>%
slice_head(n = ntop) %>%
arrange(-Overall) %>%
mutate(
target = factor(
target,
levels = fractions
)
)
l_cat <- cov_cats %>%
mutate(
covariate = name,
category = case_when(
category == "basic" ~ scorpan,
category == "WATEM" ~ "OR",
category == "sentinel_composite" ~ "S2 time series",
category == "bare_soil" ~ "Bare soil",
desc_text %in% grep(
"bare soil",
cov_cats$desc_text,
value = TRUE
) ~ "Bare soil",
.default = "Other"
)
)
l %<>%
left_join(l_cat)
l %<>%
ungroup() %>%
arrange(target, Overall) %>%
mutate(order = row_number())
l %<>% mutate(
category = case_when(
covariate == "upper" ~ "Depth",
covariate == "lower" ~ "Depth",
covariate == "year" ~ "Time",
category == "N" ~ "Spatial position",
category == "R" ~ "Topography",
category == "C" ~ "Climate",
category == "C " ~ "Climate",
category == "P" ~ "Parent materials",
category == "S" ~ "Soil",
category == "SO" ~ "Soil and organisms",
category == "CR" ~ "Climate and topography",
category == "OR" ~ "Organisms and topography",
category == "O" ~ "Organisms",
category == "RP" ~ "Parent materials",
.default = category
)
)
l$category %<>% as.factor()
catcolors <- l$category %>%
levels() %>%
length() %>%
carto_pal(., "Safe")
names(catcolors) <- levels(l$category)
colScale <- scale_fill_manual(name = "category", values = catcolors)
# Plot covariate importance
tiff(
paste0(dir_results, "/importance_test", testn, ".tiff"),
width = 40,
height = 20,
units = "cm",
res = 300
)
l %>%
ggplot(aes(x = order, y = Overall, bg = category)) +
geom_col() +
facet_wrap(
~target,
ncol = 3,
scales = "free"
) +
# xlim(1, ntop) +
ylim(0, NA) +
coord_flip() +
scale_x_continuous(
breaks = l$order,
labels = l$covariate,
expand = c(0, 0)
) +
colScale
try(dev.off())
