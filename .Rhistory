SOM_removal = c("SOM_remov", "SOM_norem")
)
numCores <- 19
try(stopCluster(cl))
try(foreach::registerDoSEQ())
try(rm(cl))
showConnections()
cl <- makeCluster(numCores)
clusterEvalQ(
cl,
{
library(terra)
library(caret)
library(xgboost)
library(magrittr)
library(dplyr)
library(tools)
}
)
clusterExport(
cl,
c(
"uppers",
"lowers",
"map_spec",
"predfolder",
"dir_cov_10km",
# "models",
"cov_selected",
"predict_passna",
"dir_dat",
"fractions",
"dir_results"
)
)
parSapplyLB(
cl,
1:nrow(map_spec),
function(x) {
tmpfolder <- paste0(dir_dat, "/Temp/")
model_file <- fractions[map_spec$fraction_i[x]] %>%
paste0(dir_results, "/model_", ., ".rds")
model_x <- model_file %>% readRDS()
terraOptions(memfrac = 0.02, tempdir = tmpfolder)
cov_10km <- dir_cov_10km %>%
list.files(full.names = TRUE) %>%
rast() %>%
subset(cov_selected)
if (map_spec$fraction_i[x] %in% 1:4) {
outname <- predfolder %>%
paste0(
., "/", map_spec$SOM_removal[x],
"/depth_", map_spec$interval[x],
"/raw/frc",
map_spec$fraction_i[x], "_", fractions[map_spec$fraction_i[x]],
".tif"
)
} else {
outname <- predfolder %>%
paste0(
., "/", map_spec$SOM_removal[x],
"/depth_", map_spec$interval[x],
"/sum/frc",
map_spec$fraction_i[x], "_", fractions[map_spec$fraction_i[x]],
".tif"
)
}
somrem <- 0
if (map_spec$SOM_removal[x] == "SOM_remov") {
somrem <- 1
}
predict(
cov_10km,
model_x,
fun = predict_passna,
na.rm = FALSE,
const = data.frame(
SOM_removed = somrem,
# year = 2010,
upper = uppers[map_spec$interval[x]],
lower = lowers[map_spec$interval[x]]
),
n_const = 3,
n_digits = 1,
filename = outname,
overwrite = TRUE
)
return(NULL)
}
)
stopCluster(cl)
foreach::registerDoSEQ()
rm(cl)
# Standardize mineral sum to 100
maps_raw_paths <- expand_grid(
interval = 1:4,
SOM_removal = c("SOM_remov", "SOM_norem")
) %>%
arrange(SOM_removal)
for (i in 1:nrow(maps_raw_paths)) {
mineral_raw <- paste0(
predfolder,
maps_raw_paths$SOM_removal[i],
"/depth_", maps_raw_paths$interval[i], "/raw/") %>%
list.files(full.names = TRUE) %>%
rast()
mineral_sum_r <- mineral_raw %>% sum()
mineral_final <- mineral_raw*100 / mineral_sum_r
mineral_final %<>% round(., digits = 1)
for (j in 1:4) {
outname <- paste0(
predfolder,
maps_raw_paths$SOM_removal[i],
"/depth_", maps_raw_paths$interval[i],
"/sum/frc",
j, "_", fractions[j],
".tif"
)
writeRaster(
mineral_final[[j]],
filename = outname,
overwrite = TRUE
)
}
}
# Calculate soil class
source("f_classify_soil_JB.R")
maps_10km_jb <- lapply(
1:nrow(maps_raw_paths),
function(x) {
maps_loaded <- paste0(
predfolder,
maps_raw_paths$SOM_removal[x],
"/depth_", maps_raw_paths$interval[x], "/sum/") %>%
list.files(full.names = TRUE) %>%
rast()
maps_forclass <- c(
maps_loaded[[1]],
maps_loaded[[2]],
maps_loaded[[3]],
maps_loaded[[5]] / 0.568,
maps_loaded[[6]]
)
names(maps_forclass) <- c("clay", "silt", "sand_f", "SOM", "CaCO3")
out <- lapp(maps_forclass, classify_soil_JB)
return(out)
}
) %>%
rast()
levels(maps_10km_jb) <- rep(
list(
data.frame(
id = 1:12,
Class = paste0("JB", 1:12)
)
),
nlyr(maps_10km_jb)
)
maps_10km_jb_list <- list()
maps_10km_jb_list$SOM_remov <- subset(maps_10km_jb, c(5:8))
maps_10km_jb_list$SOM_norem <- subset(maps_10km_jb, c(1:4))
jb_lyrnames <- paste0("JB class, ", uppers, " - ", lowers, " cm")
names(maps_10km_jb_list$SOM_norem) <- jb_lyrnames
names(maps_10km_jb_list$SOM_remov) <- jb_lyrnames
# Load maps into a list
maps_10_km <- lapply(
c("SOM_remov", "SOM_norem"),
function(x) {
out <- list()
for (i in 1:length(fractions)) {
out[[i]] <- c(1:4) %>%
paste0(
predfolder, "/", x,
"/depth_", .,
"/sum/frc", i, "_", fractions[i],
".tif"
) %>%
rast()
names(out[[i]]) <- paste0(
fraction_names[i], ", ", uppers, " - ", lowers, " cm"
)
}
return(out)
}
)
names(maps_10_km) <- c("SOM_remov", "SOM_norem")
# Figures for 10 km maps
library(viridisLite)
library(tidyterra)
# Plot texture fractions with and without SOM removal
somrem_names <- c("SOM_remov", "SOM_norem")
try(dev.off())
for (i in 1:length(somrem_names)) {
lapply(1:4, function(x) {
fname <- paste0(
dir_results, "/",
fractions[x],
"_", somrem_names[i],
"_10km_test",
testn, ".tiff"
)
myplot <- autoplot(maps_10_km[[i]][[x]]) +
scale_fill_gradientn(colours = viridis(100), na.value = NA)
tiff(
fname,
width = 16,
height = 14,
units = "cm",
res = 300
)
print(myplot)
try(dev.off())
try(dev.off())
})
}
# Plot SOC and CaCO3 only once
try(dev.off())
lapply(5:6, function(x) {
fname <- paste0(dir_results, "/", fractions[x], "_10km_test", testn, ".tiff")
myplot <- autoplot(maps_10_km[[1]][[x]]) +
scale_fill_gradientn(colours = viridis(100), na.value = NA)
tiff(
fname,
width = 16,
height = 14,
units = "cm",
res = 300
)
print(myplot)
try(dev.off())
try(dev.off())
})
# Plot soil class (JBNR)
myrgb <- col2rgb(mycolors)
tsp <- as.TSP(dist(t(myrgb)))
set.seed(1)
sol <- solve_TSP(tsp, control = list(repetitions = 1e3))
ordered_cols <- mycolors[sol]
classes_in_maps <- values(maps_10km_jb) %>%
unlist() %>%
matrix(ncol = 1) %>%
unique() %>%
sort()
cols_in_maps <- ordered_cols[classes_in_maps]
plot_jb <- lapply(
maps_10km_jb_list,
function(x) {
out <- autoplot(x) +
scale_fill_discrete(type = cols_in_maps)
return(out)
}
)
for (i in 1:2) {
tiff(
paste0(dir_results, "/JB_", somrem_names[i],"_test_", testn, ".tiff"),
width = 16,
height = 14,
units = "cm",
res = 300
)
print(plot_jb[[i]])
try(dev.off())
}
# Plot effects of SOM removal
clay_SOM_rem <- c(maps_10_km[[1]][[1]][[1]], maps_10_km[[2]][[1]][[1]])
names(clay_SOM_rem) <- c("SOM removed", "No SOM removal")
tiff(
paste0(dir_results, "/clay_SOM_rem_test_", testn, ".tiff"),
width = 16,
height = 10,
units = "cm",
res = 300
)
autoplot(clay_SOM_rem) +
scale_fill_gradientn(colours = viridis(100), na.value = NA) +
ggtitle("Clay (%), 0 - 30 cm depth") +
theme(plot.title = element_text(hjust = 0.5))
try(dev.off())
clay_difference <- maps_10_km[[1]][[1]][[1]] - maps_10_km[[2]][[1]][[1]]
names(clay_difference) <- "Clay (%) difference"
tiff(
paste0(dir_results, "/clay_difference_test_", testn, ".tiff"),
width = 16,
height = 10,
units = "cm",
res = 300
)
autoplot(clay_difference) +
scale_fill_gradientn(colours = viridis(100), na.value = NA) +
ggtitle("Effect of SOM removal, clay (%) difference") +
theme(plot.title = element_text(hjust = 0.5))
try(dev.off())
JB_SOM_rem <- c(maps_10km_jb_list[[1]][[1]], maps_10km_jb_list[[2]][[1]])
names(JB_SOM_rem) <- c("SOM removed", "No SOM removal")
tiff(
paste0(dir_results, "/JB_SOM_rem_test_", testn, ".tiff"),
width = 16,
height = 10,
units = "cm",
res = 300
)
autoplot(JB_SOM_rem) +
scale_fill_discrete(type = cols_in_maps) +
ggtitle("JB, 0 - 30 cm depth") +
theme(plot.title = element_text(hjust = 0.5))
try(dev.off())
set.seed(1)
tiff(
paste0(dir_results, "/SOM_rem_map_cor_test_", testn, ".tiff"),
width = 16,
height = 10,
units = "cm",
res = 300
)
c(maps_10_km[[1]][[5]][[1]], clay_difference) %>%
spatSample(100000) %>%
rename(
soc = 1,
clay_dif = 2
) %>%
ggplot(aes(x = soc, y = clay_dif)) +
geom_point(alpha = 0.01, shape = 21, col = "black", bg = "black") +
geom_smooth() +
scale_x_log10() +
xlab("SOC (%)") +
ylab("Clay (%) difference")
try(dev.off())
# END
# 08: Script for making maps
library(parallel)
library(caret)
library(terra)
library(magrittr)
library(dplyr)
library(xgboost)
library(foreach)
library(stringr)
dir_code <- getwd()
root <- dirname(dir_code)
dir_dat <- paste0(root, "/digijord_data/")
testn <- 14
mycrs <- "EPSG:25832"
dir_results <- dir_dat %>%
paste0(., "/results_test_", testn, "/")
# fractions <- c("clay", "silt", "fine_sand", "coarse_sand", "logSOC", "logCaCO3")
fractions_alt <- c("clay", "silt", "fine_sand", "coarse_sand", "SOC", "CaCO3")
fractions <- fractions_alt
fraction_names <- c(
"Clay", "Silt", "Fine sand", "Coarse sand", "SOC", "CaCO3"
)
fraction_names_underscore <- c(
"Clay", "Silt", "Fine_sand", "Coarse_sand", "SOC", "CaCO3"
)
dir_cov <- dir_dat %>% paste0(., "/covariates")
cov_files <- dir_cov %>% list.files()
cov_names <- cov_files %>% tools::file_path_sans_ext()
cov_cats <- dir_code %>%
paste0(., "/cov_categories_20230712.csv") %>%
read.table(
sep = ";",
header = TRUE
)
# cov_selected <- cov_cats %>%
#   filter(anbm_use == 1) %>%
#   dplyr::select(., name) %>%
#   unlist() %>%
#   unname()
source("f_predict_passna.R")
# Load models
models_loaded <- lapply(
1:length(fractions),
function(x) {
out <- fractions[x] %>%
paste0(dir_results, "/model_", ., ".rds") %>%
readRDS()
return(out)
}
)
models <- models_loaded
# Tiles for model prediction
numCores <- detectCores()
numCores
dir_tiles <- dir_dat %>%
paste0(., "/tiles_591/")
subdir_tiles <- dir_tiles %>%
list.dirs() %>%
.[-1]
dir_pred_all <- dir_results %>%
paste0(., "/predictions/") %T>%
dir.create(showWarnings = FALSE, recursive = TRUE)
dir_pred_tiles <- dir_pred_all %>%
paste0(., "/tiles/") %T>%
dir.create(showWarnings = FALSE, recursive = TRUE)
n_digits <- 1
breaks <- c(0, 30, 60, 100, 200)
max_char <- breaks %>%
as.character() %>%
nchar() %>%
max()
breaks_chr <- breaks %>%
str_pad(
.,
max_char,
pad = "0"
)
# First predict SOC and CaCO3, as they do not require any additional processing
SOC_CaCO3_depth_grid <- expand.grid(
frac_ind = 5:6,
depth_ind = 1:(length(breaks) - 1)
)
for (k in 1:nrow(SOC_CaCO3_depth_grid)) {
i <- SOC_CaCO3_depth_grid$frac_ind[k]
j <- SOC_CaCO3_depth_grid$depth_ind[k]
frac <- fraction_names_underscore[i]
breaks_j <- breaks[j:(j + 1)]
breaks_j_chr <- breaks_chr[j:(j + 1)]
dir_pred_tiles_frac <- dir_pred_tiles %>%
paste0(
., "/", frac, "_", breaks_j_chr[1], "_", breaks_j_chr[2], "_cm/"
) %T>%
dir.create(showWarnings = FALSE, recursive = TRUE)
model_i <- models[[i]]
cov_selected <- (varImp(model_i)$importance %>% row.names()) %>%
.[. %in% cov_cats$name]
showConnections()
cl <- makeCluster(numCores)
clusterEvalQ(
cl,
{
library(terra)
library(caret)
library(xgboost)
library(magrittr)
library(dplyr)
library(tools)
}
)
clusterExport(
cl,
c(
"i",
"model_i",
"subdir_tiles",
"dir_pred_tiles_frac",
"frac",
"cov_selected",
"predict_passna",
"dir_dat",
"n_digits",
"breaks_j",
"breaks_j_chr"
)
)
parSapplyLB(
cl,
1:length(subdir_tiles),
function(x) {
tmpfolder <- paste0(dir_dat, "/Temp/")
terraOptions(memfrac = 0.02, tempdir = tmpfolder)
cov_x_files <- subdir_tiles[x] %>%
list.files(full.names = TRUE)
cov_x_names <- cov_x_files %>%
basename() %>%
file_path_sans_ext()
cov_x <- cov_x_files %>% rast()
names(cov_x) <- cov_x_names
cov_x2 <- subset(cov_x, cov_selected)
tilename_x <- basename(subdir_tiles[x])
outname_x <- dir_pred_tiles_frac %>%
paste0(
., "/", frac, "_",
breaks_j_chr[1], "_", breaks_j_chr[2], "_cm_",
tilename_x, ".tif"
)
predict(
cov_x2,
model_i,
fun = predict_passna,
na.rm = FALSE,
const = data.frame(
# SOM_removed = 1,
# year = 2010,
upper = breaks_j[1],
lower = breaks_j[2]
),
n_const = 2,
n_digits = 1,
filename = outname_x,
overwrite = TRUE
)
return(NULL)
}
)
stopCluster(cl)
foreach::registerDoSEQ()
rm(cl)
outtiles_frac <- dir_pred_tiles_frac %>%
list.files(full.names = TRUE) %>%
sprc()
merge(
outtiles_frac,
filename = paste0(
dir_pred_all, frac, "_",
breaks_j_chr[1], "_", breaks_j_chr[2], "_cm.tif"),
overwrite = TRUE,
gdal = "TILED=YES",
names = paste0(
frac, "_", breaks_j_chr[1], "_", breaks_j_chr[2], "_cm"
)
)
}
cov_selected
