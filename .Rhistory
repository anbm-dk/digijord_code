filter(!is.na(s2_geomedian_b2)) %$%
cor(pred, obs)^2
r2_covered <- df %>%
filter(is.na(s2_geomedian_b2)) %$%
cor(pred, obs)^2
rmse_all <- df %$% RMSE(pred, obs)
rmse_bare <- df %>%
filter(!is.na(s2_geomedian_b2)) %$%
RMSE(pred, obs)
rmse_covered <- df %>%
filter(is.na(s2_geomedian_b2)) %$%
RMSE(pred, obs)
out <- data.frame(
r2_all,
r2_bare,
r2_covered,
rmse_all,
rmse_bare,
rmse_covered
)
return(out)
}
acc_all <- foreach(i = 1:6, .combine = rbind) %do%
get_acc(models[[i]], i)
R2w
get_acc <- function(x2, i2) {
df <- x2$pred %>%
arrange(rowIndex) %>%
distinct(rowIndex, .keep_all = TRUE) %>%
select(c(pred, obs, weights))
if (i2 > 4) df %<>% exp
df %<>% bind_cols(x2$trainingData)
r2_all <- df %$% R2w(cbind(pred, obs), weights)
r2_bare <- df %>%
filter(!is.na(s2_geomedian_b2)) %$%
cor(pred, obs)^2
r2_covered <- df %>%
filter(is.na(s2_geomedian_b2)) %$%
cor(pred, obs)^2
rmse_all <- df %$% RMSE(pred, obs)
rmse_bare <- df %>%
filter(!is.na(s2_geomedian_b2)) %$%
RMSE(pred, obs)
rmse_covered <- df %>%
filter(is.na(s2_geomedian_b2)) %$%
RMSE(pred, obs)
out <- data.frame(
r2_all,
r2_bare,
r2_covered,
rmse_all,
rmse_bare,
rmse_covered
)
return(out)
}
acc_all <- foreach(i = 1:6, .combine = rbind) %do%
get_acc(models[[i]], i)
RMSEw()
RMSEw
get_acc <- function(x2, i2) {
df <- x2$pred %>%
arrange(rowIndex) %>%
distinct(rowIndex, .keep_all = TRUE) %>%
select(c(pred, obs, weights))
if (i2 > 4) df %<>% exp
df %<>% bind_cols(x2$trainingData)
r2_all <- df %$% R2w(cbind(pred, obs), weights)
r2_bare <- df %>%
filter(!is.na(s2_geomedian_b2)) %$%
R2w(cbind(pred, obs), weights)
r2_covered <- df %>%
filter(is.na(s2_geomedian_b2)) %$%
R2w(cbind(pred, obs), weights)
rmse_all <- df %$% RMSEw(cbind(pred, obs), weights)
rmse_bare <- df %>%
filter(!is.na(s2_geomedian_b2)) %$%
RMSEw(cbind(pred, obs), weights)
rmse_covered <- df %>%
filter(is.na(s2_geomedian_b2)) %$%
RMSEw(cbind(pred, obs), weights)
out <- data.frame(
r2_all,
r2_bare,
r2_covered,
rmse_all,
rmse_bare,
rmse_covered
)
return(out)
}
acc_all <- foreach(i = 1:6, .combine = rbind) %do%
get_acc(models[[i]], i)
acc_all %<>% mutate(fraction = fractions, .before = 1)
acc_all
library(viridisLite)
maps_10km_stack <- maps_10km %>% rast
plot(maps_10km_stack, col = cividis(100))
maps_10km_stack2 <- c(
maps_10km_stack[[1:4]],
exp(maps_10km_stack[[5]]),
exp(maps_10km_stack[[6]])
)
names(maps_10km_stack2) <- c(
"Clay", "Silt", "Fine sand", "Coarse sand", "SOM", "CaCO3"
)
plot(maps_10km_stack2, col = cividis(100))
JB <- function(clay, silt, sand_f, SOM, CaCO3)
{
out<-rep(0,length(clay))
out[CaCO3 > 10] <- 12
out[out == 0 & SOM > 10] <- 11
out[out == 0 & clay < 5 & silt < 20 & sand_f < 50] <- 1
out[out == 0 & clay < 5 & silt < 20] <- 2
out[out == 0 & clay < 10 & silt < 25 & sand_f < 40] <- 3
out[out == 0 & clay < 10 & silt < 25]<-4
out[out == 0 & clay < 15 & silt < 30 & sand_f < 40] <- 5
out[out == 0 & clay < 15 & silt < 30] <- 6
out[out == 0 & clay < 25 & silt < 35] <- 7
out[out == 0 & clay < 45 & silt < 45] <- 8
out[out == 0 & silt < 50] <- 9
out[out == 0] <- 10
return(out)
}
maps_10km_s2 <- c(maps_10km[[1]], maps_10km[[2]], maps_10km[[3]], exp(maps_10km[[5]]), exp(maps_10km[[6]])/0.568)
maps_10km_jb <- lapp(maps_10km_s2, JB) %>% as.factor()
library(colorRamps)
# allcol <- expand.grid(
#   r = seq.int(0, 1, length.out = 7),
#   g = seq.int(0, 1, length.out = 7),
#   b = seq.int(0, 1, length.out = 7)
# )
#
# ncenters <- 12
# set.seed(1)
# mycolors_df <- kmeans(allcol, ncenters)$centers %>%
#   as.data.frame() %>%
#   mutate(sumall = r + g + b) %>%
#   arrange(-sumall)
# mycolors <- rgb(
#   r = mycolors_df[, 1],
#   g = mycolors_df[, 2],
#   b = mycolors_df[, 3],
#   )
library(rcartocolor) # for colorblind palette
mycolors <- carto_pal(12, "Safe") %>% sort()
library(TSP)
myrgb <- col2rgb(mycolors)
tsp <- as.TSP(dist(t(myrgb)))
set.seed(1)
sol <- solve_TSP(tsp, control = list(repetitions = 1e3))
ordered_cols <- mycolors[sol]
ggplot2::qplot(x = 1:12, y = 1, fill = I(ordered_cols), geom = "col", width = 1) + ggplot2::theme_void()
tiff(
paste0("JB_test", testn, "4.tiff"),
width = 15,
height = 10,
units = "cm",
res = 300
)
plot(
maps_10km_jb,
col = ordered_cols[levels(maps_10km_jb)[[1]]$ID],
main = "JB-nummer"
)
dev.off()
dev.off()
maps_10km_s2 <- c(maps_10km[[1]], maps_10km[[2]], maps_10km[[3]], exp(maps_10km[[5]])/0.568, exp(maps_10km[[6]]))
maps_10km_jb <- lapp(maps_10km_s2, JB) %>% as.factor()
library(colorRamps)
# allcol <- expand.grid(
#   r = seq.int(0, 1, length.out = 7),
#   g = seq.int(0, 1, length.out = 7),
#   b = seq.int(0, 1, length.out = 7)
# )
#
# ncenters <- 12
# set.seed(1)
# mycolors_df <- kmeans(allcol, ncenters)$centers %>%
#   as.data.frame() %>%
#   mutate(sumall = r + g + b) %>%
#   arrange(-sumall)
# mycolors <- rgb(
#   r = mycolors_df[, 1],
#   g = mycolors_df[, 2],
#   b = mycolors_df[, 3],
#   )
library(rcartocolor) # for colorblind palette
mycolors <- carto_pal(12, "Safe") %>% sort()
library(TSP)
myrgb <- col2rgb(mycolors)
tsp <- as.TSP(dist(t(myrgb)))
set.seed(1)
sol <- solve_TSP(tsp, control = list(repetitions = 1e3))
ordered_cols <- mycolors[sol]
ggplot2::qplot(x = 1:12, y = 1, fill = I(ordered_cols), geom = "col", width = 1) + ggplot2::theme_void()
tiff(
paste0("JB_test", testn, "4.tiff"),
width = 15,
height = 10,
units = "cm",
res = 300
)
plot(
maps_10km_jb,
col = ordered_cols[levels(maps_10km_jb)[[1]]$ID],
main = "JB-nummer"
)
dev.off()
dev.off()
ggplot2::qplot(x = 1:12, y = 1, fill = I(ordered_cols), geom = "col", width = 1) + ggplot2::theme_void()
JB <- function(clay, silt, sand_f, SOM, CaCO3)
{
out <- rep(0, length(clay))
out[CaCO3 > 10] <- 12
out[out == 0 & SOM > 10] <- 11
out[out == 0 & clay < 5 & silt < 20 & sand_f < 50] <- 1
out[out == 0 & clay < 5 & silt < 20] <- 2
out[out == 0 & clay < 10 & silt < 25 & sand_f < 40] <- 3
out[out == 0 & clay < 10 & silt < 25]<-4
out[out == 0 & clay < 15 & silt < 30 & sand_f < 40] <- 5
out[out == 0 & clay < 15 & silt < 30] <- 6
out[out == 0 & clay < 25 & silt < 35] <- 7
out[out == 0 & clay < 45 & silt < 45] <- 8
out[out == 0 & silt < 50] <- 9
out[out == 0] <- 10
return(out)
}
maps_10km_s2 <- c(maps_10km[[1]], maps_10km[[2]], maps_10km[[3]], exp(maps_10km[[5]])/0.568, exp(maps_10km[[6]]))
maps_10km_jb <- lapp(maps_10km_s2, JB) %>% as.factor()
library(colorRamps)
# allcol <- expand.grid(
#   r = seq.int(0, 1, length.out = 7),
#   g = seq.int(0, 1, length.out = 7),
#   b = seq.int(0, 1, length.out = 7)
# )
#
# ncenters <- 12
# set.seed(1)
# mycolors_df <- kmeans(allcol, ncenters)$centers %>%
#   as.data.frame() %>%
#   mutate(sumall = r + g + b) %>%
#   arrange(-sumall)
# mycolors <- rgb(
#   r = mycolors_df[, 1],
#   g = mycolors_df[, 2],
#   b = mycolors_df[, 3],
#   )
library(rcartocolor) # for colorblind palette
mycolors <- carto_pal(12, "Safe") %>% sort()
library(TSP)
myrgb <- col2rgb(mycolors)
tsp <- as.TSP(dist(t(myrgb)))
set.seed(1)
sol <- solve_TSP(tsp, control = list(repetitions = 1e3))
ordered_cols <- mycolors[sol]
ggplot2::qplot(x = 1:12, y = 1, fill = I(ordered_cols), geom = "col", width = 1) + ggplot2::theme_void()
tiff(
paste0("JB_test", testn, ".tiff"),
width = 15,
height = 10,
units = "cm",
res = 300
)
plot(
maps_10km_jb,
col = ordered_cols[levels(maps_10km_jb)[[1]]$ID],
main = "JB-nummer"
)
dev.off()
dev.off()
getpred <- function(x2, i2) {
df <- x2$pred %>%
arrange(rowIndex) %>%
distinct(rowIndex, .keep_all = TRUE)
select(c(pred, obs))
if (i2 > 4) df %<>% exp
df %<>% mutate(
fraction = fractions[i2],
upper = quantile(obs, 0.99)
) %>%
filter(obs < upper) %>%
filter(pred < upper) %>%
filter(obs >= 0)
return(df)
}
allpred <- foreach(i = 1:6, .combine=rbind) %do%
getpred(models[[i]], i)
getpred <- function(x2, i2) {
df <- x2$pred %>%
arrange(rowIndex) %>%
distinct(rowIndex, .keep_all = TRUE) %>%
select(c(pred, obs))
if (i2 > 4) df %<>% exp
df %<>% mutate(
fraction = fractions[i2],
upper = quantile(obs, 0.99)
) %>%
filter(obs < upper) %>%
filter(pred < upper) %>%
filter(obs >= 0)
return(df)
}
allpred <- foreach(i = 1:6, .combine=rbind) %do%
getpred(models[[i]], i)
allpred$fraction %<>% factor(levels = fractions)
levels(allpred$fraction) <- c(
"Clay", "Silt", "Fine sand", "Coarse sand", "SOM", "CaCO3"
)
tiff(
paste0(dir_results, "/accuracy_test", testn, ".tiff"),
width = 15,
height = 10,
units = "cm",
res = 300
)
allpred %>%
ggplot(aes(x = obs, y = pred)) +
geom_point(alpha = .01, shape = 16) +
facet_wrap(~ fraction, nrow = 2, scales = "free") +
theme(aspect.ratio = 1) +
scale_x_continuous(expand = c(0, 0)) +
scale_y_continuous(expand = c(0, 0)) +
geom_abline(col = "red") +
geom_blank(aes(y = upper)) +
geom_blank(aes(x = upper)) +
geom_blank(aes(y = 0)) +
geom_blank(aes(x = 0)) +
xlab("Observation (%)") +
ylab("Prediction (%)")
dev.off()
dev.off()
getpred <- function(x2, i2) {
df <- x2$pred %>%
arrange(rowIndex) %>%
distinct(rowIndex, .keep_all = TRUE) %>%
select(c(pred, obs))
if (i2 > 4) df %<>% exp
df %<>% mutate(
fraction = fractions[i2],
upper = quantile(obs, 0.99)
) %>%
filter(obs < upper) %>%
filter(pred < upper) %>%
filter(obs >= 0)
return(df)
}
allpred <- foreach(i = 1:6, .combine=rbind) %do%
getpred(models[[i]], i)
allpred$fraction %<>% factor(levels = fractions)
levels(allpred$fraction) <- c(
"Clay", "Silt", "Fine sand", "Coarse sand", "SOC", "CaCO3"
)
tiff(
paste0(dir_results, "/accuracy_test", testn, ".tiff"),
width = 15,
height = 10,
units = "cm",
res = 300
)
allpred %>%
ggplot(aes(x = obs, y = pred)) +
geom_point(alpha = .01, shape = 16) +
facet_wrap(~ fraction, nrow = 2, scales = "free") +
theme(aspect.ratio = 1) +
scale_x_continuous(expand = c(0, 0)) +
scale_y_continuous(expand = c(0, 0)) +
geom_abline(col = "red") +
geom_blank(aes(y = upper)) +
geom_blank(aes(x = upper)) +
geom_blank(aes(y = 0)) +
geom_blank(aes(x = 0)) +
xlab("Observation (%)") +
ylab("Prediction (%)")
dev.off()
dev.off()
acc_all
rownames(acc_all) <- c(
"Clay", "Silt", "Fine sand", "Coarse sand", "SOC", "CaCO3"
)
acc_all
fraction_names <- c(
"Clay", "Silt", "Fine sand", "Coarse sand", "SOC", "CaCO3"
)
acc_all <- foreach(i = 1:6, .combine = rbind) %do%
get_acc(models[[i]], i)
acc_all %<>% mutate(fraction = fraction_names, .before = 1)
write.table(
acc_all,
paste0(dir_results, "/acc_all", testn, ".csv"),
sep = ";",
rownames = FALSE
)
?write.table
write.table(
acc_all,
paste0(dir_results, "/acc_all", testn, ".csv"),
sep = ";",
row.names = FALSE
)
write.table(
acc_all,
paste0(dir_results, "/acc_all_test", testn, ".csv"),
sep = ";",
row.names = FALSE
)
library(viridisLite)
maps_10km_stack <- maps_10km %>% rast
plot(maps_10km_stack, col = cividis(100))
maps_10km_stack2 <- c(
maps_10km_stack[[1:4]],
exp(maps_10km_stack[[5]]),
exp(maps_10km_stack[[6]])
)
names(maps_10km_stack2) <- c(
"Clay", "Silt", "Fine sand", "Coarse sand", "SOM", "CaCO3"
)
tiff(
paste0(dir_results, "/maps_test", testn, ".tiff"),
width = 24,
height = 16,
units = "cm",
res = 300
)
plot(maps_10km_stack2, col = cividis(100))
dev.off()
dev.off()
JB <- function(clay, silt, sand_f, SOM, CaCO3)
{
out <- rep(0, length(clay))
out[CaCO3 > 10] <- 12
out[out == 0 & SOM > 10] <- 11
out[out == 0 & clay < 5 & silt < 20 & sand_f < 50] <- 1
out[out == 0 & clay < 5 & silt < 20] <- 2
out[out == 0 & clay < 10 & silt < 25 & sand_f < 40] <- 3
out[out == 0 & clay < 10 & silt < 25]<-4
out[out == 0 & clay < 15 & silt < 30 & sand_f < 40] <- 5
out[out == 0 & clay < 15 & silt < 30] <- 6
out[out == 0 & clay < 25 & silt < 35] <- 7
out[out == 0 & clay < 45 & silt < 45] <- 8
out[out == 0 & silt < 50] <- 9
out[out == 0] <- 10
return(out)
}
maps_10km_s2 <- c(maps_10km[[1]], maps_10km[[2]], maps_10km[[3]], exp(maps_10km[[5]])/0.568, exp(maps_10km[[6]]))
maps_10km_jb <- lapp(maps_10km_s2, JB) %>% as.factor()
library(colorRamps)
library(rcartocolor) # for colorblind palette
mycolors <- carto_pal(12, "Safe") %>% sort()
library(TSP)
myrgb <- col2rgb(mycolors)
tsp <- as.TSP(dist(t(myrgb)))
set.seed(1)
sol <- solve_TSP(tsp, control = list(repetitions = 1e3))
ordered_cols <- mycolors[sol]
ggplot2::qplot(x = 1:12, y = 1, fill = I(ordered_cols), geom = "col", width = 1) + ggplot2::theme_void()
tiff(
paste0(dir_results, "/JB_test", testn, ".tiff"),
width = 15,
height = 10,
units = "cm",
res = 300
)
plot(
maps_10km_jb,
col = ordered_cols[levels(maps_10km_jb)[[1]]$ID],
main = "JB-nummer"
)
dev.off()
dev.off()
plot(maps_10km_stack, col = cividis(100))
maps_10km_stack <- maps_10km %>% rast
plot(maps_10km_stack, col = cividis(100))
maps_10km_stack2 <- c(
maps_10km_stack[[1:4]],
exp(maps_10km_stack[[5]]),
exp(maps_10km_stack[[6]])
)
names(maps_10km_stack2) <- fraction_names
tiff(
paste0(dir_results, "/maps_test", testn, ".tiff"),
width = 24,
height = 16,
units = "cm",
res = 300
)
plot(maps_10km_stack2, col = cividis(100))
dev.off()
dev.off()
maps_10km_s2 <- c(maps_10km[[1]], maps_10km[[2]], maps_10km[[3]], exp(maps_10km[[5]])/0.568, exp(maps_10km[[6]]))
maps_10km_jb <- lapp(maps_10km_s2, JB) %>% as.factor()
maps_10km_jb
maps_10km_jb %>% plot()
levels(maps_10km_jb)
levels(maps_10km_jb) %>% str
plot(
maps_10km_jb,
col = ordered_cols[levels(maps_10km_jb)[[1]]$ID],
main = "JB-nummer"
)
cov_cats
?saveRDS
models_loaded <- lapply(
1:6,
function(x) {
out <- fractions[x] %>%
paste0(dir_results, "/model_", ., ".rds") %>%
readRDS()
return(out)
}
)
models_loaded
