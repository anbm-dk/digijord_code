# However, I will use the topsoil until the dataset has been fixed.
# Use pivot_longer to get a row for each sample.
SINKS_db <- dir_dat %>%
paste0(., "/observations/SINKS/SinksDatabase_V2.mdb")
con2 <- odbcConnectAccess2007(SINKS_db)
SINKS <- sqlFetch(con2, "bMHG_RODALTDETDUVIL_01JAN2011")
# 1.4: Profiles: Texture (not right now)
profiles_db <- dir_dat %>%
paste0(., "/observations/profiles/DDJD2023.accdb")
con3 <- odbcConnectAccess2007(profiles_db)
profiles_texture <- sqlFetch(con3, "ANALYSE")
# 1.5: Profiles: Water retention (later)
profiles_retention <-  sqlFetch(con3, "VANDRETENTION")
# 1.6: Profiles: Drainage (later)
# 1.7 Lucas database?
# 2: Data standardization
# 2.1: DSC
dsc_coords <- geom(dsc) %>%
as.data.frame() %>%
select(c(x, y))
dsc_oldcoords <- dsc %>%
values() %>%
select(c(UTMX, UTMY))
dsc2 <- dsc %>%
values() %>%
mutate(
across(
where(is.numeric),
function(x) replace(x, x == -1, NA))  # Remove negative texture fraction measurements
) %>%
bind_cols(dsc_coords) %>%
select(-c(UTMX, UTMY)) %>%
mutate(
db = "Danish Soil Classification",
UTMX = x,
UTMY = y,
ID_old = provenr,
date = paste0("19", Dato),
upper = DybFra,
lower = DybTil,
clay = Ler * 100 / (Ler + Silt + FinSD + GrovSD),
silt = Silt * 100 / (Ler + Silt + FinSD + GrovSD),
fine_sand = FinSD * 100 / (Ler + Silt + FinSD + GrovSD),
coarse_sand = GrovSD * 100 / (Ler + Silt + FinSD + GrovSD),
SOC = Humus*0.587,
SOM_removed = 0,
CaCO3_test = as.numeric(CaCO3 > 0)
) %>%
select(any_of(mycolnames))
# 2.2 SEGES
seges2 <- SEGES %>%
mutate(
db = "SEGES",
date = as.character(date),
ID_old = as.character(ID),
UTMX = UTME,
UTMY = UTMN,
upper = 0,
lower = 25,
tsum = LerPct + SiltPct + FinsandPct + GrovsandPct,
clay = case_when(
is.na(tsum) ~ LerPct,
!is.na(tsum) ~ LerPct*100 / tsum
),
silt = case_when(
is.na(tsum) ~ SiltPct,
!is.na(tsum) ~ SiltPct*100 / tsum
),
fine_sand = case_when(
is.na(tsum) ~ FinsandPct,
!is.na(tsum) ~ FinsandPct*100 / tsum
),
coarse_sand = case_when(
is.na(tsum) ~ GrovsandPct,
!is.na(tsum) ~ GrovsandPct*100 / tsum
),
SOM_removed = 1,
pH = Rt,
N = TotalNPct
) %>%
select(any_of(mycolnames))
# 2.3 SINKS
depths_A <- c("A1", "A2", "A3", "A4")
depths_S <- c("S1", "S2", "S3", "S4")
depths_D <- c("D1", "D2", "D3", "D4")
new_names <- stri_replace_all_fixed(
names(SINKS),
c(depths_A, depths_S),
c(depths_D, depths_D),
vectorize_all = FALSE
)
new_names <- stri_replace_all_fixed(
new_names,
"ID_DJF",
"IDDJF",
vectorize_all = FALSE
)
new_names <- stri_replace_all_fixed(new_names, "__", "_", vectorize_all = FALSE)
SINKS_newnames <- SINKS
names(SINKS_newnames) <- new_names
DX <- paste0(depths_D, "_")
D_cols <- depths_D %>%
paste(collapse = "|") %>%
grep(
names(SINKS_newnames),
value = TRUE
) %>%
unique() %>%
setdiff(DX)
newcols <- D_cols %>%
strsplit("_") %>%
unlist() %>%
unique() %>%
setdiff(depths_D)
sinks2 <- SINKS_newnames %>%
select(-any_of(DX)) %>%
pivot_longer(
all_of(D_cols),
names_to = c("depth", ".value"),
names_sep = "_"
)
rownas <- apply(sinks2, 1, function(x) sum(is.na(x)))
lapply(sinks2, function(x) sum(!is.na(x))) %>% unlist()
lapply(sinks2, function(x) length(unique(x))) %>% unlist()
sinks2 %>%
filter(!is.na(KunPro)) %>%
select(depth, PH, TOC1, TOC2, TOC3, NTotal)
# Field "KunPro" is the closest thing to a unique ID for each depth sample
sinks3 <- sinks2 %>%
filter(!is.na(KunPro))
sinks3 %>%
group_by(depth) %>%
summarise(
mean_TOC1 = mean(TOC1, na.rm = TRUE),
mean_TOC2 = mean(TOC2, na.rm = TRUE),
mean_TOC3 = mean(TOC3, na.rm = TRUE)
)
sinks3 %>% filter(!is.na(TOC2) & !is.na(TOC3))
# ^ None
sinks3 %>%
filter(!is.na(TOC1) & !is.na(TOC3)) %>%
select(depth, TOC1, TOC2, TOC3, NTotal) %>%
print(n = 100)
# ^ All depth one
# C/N OK, but one C value may be N
sinks3 %>%
filter(!is.na(TOC1) & !is.na(TOC2)) %>%
select(depth, TOC1, TOC2, TOC3, NTotal) %>%
print(n = 100)
# ^ Never depth one
# C/N OK, but one C value may be N
sinks3 %>%
filter(TOC1 != TOC3) %>%
select(depth, TOC1, TOC2, TOC3, NTotal) %>%
print(n = 100)
# Only two values, TOC3 is N
sinks3 %>%
filter(TOC1 != TOC2) %>%
select(depth, TOC1, TOC2, TOC3, NTotal) %>%
print(n = 100)
# Only one value, TOC2 is N
sinks3 %>% filter(
TOC1 < NTotal | TOC2 < NTotal | TOC3 < NTotal
) %>%
select(depth, TOC1, TOC2, TOC3, NTotal) %>%
print(n = 100)
n_unique <- sinks3 %>%
select(TOC1, TOC2, TOC3, NTotal) %>%
apply(1, function(x) length(unique(x)))
# All points have three unique values
maxvalue <- sinks3 %>%
select(TOC1, TOC2, TOC3, NTotal) %>%
apply(1, function(x) max(x, na.rm = TRUE))
minvalue <- sinks3 %>%
select(TOC1, TOC2, TOC3, NTotal) %>%
apply(1, function(x) min(x, na.rm = TRUE))
plot(log(minvalue), log(maxvalue))
plot(maxvalue/minvalue)
# I assume that maxvalue is always SOC, and minvalue is always N
sinks3$SOC <- maxvalue
sinks3$N <- minvalue
sinks3$date <- as.character(sinks3$SD_Dato) %>%
stri_replace_all_fixed("-", "") %>%
strsplit(" ") %>%
unlist() %>%
matrix(nrow = 2) %>%
.[1, ]
sinks3$SD_Dato
sinks3$SD_Dato %>% str
as.character(sinks3$SD_Dato) %>%
stri_replace_all_fixed("-", "") %>%
strsplit(" ")
as.character(sinks3$SD_Dato) %>%
stri_replace_all_fixed("-", "") %>%
strsplit(" ") %>%
unlist()
sinks3$date <- as.character(sinks3$SD_Dato) %>%
stri_replace_all_fixed("-", "") %>%
strsplit(" ") %>%
unlist()
as.character(sinks3$SD_Dato) %>%
stri_replace_all_fixed("-", "") %>%
strsplit(" ")
as.character(sinks3$SD_Dato) %>%
stri_replace_all_fixed("-", "") %>%
strsplit(" ") %>% lapply(., length(x))
as.character(sinks3$SD_Dato) %>%
stri_replace_all_fixed("-", "") %>%
strsplit(" ") %>% lapply(., function(x) length(x))
?extract2
?strsplit
as.character(sinks3$SD_Dato) %>%
stri_replace_all_fixed("-", "")
as.character(sinks3$SD_Dato) %>%
stri_replace_all_fixed("-", "") %>% as.numeric()
as.character(sinks3$SD_Dato) %>%
stri_replace_all_fixed("-", "")
as.character(sinks3$SD_Dato) %>%
stri_replace_all_fixed("-", "") %>% as.numeric()
plot(sinks3$SD_Dato)
sum(is.na(sinks3$SD_Dato))
?substr
substr("gwjrghkjshagkjhaglt", 1, 3)
substr(rep("gwjrghkjshagkjhaglt", 2), 1, 3)
sinks3$SD_Dato %>%
as.character() %>%
stri_replace_all_fixed("-", "") %>%
subst(., 1, 8)
sinks3$SD_Dato %>%
as.character() %>%
stri_replace_all_fixed("-", "") %>%
substr(., 1, 8)
sinks3$SD_Dato %>%
as.character() %>%
stri_replace_all_fixed("-", "") %>%
substr(., 1, 8) %>% as.numeric()
sinks3$SD_Dato %>%
as.character() %>%
stri_replace_all_fixed("-", "") %>%
substr(., 1, 8) %>% as.numeric() %>% plot()
sinks3$SOC <- maxvalue
sinks3$N <- minvalue
sinks3$date <- sinks3$SD_Dato %>%
as.character() %>%
stri_replace_all_fixed("-", "") %>%
substr(., 1, 8)
uppers <- c(0:3)*34
lowers <- uppers + 30
sinks_upperlower <- data.frame(
depth = depths_D,
upper = uppers,
lower = lowers
)
sinks4 <- sinks3 %>%
mutate(
db = "SINKS",
ID_old = paste0(IDBID, "_", depth),
UTMX = SD_X,
UTMY = SD_Y,
pH = PH
) %>%
right_join(sinks_upperlower) %>%
select(any_of(mycolnames))
allmydata <- bind_rows(dsc2, seges2, sinks4)
plot(allmydata$UTMX, allmydata$UTMY)
plot(profiles_texture$PRFRA)
profiles_texture %>% filter(PRFRA > PRTIL)
profiles_texture %>% filter(TEKTURSUM < 0)
tex_negs <- profiles_texture %>%
select_if(is.numeric) %>%
as.matrix() %>%
apply(., 1, function(x) {
out <- min(x)[1] < 0
return(out)
}
)
plot(tex_negs)
tex_negs
tex_negs <- profiles_texture %>%
select_if(is.numeric) %>%
as.matrix() %>%
apply(., 1, function(x) {
out <- !is.na(min(x)[1] < 0)
return(out)
}
)
plot(tex_negs)
profiles_texture[tex_negs]
profiles_texture[tex_negs, ]
tex_negs <- profiles_texture %>%
select_if(is.numeric) %>%
as.matrix() %>%
apply(., 1, function(x) {
out <- sum(x < 0)
return(out)
}
)
plot(tex_negs)
tex_negs <- profiles_texture %>%
select_if(is.numeric) %>%
as.matrix() %>%
apply(., 1, function(x) {
out <- sum(x < 0, na.rm = TRUE)
return(out)
}
)
plot(tex_negs)
profiles_texture[tex_negs > 0, ]
tex_negs <- profiles_texture %>%
select(-c(PRFRA, PRTIL)) %>%
select_if(is.numeric) %>%
as.matrix() %>%
apply(., 1, function(x) {
out <- sum(x < 0, na.rm = TRUE)
return(out)
}
)
profiles_texture[tex_negs > 0, ]
?print
check_negs <- profiles_texture %>%
select(-c(PRFRA, PRTIL)) %>%
select_if(is.numeric) %>%
colnames()
check_negs
profiles_tex2 <- profiles_texture %>%
mutate(
across(
where(is.numeric),
function(x) replace(x, x < 0, NA))  # Remove negative measurements
)
profiles_tex2
profiles_texture
?across
profiles_tex2 <- profiles_texture %>%
mutate(
across(
any_of(check_negs),
function(x) replace(x, x < 0, NA))  # Remove negative measurements
)
profiles_tex2
profiles_texture %>% filter(PRFRA > PRTIL)
profiles_tex2 %>% filter(HUMUS == 0)
?case_when
profiles_tex2 <- profiles_texture %>%
mutate(
across(
any_of(check_negs),
function(x) replace(x, x < 0, NA))  # Remove negative measurements
) %>%
mutate(
PRTIL = case_when(PRFRA > PRTIL & PRTIL == 0 ~ PRFRA)
)
plot(profiles_tex2$PRFRA, profiles_tex2$PRFRA)
plot(profiles_tex2$PRFRA, profiles_tex2$PRTIL)
profiles_tex2
profiles_tex2 <- profiles_texture %>%
mutate(
across(
any_of(check_negs),
function(x) replace(x, x < 0, NA))  # Remove negative measurements
) %>%
mutate(
PRTIL = case_when(
PRFRA > PRTIL & PRTIL == 0 ~ PRFRA,
.default = PRTIL
)
)
plot(profiles_tex2$PRFRA, profiles_tex2$PRTIL)
profiles_tex2 <- profiles_texture %>%
mutate(
across(
any_of(check_negs),
function(x) replace(x, x < 0, NA))  # Remove negative measurements
) %>%
mutate(
PRTIL = case_when(
PRFRA > PRTIL & PRTIL == 0 ~ PRFRA,
.default = PRTIL
)
) %>%
mutate(
upper = case_when(
PRFRA > PRTIL ~ PRTIL,
.default = PRFRA
),
lower = case_when(
PRFRA > PRTIL ~ PRFRA,
.default = PRTIL
)
)
plot(profiles_tex2$PRFRA, profiles_tex2$PRTIL)
plot(profiles_tex2$upper, profiles_tex2$lower)
filter(profiles_tex2, (is.na(upper) & !is.na(lower.tri())))
filter(profiles_tex2, (is.na(upper) & !is.na(lower))
)
profiles_texture %>% filter(PRFRA > PRTIL)
profiles_tex2 <- profiles_texture %>%
mutate(
across(
any_of(check_negs),
function(x) replace(x, x < 0, NA))  # Remove negative measurements
) %>%
mutate(
PRFRA = case_when(
PRFRA > PRTIL & PROFILNR == 2517 ~ PRFRA*-1,
.default = PRFRA
),
PRTIL = case_when(
PRFRA > PRTIL & PROFILNR == 2531 ~ 170,
PRFRA > PRTIL & PROFILNR %in% c(2528, 2529, 2530) ~ PRFRA
.default = PRTIL
profiles_tex2 <- profiles_texture %>%
mutate(
across(
any_of(check_negs),
function(x) replace(x, x < 0, NA))  # Remove negative measurements
) %>%
mutate(
PRFRA = case_when(
PRFRA > PRTIL & PROFILNR == 2517 ~ PRFRA*-1,
.default = PRFRA
),
PRTIL = case_when(
PRFRA > PRTIL & PROFILNR == 2531 ~ 170,
PRFRA > PRTIL & PROFILNR %in% c(2528, 2529, 2530) ~ PRFRA,
.default = PRTIL
)
)
profiles_tex2 %>% filter(PROFILNR %in% c(2528, 2529, 2530))
profiles_tex2 %>% filter(PROFILNR %in% c(2517, 2528, 2529, 2530, 2531))
profiles_tex2 <- profiles_texture %>%
mutate(
across(
any_of(check_negs),
function(x) replace(x, x < 0, NA))  # Remove negative measurements
) %>%
mutate(
PRFRA = case_when(
PRFRA > PRTIL & PROFILNR == 2517 ~ PRFRA*-1,
.default = PRFRA
),
PRTIL = case_when(
PRFRA > PRTIL & PROFILNR == 2531 ~ 170,
PRFRA > PRTIL & PROFILNR %in% c(2528, 2529, 2530) ~ PRFRA,
.default = PRTIL
)
) %>%
mutate(
PRFRA = case_when(
is.na(PRFRA) ~ PRTIL,
.default = PRFRA
),
PRTIL = case_when(
is.na(PRTIL) ~ PRFRA,
.default = PRTIL
)
)
profiles_tex2 %>% filter(PROFILNR %in% c(2517, 2528, 2529, 2530, 2531))
plot(profiles_tex2$PRFRA, profiles_tex2$PRTIL)
plot(profiles_tex2$PRFRA - profiles_tex2$PRTIL)
profiles_tex2 %>% filter((PRTIL- PRFRA) > 100)
profiles_texture2 %>% filter((PRTIL- PRFRA) > 100)
profiles_texture %>% filter((PRTIL- PRFRA) > 100)
tex_negs <- profiles_texture %>%
select(-c(PRFRA, PRTIL)) %>%
select_if(is.numeric) %>%
as.matrix() %>%
apply(., 1, function(x) {
out <- sum(x < 0, na.rm = TRUE)
return(out)
}
)
profiles_texture[tex_negs > 0, ]
profiles_texture %>% filter((PRTIL- PRFRA) > 100)
check_negs <- profiles_texture %>%
select(-c(PRFRA, PRTIL)) %>%
select_if(is.numeric) %>%
colnames()
profiles_tex2 <- profiles_texture %>%
mutate(
across(
any_of(check_negs),
function(x) replace(x, x < 0, NA))  # Remove negative measurements
) %>%
mutate(
PRFRA = case_when(
PRFRA > PRTIL & PROFILNR == 2517 ~ PRFRA*-1,
.default = PRFRA
),
PRTIL = case_when(
PRFRA > PRTIL & PROFILNR == 2531 ~ 170,
PRFRA > PRTIL & PROFILNR %in% c(2528, 2529, 2530) ~ PRFRA,
.default = PRTIL
)
) %>%
mutate(
PRFRA = case_when(
is.na(PRFRA) ~ PRTIL,
.default = PRFRA
),
PRTIL = case_when(
is.na(PRTIL) ~ PRFRA,
(PRTIL- PRFRA) > 100 & PROFILNR == 2539 ~ 30,
.default = PRTIL
)
)
profiles_tex2 %>% filter(PROFILNR %in% c(2517, 2528, 2529, 2530, 2531, 2539))
profiles_tex2 %>% filter(PROFILNR %in% c(2517, 2528, 2529, 2530, 2531, 2539)) %>% print()
profiles_tex2 %>%
filter(PROFILNR %in% c(2517, 2528, 2529, 2530, 2531, 2539)) %>%
select(c(PROFILNR, HORISONTNR, HORISONTPR, PRFRA, PRTIL))
plot(profiles_tex2$PRFRA, profiles_tex2$PRTIL)
