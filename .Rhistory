# projekt, 2. revideret udgave, bilag), the HUMUS content for this horizon is
# 2.66%. Correct this manually. (ok)
profiles_tex4 %<>%
mutate(
JBNR = case_when(
!(JBNR %in% 1:12) ~ NA,
.default = JBNR
),
JBNR = case_when(
is.na(JBNR) & is_naturalnumber(`TOTAL KULSTOF`) ~ `TOTAL KULSTOF`,
.default = JBNR
),
`TOTAL KULSTOF` = case_when(
is_naturalnumber(`TOTAL KULSTOF`) & `TOTAL KULSTOF` == JBNR ~ NA,
.default = `TOTAL KULSTOF`
),
JBNR = case_when(
!(JBNR %in% 1:12) ~ NA,
.default = JBNR
)
) %>%
mutate(
across(
c(LER, SILT, GRVSILT, S63, S125, S200, S500, HUMUS, CACO3),
~ case_when(
PROFILNR == 3180 & HORISONTNR == 6 & HORISONTPR == 2 ~ NA,
.default = .
)
),
across(
c(
PHH2O, PHKCL, POROES, TOTALP, TOTALN, ORGAP, `UORGANISK P`,
`CITRATOPL P`, `TOTAL KULSTOF`
),
~ case_when(
. == 0 ~ NA,
.default = .
)
),
across(
c(K, `NA`, CA, MG, BASER, SURION, BASEMAETN),
~ case_when(
is.na(CEC) & . == 0 ~ NA,
.default = .
)
)
) %>%
mutate(
SURION = case_when(
PROFILNR == 3181 & SURION == 0 ~ NA,
.default = SURION
),
BASEMAETN = case_when(
PROFILNR == 3181 & BASEMAETN == 0 ~ NA,
.default = BASEMAETN
),
HUMUS = case_when(
PROFILNR == 2532 & HORISONTNR == 3 ~ 2.66,
.default = HUMUS
)
)
profiles_tex4 %<>%
rowwise() %>%
mutate(
TEKTURSUM = sum(LER, SILT, GRVSILT, S63, S125, S200, S500, HUMUS, CACO3,
na.rm = TRUE
)
) %>%
ungroup() %>%
mutate(
TEKTURSUM = case_when(
TEKTURSUM == 0 ~ NA,
.default = TEKTURSUM,
)
)
# Export corrected table
profiles_analyse_corrected <- profiles_tex4 %>%
select(colnames(profiles_texture))
write.table(
profiles_analyse_corrected,
paste0(dir_dat, "/observations/profiles/ANALYSE_corrected_20230606.csv"),
sep = ";",
na = "",
row.names = FALSE
)
# Impute missing horizon boundaries
# Get boundaries from horizons table
# Get upper and lower from horizons table when they are missing for the sample
# (ok)
profiles_horizons_small <- profiles_horizons %>%
mutate(
HOR_ID = paste0(PROFILNR, "_", HORISONTNR)
) %>%
select(-c(PROFILNR, HORISONTNR, HORISONT))
profiles_tex5 <- profiles_analyse_corrected %>%
mutate(
PRFRA = case_when(
is.na(PRFRA) ~ PRTIL,
.default = PRFRA
),
PRTIL = case_when(
is.na(PRTIL) ~ PRFRA,
.default = PRTIL
)
) %>%
mutate(
HOR_ID = paste0(PROFILNR, "_", HORISONTNR)
) %>%
left_join(
profiles_horizons_small,
"HOR_ID"
) %>%
mutate(
PRFRA = case_when(
is.na(PRFRA) ~ FRA,
.default = PRFRA
),
PRTIL = case_when(
is.na(PRTIL) ~ TIL,
.default = PRTIL
)
) %>%
select(-c(HOR_ID, FRA, TIL))
# Standardization
# Only standardize texture fractions if the combined sum, including humus and
# CaCO3 are more than 90%.
profiles_tex5 %>%
filter(is.na(HUMUS) & !is.na(LER)) %>%
as.data.frame()
profiles_tex5 %>%
filter(!is.na(LER)) %>%
filter(TEKTURSUM < 99) %>%
filter(is.na(HUMUS)) %>%
filter(is.na(CACO3)) %>%
slice_sample(n = 20) %>%
as.data.frame()
# If TEKTURSUM is more than 90, use sum of mineral fractions
# If not, and if HUMUS or CaCO3 are available, use 100 - (HUMUS + CaCO3)
# Otherwise, do not standardize
profiles_tex5 %<>%
mutate(
db = "Profile database",
ID_old = paste0(PROFILNR, "_", HORISONTNR, "_", HORISONTPR),
upper = PRFRA,
lower = PRTIL,
SOC = case_when(
!is.na(HUMUS) ~ HUMUS * 0.587,
is.na(HUMUS) & is.na(CACO3) ~ `TOTAL KULSTOF`,
is.na(HUMUS) & CACO3 == 0 ~ `TOTAL KULSTOF`,
.default = NA
),
SOM_removed = case_when(
HUMUS >= 5 ~ 1,
HUMUS < 5 ~ 0,
.default = NA
),
CaCO3 = CACO3,
BD = VOLVGT,
pH = PHCACL2,
N = TOTALN,
imputed = FALSE
) %>%
rowwise() %>%
mutate(
tminsum = sum(LER, SILT, GRVSILT, S63, S125, S200, S500, na.rm = TRUE),
not_SOM_CaCO3 = case_when(
!is.na(sum(HUMUS, CACO3)) ~ 100 - (HUMUS + CACO3),
!is.na(HUMUS) & is.na(CACO3) ~ 100 - HUMUS,
is.na(HUMUS) & !is.na(CACO3) ~ 100 - CACO3,
.default = NA
),
clay = case_when(
TEKTURSUM >= 90 ~ LER * 100 / (tminsum),
TEKTURSUM < 90 & !is.na(not_SOM_CaCO3) ~ LER * 100 / (not_SOM_CaCO3),
.default = LER
),
silt = case_when(
TEKTURSUM >= 90 ~ SILT * 100 / (tminsum),
TEKTURSUM < 90 & !is.na(not_SOM_CaCO3) ~ SILT * 100 / (not_SOM_CaCO3),
.default = SILT
),
fsand_raw = case_when(
sum(!is.na(c_across(GRVSILT:S125))) > 0 ~ sum(GRVSILT, S63, S125, na.rm = TRUE),
.default = NA
),
fine_sand = case_when(
TEKTURSUM >= 90 ~ fsand_raw * 100 / (tminsum),
TEKTURSUM < 90 & !is.na(not_SOM_CaCO3) ~ fsand_raw * 100 / (not_SOM_CaCO3),
.default = fsand_raw
),
csand_raw = case_when(
sum(!is.na(c_across(S200:S500))) > 0 ~ sum(S200, S500, na.rm = TRUE),
.default = NA
),
coarse_sand = case_when(
TEKTURSUM >= 90 ~ csand_raw * 100 / (tminsum),
TEKTURSUM < 90 & !is.na(not_SOM_CaCO3) ~ csand_raw * 100 / (not_SOM_CaCO3),
.default = csand_raw
)
) %>%
ungroup() %>%
select(any_of(c(mycolnames, "PROFILNR")))
# Get coordinates and date
profiles_xy_date <- profiles_shp %>%
values() %>%
mutate(
date = paste0(
AARSTAL,
formatC(MND, 2, 2, flag = "0"),
formatC(DAG, 2, 2, flag = "0")
),
UTMX = x,
UTMY = y
) %>%
select(-c(AARSTAL, MND, DAG, x, y)) %>%
arrange(PROFILNR)
profiles_tex5 %<>%
left_join(profiles_xy_date) %>%
as.data.frame()
# 2.8: Forest samples
forests_tax2 <- forests_tax %>%
mutate(
db = "Forest evaluation",
ID_old = as.character(key),
date = "1980",
upper = 0,
lower = 20,
) %>%
filter(
!is.na(Humus) & !is.na(UTMN) & !is.na(UTMØ)
)
forests_dsc2 <- forests_dsc %>%
mutate(
across(
where(is.numeric),
function(x) replace(x, x == -1, NA)
) # Remove negative values
) %>%
arrange(Lokalitet) %>%
group_by(Lokalitet) %>%
arrange(Dybde.fra) %>%
mutate(
db = "Forests DSC",
ID_old = paste0(Lokalitet, "_", row_number()),
date = "1991",
upper = Dybde.fra,
lower = Dybde.til,
CaCO3 = case_when(
is.na(CaCO3) ~ 0,
.default = CaCO3
),
Finsand = Grovsilt + ..63.mym + ..125.mym,
Grovsand = ..200.mym + ..500.mym
) %>%
ungroup() %>%
arrange(Lokalitet)
forests_all <- bind_rows(forests_tax2, forests_dsc2) %>%
mutate(
UTMX = UTMØ,
UTMY = UTMN,
SOM_removed = 0,
SOC = Humus * 0.586
) %>%
rowwise() %>%
mutate(
tsum = sum(Ler, Silt, Finsand, Grovsand, na.rm = TRUE),
tsum_all = sum(Ler, Silt, Finsand, Grovsand, Humus, CaCO3, na.rm = TRUE)
) %>%
ungroup() %>%
mutate(
tsum = case_when(
tsum == 0 ~ NA,
.default = tsum
),
clay = Ler * 100 / tsum,
silt = Silt * 100 / tsum,
fine_sand = Finsand * 100 / tsum,
coarse_sand = Grovsand * 100 / tsum,
imputed = FALSE
) %>%
select(any_of(mycolnames))
# Write files
dir_obs_proc <- dir_dat %>%
paste0(., "/observations/processed/") %T>%
dir.create()
write.table(
dsc2,
paste0(dir_obs_proc, "dsc.csv"),
row.names = FALSE,
sep = ";"
)
write.table(
seges2,
paste0(dir_obs_proc, "seges.csv"),
row.names = FALSE,
sep = ";"
)
write.table(
sinks4,
paste0(dir_obs_proc, "SINKS.csv"),
row.names = FALSE,
sep = ";"
)
write.table(
profiles_tex5,
paste0(dir_obs_proc, "profiles_texture.csv"),
row.names = FALSE,
sep = ";"
)
write.table(
forests_all,
paste0(dir_obs_proc, "forest_samples.csv"),
row.names = FALSE,
sep = ";"
)
# END
library(terra)
library(magrittr)
library(exactextractr)
library(sf)
dir_code <- getwd()
root <- dirname(dir_code)
dir_dat <- paste0(root, "/digijord_data/")
mycrs <- "EPSG:25832"
# 1 Load observations
dir_obs_proc <- dir_dat %>%
paste0(., "/observations/processed/")
dsc <- dir_obs_proc %>%
paste0(., "dsc.csv") %>%
read.table(
header = TRUE,
sep = ";",
) %>%
vect(
geom = c("UTMX", "UTMY"),
crs = mycrs,
keepgeom = TRUE
)
SEGES <- dir_obs_proc %>%
paste0(., "SEGES.csv") %>%
read.table(
header = TRUE,
sep = ";",
) %>%
vect(
geom = c("UTMX", "UTMY"),
crs = mycrs,
keepgeom = TRUE
)
SINKS <- dir_obs_proc %>%
paste0(., "SINKS.csv") %>%
read.table(
header = TRUE,
sep = ";",
) %>%
vect(
geom = c("UTMX", "UTMY"),
crs = mycrs,
keepgeom = TRUE
)
profiles_shp <- dir_dat %>%
paste0(
.,
"/observations/profiles/Profiles_coordinates_new/Profiles_coordinates_new.shp"
) %>%
vect()
forest_samples <- dir_obs_proc %>%
paste0(., "forest_samples.csv") %>%
read.table(
header = TRUE,
sep = ";",
) %>%
vect(
geom = c("UTMX", "UTMY"),
crs = mycrs,
keepgeom = TRUE
)
cov_dir <- dir_dat %>% paste0(., "/covariates")
cov_files <- cov_dir %>% list.files()
cov_names <- cov_files %>% tools::file_path_sans_ext()
cov <- paste0(cov_dir, "/", cov_files) %>%
rast()
names(cov) <- cov_names
crs(cov) <- mycrs
# 3 Create buffers (40 m = ~ 0.5 ha)
buffer_dsc <- terra::buffer(
dsc,
width = 40
) %>%
st_as_sf()
buffer_SEGES <- terra::buffer(
SEGES,
width = 40
) %>%
st_as_sf()
SINKS_extr <- terra::extract(
x = cov,
y = SINKS,
ID = FALSE,
)
write.table(
SINKS_extr,
paste0(dir_extr, "SINKS_extr.csv"),
row.names = FALSE,
sep = ";"
)
dir_extr <- dir_dat %>%
paste0(., "/extracts/")
write.table(
SINKS_extr,
paste0(dir_extr, "SINKS_extr.csv"),
row.names = FALSE,
sep = ";"
)
library(terra)
library(magrittr)
dir_code <- getwd()
root <- dirname(dir_code)
dir_dat <- paste0(root, "/digijord_data/")
mycrs <- "EPSG:25832"
# 1 Load observations
dir_obs_proc <- dir_dat %>%
paste0(., "/observations/processed/")
dsc <- dir_obs_proc %>%
paste0(., "dsc.csv") %>%
read.table(
header = TRUE,
sep = ";",
) %>%
vect(
geom = c("UTMX", "UTMY"),
crs = mycrs,
keepgeom = TRUE
)
SEGES <- dir_obs_proc %>%
paste0(., "SEGES.csv") %>%
read.table(
header = TRUE,
sep = ";",
) %>%
vect(
geom = c("UTMX", "UTMY"),
crs = mycrs,
keepgeom = TRUE
)
SINKS <- dir_obs_proc %>%
paste0(., "SINKS.csv") %>%
read.table(
header = TRUE,
sep = ";",
) %>%
vect(
geom = c("UTMX", "UTMY"),
crs = mycrs,
keepgeom = TRUE
)
profiles_shp <- dir_dat %>%
paste0(
.,
"/observations/profiles/Profiles_coordinates_new/Profiles_coordinates_new.shp"
) %>%
vect()
forest_samples <- dir_obs_proc %>%
paste0(., "forest_samples.csv") %>%
read.table(
header = TRUE,
sep = ";",
) %>%
vect(
geom = c("UTMX", "UTMY"),
crs = mycrs,
keepgeom = TRUE
)
cov_dir <- dir_dat %>% paste0(., "/covariates/")
DEM_10m <- cov_dir %>%
paste0(., "/dhm2015_terraen_10m.tif") %>%
rast()
fun_agg <- function(x) {
out <- sum(!is.na(x)) == 0
return(out)
}
dir_folds <- dir_dat %>%
paste0(., "/folds/") %T>%
dir.create()
file_dem_mask_100m_2 <- paste0(dir_folds, "/dem_mask_100m_2.tif")
# writeRaster(
#   dem_mask_100m2,
#   filename = file_dem_mask_100m_2,
#   overwrite = TRUE,
#   datatype = "INT1U"
#   )
dem_mask_100m2 <- rast(file_dem_mask_100m_2)
plot(dem_mask_100m2)
file_folds_10_100m <- paste0(dir_folds, "/folds_10_100m.tif")
# writeRaster(
#   folds_10_100m,
#   filename = file_folds_10_100m,
#   overwrite = TRUE,
#   datatype = "INT1U"
#   )
folds_10_100m <- rast(file_folds_10_100m)
SINKS_folds <- terra::extract(
x = folds_10_100m,
y = SINKS,
ID = FALSE,
)
write.table(
SINKS_folds,
paste0(dir_folds, "/SINKS_folds.csv"),
row.names = FALSE,
sep = ";"
)
