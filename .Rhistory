#         },
#         overwrite = TRUE,
#         filename = outname_x
#       )
#
#       tex100_x <- outname_x %>% rast()
#
#       for (i in 1:length(layernames)) {
#         outname_x_final <- dir_pred_tiles_bootr %>%
#           paste0(., "/", tilename_x, "/", layernames[i], ".tif")
#
#         writeRaster(
#           tex100_x[[i]],
#           filename = outname_x_final,
#           overwrite = TRUE
#         )
#       }
#     }
#     return(NULL)
#   }
# )
# stopCluster(cl)
# foreach::registerDoSEQ()
# rm(cl)
}
}
# n_JB_outfiles_missing <- dir_pred_tiles_bootr %>%
#   paste0(., "/", tilenames, "/") %>%
#   paste0(., "JB.tif") %>%
#   file.exists() %>%
#   not() %>%
#   sum()
#
# if (n_JB_outfiles_missing > 0) {
#   # Classify JB
#   print("Calculating soil texture class")
#   source("f_classify_soil_JB.R")
#
#   showConnections()
#
#   cl <- makeCluster(numCores)
#
#   clusterEvalQ(
#     cl,
#     {
#       library(terra)
#       library(magrittr)
#       library(dplyr)
#       library(caret)
#       library(xgboost)
#       library(tools)
#     }
#   )
#
#   clusterExport(
#     cl,
#     c(
#       "breaks_j_chr",
#       "subdir_tiles",
#       "dir_dat",
#       "dir_pred_tiles_bootr",
#       "fraction_names_underscore",
#       "classify_soil_JB"
#     )
#   )
#
#   parSapplyLB(
#     cl,
#     1:length(subdir_tiles),
#     function(x) {
#       tilename_x <- basename(subdir_tiles[x])
#
#       outname_x <- dir_pred_tiles_bootr %>%
#         paste0(., "/", tilename_x, "/JB.tif")
#
#       if (!file.exists(outname_x)) {
#         tmpfolder <- paste0(dir_dat, "/Temp/")
#
#         terraOptions(memfrac = 0.02, tempdir = tmpfolder)
#
#         rs_tex <- dir_pred_tiles_bootr %>%
#           paste0(
#             ., "/", tilename_x, "/",
#             fraction_names_underscore,
#             ".tif"
#           ) %>%
#           rast()
#
#         rs_s2 <- terra::subset(rs_tex, c(1, 2, 3, 5, 6))
#
#         names(rs_s2) <- c("clay", "silt", "sand_f", "SOM", "CaCO3")
#
#         lapp(
#           rs_s2,
#           classify_soil_JB,
#           # SOM_factor = 1 / 0.587,
#           SOM_factor = 1 / 0.6,
#           filename = outname_x,
#           overwrite = TRUE,
#           wopt = list(
#             datatype = "INT1U",
#             NAflag = 13
#           )
#         )
#         return(NULL)
#       }
#     }
#   )
#   stopCluster(cl)
#   foreach::registerDoSEQ()
#   rm(cl)
# }
}
# Summarize results across bootstrap repetitions
dir_sum_depth_tiles <- dir_boot_sum_tiles %>%
paste0(
., "/depth_", breaks_j_chr[1], "_", breaks_j_chr[2], "_cm/"
) %T>%
dir.create(showWarnings = FALSE)
for (x in 1:length(tilenames)) {
dir_sum_depth_tiles %>%
paste0(., "/", tilenames[x], "/") %T>%
dir.create(showWarnings = FALSE, recursive = TRUE)
}
# for (i in 1:length(fraction_names_underscore)) {
#   frac <- fraction_names_underscore[i]
#   print(paste0("Summarizing ", frac))
#
#   showConnections()
#
#   cl <- makeCluster(numCores)
#
#   clusterEvalQ(
#     cl,
#     {
#       library(terra)
#       library(magrittr)
#       library(dplyr)
#       library(tools)
#     }
#   )
#
#   clusterExport(
#     cl,
#     c(
#       "boot_all_chr",
#       "subdir_tiles",
#       "frac",
#       "dir_dat",
#       "n_digits",
#       "dir_sum_depth_tiles",
#       "dir_pred_tiles_depth"
#     )
#   )
#
#   parSapplyLB(
#     cl,
#     1:length(subdir_tiles),
#     function(x) {
#       tilename_x <- basename(subdir_tiles[x])
#
#       r_frac_tile <- paste0(
#         dir_pred_tiles_depth, "/", boot_all_chr, "/", tilename_x, "/",
#         frac, ".tif") %>%
#         rast()
#
#       outname_x_mean <- dir_sum_depth_tiles %>%
#         paste0(., "/", tilename_x, "/", frac, "_mean.tif")
#       outname_x_sd <- dir_sum_depth_tiles %>%
#         paste0(., "/", tilename_x, "/", frac, "_sd.tif")
#       outname_x_q05 <- dir_sum_depth_tiles %>%
#         paste0(., "/", tilename_x, "/", frac, "_q05.tif")
#       outname_x_q95 <- dir_sum_depth_tiles %>%
#         paste0(., "/", tilename_x, "/", frac, "_q95.tif")
#
#       tmpfolder <- paste0(dir_dat, "/Temp/")
#
#       terraOptions(memfrac = 0.02, tempdir = tmpfolder)
#
#       # Calculate mean
#       app(
#         r_frac_tile,
#         fun = mean
#       ) %>%
#         math(
#           fun = "round",
#           digits = n_digits,
#           filename = outname_x_mean,
#           overwrite = TRUE
#         )
#       # Calculate standard deviation
#       app(
#         r_frac_tile,
#         fun = sd
#       ) %>%
#         math(
#           fun = "round",
#           digits = n_digits,
#           filename = outname_x_sd,
#           overwrite = TRUE
#         )
#       # Calculate 5% quantile
#       terra::quantile(
#         r_frac_tile,
#         probs = 0.05,
#         na.rm = TRUE,
#         filename = outname_x_q05,
#         overwrite = TRUE
#       )
#       # Calculate 95% quantile
#       terra::quantile(
#         r_frac_tile,
#         probs = 0.95,
#         na.rm = TRUE,
#         filename = outname_x_q95,
#         overwrite = TRUE
#       )
#       return(NULL)
#     }
#   )
#
#   stopCluster(cl)
#   foreach::registerDoSEQ()
#   rm(cl)
# }
# Calculate the probability of each SOC class across repetitions
# Separate layers for each SOC class
# Merge SOC class probability rasters
print("Summarizing SOC classes, peat probabilities, and confidence intervals")
showConnections()
logsoc_mse_depth_j <- logsoc_mse_depths[j]
cl <- makeCluster(numCores)
clusterEvalQ(
cl,
{
library(terra)
library(magrittr)
library(dplyr)
library(tools)
}
)
clusterExport(
cl,
c(
"boot_all_chr",
"subdir_tiles",
"dir_dat",
"n_digits",
"breaks_j",
"breaks_j_chr",
"dir_sum_depth_tiles",
"fraction_names_underscore",
"nboot",
"dir_pred_tiles_depth",
"classify_soil_JB",
"SOC_levels",
"SOC_labels",
"calc_log_mean_pse",
"calc_prob_q",
"calc_q_log",
"soc6pct_log",
"logsoc_mse_depth_j",
"prob_q_out",
"prob_q_out_chr"
)
)
parSapplyLB(
cl,
1:length(subdir_tiles),
function(x) {
tmpfolder <- paste0(dir_dat, "/Temp/")
terraOptions(memfrac = 0.02, tempdir = tmpfolder)
tilename_x <- basename(subdir_tiles[x])
# r_SOC_class_tile_all <- paste0(
#   dir_pred_tiles_depth, "/", boot_all_chr, "/", tilename_x,
#   "/SOC_class.tif") %>%
#   rast()
#
# n_SOC_class_lyr <- nlyr(r_SOC_class_tile_all)
# outnames_SOC_class_probs <- paste0("/SOC_class_", SOC_labels, "_prob")
#
# outfiles_SOC_class_probs <- dir_sum_depth_tiles %>%
#   paste0(., "/", tilename_x, "/", outnames_SOC_class_probs, ".tif")
# # Calculate soil class probability
# SOC_class_prob <- app(
#   r_SOC_class_tile_all,
#   function(x) {
#     if (sum(is.na(x) == 0)) {
#       out <- factor(x, levels = SOC_levels) %>%
#         table() %>%
#         unname() %>%
#         as.numeric()
#     } else {
#       out <- rep_len(NA, length.out = length(SOC_levels))
#     }
#     return(out)
#   }
# )
#
# names(SOC_class_prob) <- outnames_SOC_class_probs
#
# for (k in 1:length(SOC_levels)) {
#   writeRaster(
#     SOC_class_prob[[k]],
#     filename = outfiles_SOC_class_probs[k],
#     overwrite = TRUE,
#     datatype = "INT1U",
#     NAflag = 101
#   )
# }
# logsoc mean and variance
r_SOC_tile_all <- paste0(
dir_pred_tiles_depth, "/", boot_all_chr, "/", tilename_x,
"/SOC.tif") %>%
rast()
outfile_meanvar_tmp_x <- tmpfolder %>%
paste0(., "/logsoc_meanvar_", tilename_x, ".tif")
app(
r_SOC_tile_all,
fun = function(x) {
out <- calc_log_mean_pse(x, mse_log = logsoc_mse_depth_j)
return(out)
},
filename = outfile_meanvar_tmp_x,
overwrite = TRUE,
wopt = list(
gdal = "TILED=YES",
datatype = "FLT4S"
)
)
logsoc_mean_var <- rast(outfile_meanvar_tmp_x)
# Peat probability
outfile_basename <- "peat_probability"
prob_peat_outfile_x <- dir_sum_depth_tiles %>%
paste0(., "/", tilename_x, "/peat_probability.tif")
app(
logsoc_mean_var,
fun = function(x) {
out <- calc_prob_q(x, q = prob_q_out)
return(out)
},
filename = prob_peat_outfile_x,
overwrite = TRUE,
wopt = list(
gdal = "TILED=YES",
datatype = "FLT4S",
names = outfile_basename
)
)
# SOC prediction quantiles
outfile_tmp_x <- tmpfolder %>%
paste0(., "/soc_qs_", tilename_x, ".tif")
app(
logsoc_mean_var,
fun = calc_q_log,
filename = outfile_tmp_x,
overwrite = TRUE,
wopt = list(
gdal = "TILED=YES",
datatype = "FLT4S"
)
)
my_qs <- outfile_tmp_x %>% rast()
for (k in 1:nlyr(my_qs)) {
outname_base <- paste0("soc_", prob_q_out_chr[k])
outfile_xk <- outdir_tile_x %>%
paste0(., outname_base, ".tif")
writeRaster(
my_qs[[k]],
filename = outfile_xk,
names = outname_base,
overwrite = TRUE,
gdal = "TILED=YES",
datatype = "FLT4S"
)
}
return(NULL)
}
)
stopCluster(cl)
foreach::registerDoSEQ()
rm(cl)
# Calculate mean soil class and soil class uncertainties
# print("Summarizing texture classes")
# source("f_classify_soil_JB.R")
# showConnections()
#
# cl <- makeCluster(numCores)
#
# clusterEvalQ(
#   cl,
#   {
#     library(terra)
#     library(magrittr)
#     library(dplyr)
#     library(tools)
#   }
# )
#
# clusterExport(
#   cl,
#   c(
#     "boot_all_chr",
#     "subdir_tiles",
#     "dir_dat",
#     "n_digits",
#     "breaks_j",
#     "breaks_j_chr",
#     "dir_sum_depth_tiles",
#     "fraction_names_underscore",
#     "nboot",
#     "dir_pred_tiles_depth",
#     "classify_soil_JB"
#   )
# )
#
# parSapplyLB(
#   cl,
#   1:length(subdir_tiles),
#   function(x) {
#     tilename_x <- basename(subdir_tiles[x])
#
#     r_frac_tile_means <- paste0(
#       dir_sum_depth_tiles, "/", tilename_x, "/",
#       fraction_names_underscore, "_mean.tif") %>%
#       rast()
#
#     r_JB_tile_all <- paste0(
#       dir_pred_tiles_depth, "/", boot_all_chr, "/", tilename_x, "/JB.tif") %>%
#       rast()
#
#     n_JB_lyr <- nlyr(r_JB_tile_all)
#
#     outname_x_JB_mean <- dir_sum_depth_tiles %>%
#       paste0(., "/", tilename_x, "/JB_mean.tif")
#     outname_x_JB_unc <- dir_sum_depth_tiles %>%
#       paste0(., "/", tilename_x, "/JB_unc.tif")
#
#     tmpfolder <- paste0(dir_dat, "/Temp/")
#
#     terraOptions(memfrac = 0.02, tempdir = tmpfolder)
#
#     r_frac_tile_means <- terra::subset(r_frac_tile_means, c(1, 2, 3, 5, 6))
#
#     names(r_frac_tile_means) <- c("clay", "silt", "sand_f", "SOM", "CaCO3")
#
#     # JB texture class for mean texture
#     lapp(
#       r_frac_tile_means,
#       classify_soil_JB,
#       # SOM_factor = 1 / 0.587,
#       SOM_factor = 1 / 0.6,
#       filename = outname_x_JB_mean,
#       overwrite = TRUE,
#       wopt = list(
#         datatype = "INT1U",
#         NAflag = 13
#       )
#     )
#     # Calculate JB uncertainty
#     mode_JB <- terra::modal(r_JB_tile_all, na.rm = TRUE)
#     terra::compare(r_JB_tile_all, mode_JB, "!=") %>%
#       app(
#         fun = sum,
#         na.rm = TRUE,
#         filename = outname_x_JB_unc,
#         overwrite = TRUE,
#         wopt = list(
#           datatype = "INT1U",
#           NAflag = 101
#         )
#       )
#
#     return(NULL)
#   }
# )
#
# stopCluster(cl)
# foreach::registerDoSEQ()
# rm(cl)
# Merge summary rasters
outfiles_basenames <- paste0(
dir_sum_depth_tiles, "/", tilenames[1], "/") %>%
list.files() %>%
basename() %>%
tools::file_path_sans_ext()
dir_merged_depth <- dir_pred_boot %>%
paste0(
., "/final_maps/depth_", breaks_j_chr[1], "_", breaks_j_chr[2], "_cm/"
) %T>%
dir.create(showWarnings = FALSE, recursive = TRUE)
for (i in 1:length(outfiles_basenames)) {
summary_tiles_i <- paste0(
dir_sum_depth_tiles, "/", tilenames, "/", outfiles_basenames[i], ".tif"
)
tile1_i <- summary_tiles_i[1] %>% rast()
dtyp_i <- datatype(tile1_i)
naflag_i <- NAflag(tile1_i)
if (dtyp_i == "INT1U") { naflag_i <- 101 }
if (!is.finite(naflag_i)) { naflag_i <- -1}
outtiles_sprc <- summary_tiles_i %>% sprc()
merge(
outtiles_sprc,
filename = paste0(dir_merged_depth, "/", outfiles_basenames[i], ".tif"),
overwrite = TRUE,
gdal = "TILED=YES",
datatype = dtyp_i,
NAflag = naflag_i,
names = outfiles_basenames[i]
)
}
}
