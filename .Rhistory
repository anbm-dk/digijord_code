plot(pcs_10km[[26]])
plot(pcs_10km[[27]])
cov_10km <- dir_cov_10km %>%
list.files(full.names = TRUE) %>%
rast() %>%
subset(covnames_dropogc)
cov_10km$terodep10m %<>% terra::subst(., NA, 0)
pcs_10km  <- terra::predict(cov_10km, pcs, na.rm = TRUE)
plot(pcs_10km)
plot(pcs_10km[[1]])
plot(pcs_10km[[27]])
cov_10km <- dir_cov_10km %>%
list.files(full.names = TRUE) %>%
rast() %>%
subset(covnames_dropogc)
spatSample(cov_10km, 1000) %>%
apply(., 2, function(x) sum(is.na(x)))
plot(cov_10km)
plot(cov_10km$cos_aspect_radians)
?match
spatSample(cov_10km, 1000) %>%
apply(., 2, function(x) sum(is.na(x))) %>%
.[. != 0]
cov_10km$terodep10m %<>% terra::subst(., NA, 0)
cov_10km$cos_aspect_radians %<>% terra::subst(., NA, 0)
cov_10km$sin_aspect_radians  %<>% terra::subst(., NA, 0)
pcs_10km  <- terra::predict(cov_10km, pcs, na.rm = TRUE)
plot(pcs_10km)
plot(pcs_10km[29])
plot(pcs_10km[[29]])
plot(pcs_10km[[30]])
plot(pcs_10km[[31]])
plot(pcs_10km[[32]])
plot(pcs_10km[[33]])
plot(pcs_10km[[34]])
plot(pcs_10km[[35]])
plot(pcs_10km[[36]])
plot(pcs_10km[[37]])
plot(pcs_10km[[38]])
plot(pcs_10km[[39]])
plot(pcs_10km[[40]])
plot(pcs_10km[[41]])
plot(pcs_10km[[42]])
plot(pcs_10km[[43]])
plot(pcs_10km[[44]])
plot(pcs_10km[[45]])
plot(pcs_10km[[46]])
plot(pcs_10km[[48]])
plot(pcs_10km[[49]])
plot(pcs_10km[[50]])
plot(pcs_10km[[51]])
plot(pcs_10km[[52]])
plot(pcs_10km[[53]])
plot(pcs_10km[[54]])
plot(pcs_10km[[55]])
plot(pcs_10km[[56]])
plot(pcs_10km[[57]])
plot(pcs_10km[[58]])
plot(pcs_10km[[59]])
plot(pcs_10km[[60]])
plot(pcs_10km[[61]])
plot(pcs_10km[[62]])
plot(pcs_10km[[63]])
plot(pcs_10km[[64]])
plot(pcs_10km[[65]])
plot(pcs_10km[[66]])
plot(pcs_10km[[67]])
plot(pcs_10km[[68]])
plot(pcs_10km[[69]])
plot(pcs_10km[[70]])
plot(pcs_10km[[71]])
plot(pcs_10km[[72]])
plot(pcs_10km[[73]])
plot(pcs_10km[[74]])
plot(pcs_10km[[75]])
plot(pcs_10km[[76]])
plot(pcs_10km[[77]])
plot(pcs_10km[[78]])
plot(pcs_10km[[79]])
plot(pcs_10km[[80]])
plot(pcs_10km[[81]])
plot(pcs_10km[[82]])
plot(pcs_10km[[83]])
plot(pcs_10km[[84]])
plot(pcs_10km[[85]])
plot(pcs_10km[[86]])
plot(pcs_10km[[87]])
plot(pcs_10km[[88]])
plot(pcs_10km[[89]])
plot(pcs_10km[[90]])
plot(pcs_10km[[91]])
plot(pcs_10km[[92]])
plot(pcs_10km[[93]])
plot(pcs_10km[[94]])
plot(pcs_10km[[95]])
plot(pcs_10km[[96]])
plot(pcs_10km[[97]])
spatSample(cov_10km, 10000) %>%
apply(., 2, function(x) sum(is.na(x))) %>%
.[. != 0]
spatSample(cov_10km, 100000) %>%
apply(., 2, function(x) sum(is.na(x))) %>%
.[. != 0]
plot(sum(is.na(cov_10km)))
plot(sum(is.na(cov_10km)) > 1)
pcs_10km
spatSample(pcs_10km, 10)
spatSample(pcs_10km, 10)[, 1]
spatSample(pcs_10km, 10)[1, 1]
spatSample(pcs_10km, 10) %>% signif(., 4)
?signif
spatSample(pcs_10km, 10)[, 1] %>% signif(., 4)
spatSample(pcs_10km, 10)[, 2] %>% signif(., 4)
spatSample(pcs_10km, 10)[, 2] %>% signif(., 4)[1]
spatSample(pcs_10km, 10)[, 2] %>% signif(., 4) %>% .[1]
spatSample(pcs_10km, 10)[, 2] %>% signif(., 3)
spatSample(pcs_10km, 10) %>% signif(., 3)
pcs
pcs$rotation
pcs$rotation %>% str()
pcs$rotation %>% as_tibble()
?as_tibble
library(tibble)
pcs$rotation %>% rownames_to_column()
pcs$rotation %>%
as.data.frame() %>%
rownames_to_column()
pcs$rotation %>% abs() %>% apply(, 2, sum())
pcs$rotation %>% abs() %>% apply(., 2, sum())
pcs$rotation %>% abs()
pcs$rotation %>% abs() %>% apply(., 2, function(x) sum(x))
(cumsum(pcs_raw$sdev) / sum(pcs_raw$sdev)
)
pcs$rotation %>%
as.data.frame() %>%
rownames_to_column()
pcs_rotation <- pcs$rotation %>%
as.data.frame() %>%
rownames_to_column()
pcs_rotation %>%
saveRDS(file = paste0(dir_dat, "pcs_rotation.rds"))
?write.table
pcs_rotation %>%
write.table(
file = paste0(dir_dat, "pcs_rotation.csv"),
sep = ";"
)
pcs$sdev
pcs$rotation
pcs$rotation %>% rownames()
library(parallel)
library(dplyr)
library(foreach)
library(stringr)
dir_cov <- dir_dat %>% paste0(., "/covariates")
cov_files <- dir_cov %>% list.files()
cov_names <- cov_files %>% tools::file_path_sans_ext()
# Tiles for model prediction
numCores <- detectCores()
numCores
dir_tiles <- dir_dat %>%
paste0(., "/tiles_591/")
subdir_tiles <- dir_tiles %>%
list.dirs() %>%
.[-1]
subdir_tiles
dir_pcs <- dir_dat %>%
paste0(., "/pcs/") %T>%
dir.create()
dir_pcs_tiles <- dir_pcs %>%
paste0(., "/tiles/") %T>%
dir.create()
?prcomp
predict_pcs <- function(mod, dat, n_digits = NULL, ...) {
rfun2 <- function(mod2, dat2, n_const2, n_digits2, ...) {
out2[notallnas] <- predict(
object = mod2,
newdata = dat2,
...
)
if (!is.null(n_digits2)) {
out2 <- signif(out2, digits = n_digits2)
}
return(out2)
}
out <- rfun2(mod, dat, n_digits, ...)
return(out)
}
predict(cov_10km, pcs, fun = predict_pcs, na.rm = TRUE) %>% plot()
predict_pcs <- function(mod, dat, n_digits = NULL, ...) {
rfun2 <- function(mod2, dat2, n_const2, n_digits2, ...) {
out2 <- predict(
object = mod2,
newdata = dat2,
...
)
if (!is.null(n_digits2)) {
out2 <- signif(out2, digits = n_digits2)
}
return(out2)
}
out <- rfun2(mod, dat, n_digits, ...)
return(out)
}
predict(cov_10km, pcs, fun = predict_pcs, na.rm = TRUE) %>% plot()
predict(cov_10km, pcs, fun = predict_pcs, na.rm = TRUE)
predict_pcs <- function(mod, dat, n_digits = NULL, ...) {
rfun2 <- function(mod2, dat2, n_digits2, ...) {
out2 <- predict(
object = mod2,
newdata = dat2,
...
)
if (!is.null(n_digits2)) {
out2 <- signif(out2, digits = n_digits2)
}
return(out2)
}
out <- rfun2(mod, dat, n_digits, ...)
return(out)
}
predict(cov_10km, pcs, fun = predict_pcs, na.rm = TRUE) %>% plot()
?sprc
?writeRaster
n_digits <- 3
numCores <- detectCores()
numCores
dir_tiles <- dir_dat %>%
paste0(., "/tiles_591/")
subdir_tiles <- dir_tiles %>%
list.dirs() %>%
.[-1]
dir_pcs <- dir_dat %>%
paste0(., "/pcs/") %T>%
dir.create()
dir_pcs_tiles <- dir_pcs %>%
paste0(., "/tiles/") %T>%
dir.create()
?prcomp
showConnections()
cl <- makeCluster(numCores)
clusterEvalQ(
cl,
{
library(terra)
library(caret)
library(magrittr)
library(dplyr)
library(tools)
library(stats)
}
)
clusterExport(
cl,
c("pcs",
"subdir_tiles",
"cov_selected",
"dir_dat",
"n_digits",
"dir_pcs",
"dir_pcs_tiles",
"predict_pcs"
)
)
parSapplyLB(
cl,
1:length(subdir_tiles),
function(x) {
tmpfolder <- paste0(dir_dat, "/Temp/")
terraOptions(memfrac = 0.02, tempdir = tmpfolder)
cov_x_files <- subdir_tiles[x] %>%
list.files(full.names = TRUE)
cov_x_names <- cov_x_files %>%
basename() %>%
file_path_sans_ext()
cov_x <- cov_x_files %>% rast()
names(cov_x) <- cov_x_names
cov_x2 <- subset(cov_x, rownames(pcs$rotation))
# Set NAs to zero for terodep10m and the sine and cosine of the aspect
cov_x2$terodep10m %<>% terra::subst(., NA, 0)
cov_x2$cos_aspect_radians %<>% terra::subst(., NA, 0)
cov_x2$sin_aspect_radians  %<>% terra::subst(., NA, 0)
tilename_x <- basename(subdir_tiles[x])
outname_x <- dir_pcs_tiles %>%
paste0(
., "pcs_",
tilename_x, ".tif"
)
pcs_tilex <- predict(
cov_x2,
pcs,
fun = predict_pcs,
na.rm = TRUE,
n_digits = n_digits,
filename = outname_x,
overwrite = TRUE
)
for (k in 1:nlyr(pcs_tilex)) {
writeRaster(
pcs_tilex[[k]],
filename = paste0(subdir_tiles[x], "/PC", k, ".tif")
)
}
return(NULL)
}
)
library(terra)
library(caret)
library(magrittr)
library(dplyr)
library(tibble)
dir_code <- getwd()
root <- dirname(dir_code)
dir_dat <- paste0(root, "/digijord_data/")
dir_cov <- dir_dat %>% paste0(., "/covariates")
mycrs <- "EPSG:25832"
# Load covariates
dir_cov <- dir_dat %>% paste0(., "/covariates")
cov_cats <- dir_code %>%
paste0(., "/cov_categories_20231110.csv") %>%
read.table(
sep = ";",
header = TRUE
)
cov_files <- dir_cov %>% list.files()
cov_names <- cov_files %>% tools::file_path_sans_ext()
cov_names %>%
write.table(
paste0("cov_names_", Sys.Date(), ".csv")
)
cov_names[!cov_names %in% cov_cats$name]
cov <- paste0(dir_cov, "/", cov_files) %>%
rast()
names(cov) <- cov_names
crs(cov) <- mycrs
# Select relevant covariates
cov_selected <- cov_cats %>%
filter(anbm_use == 1) %>%
dplyr::select(., name) %>%
unlist() %>%
unname()
cov_use <- terra::subset(cov, cov_selected)
# Extract random points
set.seed(1)
?saveRDS
readRDS(paste0(dir_dat, "cov_pts_pca.rds"))
cov_pts <- readRDS(paste0(dir_dat, "cov_pts_pca.rds"))
covnames_dropogc <- cov_pts %>%
colnames() %>%
grep('ogc_pi', ., value = TRUE, invert = TRUE) %>%
grep('PC', ., value = TRUE, invert = TRUE)
cov_pts_dropogc <- cov_pts[, colnames(cov_pts) %in% covnames_dropogc]
cov_pts_dropogc[is.na(cov_pts_dropogc)] <- 0
pcs_raw <- prcomp(
x = cov_pts_dropogc,
scale. = TRUE
)
num_pcs <- sum((cumsum(pcs_raw$sdev) / sum(pcs_raw$sdev)) < 0.99) + 1
pcs <- prcomp(
x = cov_pts_dropogc,
scale. = TRUE,
rank. = num_pcs
)
pcs_rotation <- pcs$rotation %>%
as.data.frame() %>%
rownames_to_column()
pcs_rotation %>%
saveRDS(file = paste0(dir_dat, "pcs_rotation.rds"))
pcs_rotation %>%
write.table(
file = paste0(dir_dat, "pcs_rotation.csv"),
sep = ";"
)
?write.table
pcs_rotation %>%
write.table(
file = paste0(dir_dat, "pcs_rotation.csv"),
sep = ";",
row.names = FALSE
)
dir_cov_10km <- dir_dat %>%
paste0(., "/testarea_10km/covariates/")
cov_10km <- dir_cov_10km %>%
list.files(full.names = TRUE) %>%
rast() %>%
subset(covnames_dropogc)
spatSample(cov_10km, 100000) %>%
apply(., 2, function(x) sum(is.na(x))) %>%
.[. != 0]
# Set NAs to zero for terodep10m and the sine and cosine of the aspect
cov_10km$terodep10m %<>% terra::subst(., NA, 0)
cov_10km$cos_aspect_radians %<>% terra::subst(., NA, 0)
cov_10km$sin_aspect_radians  %<>% terra::subst(., NA, 0)
# Predict PCs for the test area
pcs_10km  <- terra::predict(cov_10km, pcs, na.rm = TRUE)
plot(pcs_10km)
library(parallel)
library(dplyr)
library(foreach)
library(stringr)
dir_cov <- dir_dat %>% paste0(., "/covariates")
cov_files <- dir_cov %>% list.files()
cov_names <- cov_files %>% tools::file_path_sans_ext()
n_digits <- 3
# Function for predicting pcs
predict_pcs <- function(mod, dat, n_digits = NULL, ...) {
rfun2 <- function(mod2, dat2, n_digits2, ...) {
out2 <- predict(
object = mod2,
newdata = dat2,
...
)
if (!is.null(n_digits2)) {
out2 <- signif(out2, digits = n_digits2)
}
return(out2)
}
out <- rfun2(mod, dat, n_digits, ...)
return(out)
}
# Tiles for model prediction
numCores <- detectCores()
numCores
dir_tiles <- dir_dat %>%
paste0(., "/tiles_591/")
subdir_tiles <- dir_tiles %>%
list.dirs() %>%
.[-1]
dir_pcs <- dir_dat %>%
paste0(., "/pcs/") %T>%
dir.create()
dir_pcs_tiles <- dir_pcs %>%
paste0(., "/tiles/") %T>%
dir.create()
subdir_tiles
subdir_tiles %>% paste0(., "/PC1")
?parSapplyLB
numCores <- detectCores()
numCores
dir_tiles <- dir_dat %>%
paste0(., "/tiles_591/")
subdir_tiles <- dir_tiles %>%
list.dirs() %>%
.[-1]
dir_pcs <- dir_dat %>%
paste0(., "/pcs/") %T>%
dir.create()
dir_pcs_tiles <- dir_pcs %>%
paste0(., "/tiles/") %T>%
dir.create()
showConnections()
cl <- makeCluster(numCores)
clusterEvalQ(
cl,
{
library(terra)
library(caret)
library(magrittr)
library(dplyr)
library(tools)
library(stats)
}
)
clusterExport(
cl,
c("pcs",
"subdir_tiles",
"cov_selected",
"dir_dat",
"n_digits",
"dir_pcs",
"dir_pcs_tiles",
"predict_pcs"
)
)
parSapplyLB(
cl,
1:length(subdir_tiles),
function(x) {
tmpfolder <- paste0(dir_dat, "/Temp/")
terraOptions(memfrac = 0.02, tempdir = tmpfolder)
cov_x_files <- subdir_tiles[x] %>%
list.files(full.names = TRUE)
cov_x_names <- cov_x_files %>%
basename() %>%
file_path_sans_ext()
cov_x <- cov_x_files %>% rast()
names(cov_x) <- cov_x_names
cov_x2 <- subset(cov_x, rownames(pcs$rotation))
# Set NAs to zero for terodep10m and the sine and cosine of the aspect
cov_x2$terodep10m %<>% terra::subst(., NA, 0)
cov_x2$cos_aspect_radians %<>% terra::subst(., NA, 0)
cov_x2$sin_aspect_radians  %<>% terra::subst(., NA, 0)
tilename_x <- basename(subdir_tiles[x])
pcs_tilex <- predict(
cov_x2,
pcs,
fun = predict_pcs,
na.rm = TRUE,
n_digits = n_digits,
overwrite = TRUE
)
for (k in 1:nlyr(pcs_tilex)) {
writeRaster(
pcs_tilex[[k]],
filename = paste0(subdir_tiles[x], "/PC", k, ".tif")
)
}
write.table(1, file = paste0(dir_pcs,"/", tilename_x, "_done.csv"))
return(NULL)
}
)
