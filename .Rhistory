try(dev.off())
tiff(
paste0(dir_results, "/depth_weights_test_", testn, ".tiff"),
width = 16,
height = 10,
units = "cm",
res = 300
)
d_out %>%
ggplot(aes(x = Weights, y = Depth, color = Dataset)) +
facet_wrap(~Fraction, nrow = 1, labeller = label_parsed) +
geom_path() +
scale_y_reverse(expand = c(0, 0)) +
scale_x_continuous(
guide = guide_axis(check.overlap = TRUE),
breaks = c(0, 2000),
expand = expansion(mult = c(0.01, 0.1),
add = c(0.01, 0.1))
) +
theme_bw() +
theme(strip.text.x = element_text(size = 6)) +
labs(
x = "Total weights",
y = "Depth (cm)"
)
try(dev.off())
try(dev.off())
library(colorRamps)
library(rcartocolor) # for colorblind palette
mycolors <- carto_pal(12, "Safe") %>% sort()
library(TSP)
l <- list()
ntop <- 20
for (i in 1:length(models))
{
l[[i]] <- varImp(models[[i]])$importance %>%
as_tibble(rownames = "covariate") %>%
drop_na() %>%
arrange(-Overall) %>%
slice_head(n = ntop) %>%
mutate(target = fractions[i]) %>%
mutate(rank = 1:ntop)
}
l %<>% bind_rows() %>%
mutate(
target = factor(
target,
levels = fractions
)
)
l_cat <- cov_cats %>%
mutate(
covariate = name,
category = case_when(
category == "basic" ~ scorpan,
category == "WATEM" ~ "OR",
category == "sentinel_composite" ~ "S2 time series",
category == "bare_soil" ~ "Bare soil",
.default = "Other"
)
)
l %<>%
left_join(l_cat)
l %<>%
ungroup() %>%
arrange(target, Overall) %>%
mutate(order = row_number())
l %<>% mutate(
category = case_when(
covariate == "upper" ~ "Depth",
covariate == "lower" ~ "Depth",
covariate == "year" ~ "Time",
category == "N" ~ "Spatial position",
category == "R" ~ "Topography",
category == "C" ~ "Climate",
category == "C " ~ "Climate",
category == "P" ~ "Parent materials",
category == "S" ~ "Soil",
category == "SO" ~ "Soil and organisms",
category == "CR" ~ "Climate and topography",
category == "OR" ~ "Organisms and topography",
category == "O" ~ "Organisms",
category == "RP" ~ "Topography and parent materials",
.default = category
)
)
l$category %<>% as.factor()
catcolors <- l$category %>%
levels() %>%
length() %>%
carto_pal(., "Safe")
names(catcolors) <- levels(l$category)
colScale <- scale_fill_manual(name = "category", values = catcolors)
# Plot covariate importance
tiff(
paste0(dir_results, "/importance_test", testn, ".tiff"),
width = 40,
height = 20,
units = "cm",
res = 300
)
l %>%
ggplot(aes(x = order, y = Overall, bg = category)) +
geom_col() +
facet_wrap(
~target,
ncol = 3,
scales = "free"
) +
# xlim(1, ntop) +
ylim(0, NA) +
coord_flip() +
scale_x_continuous(
breaks = l$order,
labels = l$covariate,
expand = c(0, 0)
) +
colScale
try(dev.off())
dir_cov_10km <- dir_dat %>%
paste0(., "/testarea_10km/covariates/")
predfolder <- dir_results %>%
paste0(., "/predictions_testarea/") %T>%
dir.create()
source("f_predict_passna.R")
# Make the maps
breaks <- c(0, 30, 60, 100, 200)
uppers <- breaks %>% rev() %>% .[-1] %>% rev()
lowers <- breaks %>% .[-1]
map_spec <- expand_grid(
fraction_i = 1:6,
interval = 1:4
)
showConnections()
numCores <- 20
cl <- makeCluster(numCores)
clusterEvalQ(
cl,
{
library(terra)
library(caret)
library(xgboost)
library(magrittr)
library(dplyr)
library(tools)
}
)
clusterExport(
cl,
c(
"uppers",
"lowers",
"map_spec",
"predfolder",
"dir_cov_10km",
"models",
"cov_selected",
"predict_passna",
"dir_dat",
"fractions"
)
)
parSapplyLB(
cl,
1:nrow(map_spec),
function(x) {
tmpfolder <- paste0(dir_dat, "/Temp/")
terraOptions(memfrac = 0.02, tempdir = tmpfolder)
cov_10km <- dir_cov_10km %>%
list.files(full.names = TRUE) %>%
rast() %>%
subset(cov_selected)
outname <- predfolder %>%
paste0(
., "/", fractions[map_spec$fraction_i[x]],
"_depth", map_spec$interval[x],
".tif"
)
predict(
cov_10km,
models[[map_spec$fraction_i[x]]],
fun = predict_passna,
na.rm = FALSE,
const = data.frame(
SOM_removed = 1,
# year = 2010,
upper = uppers[map_spec$interval[x]],
lower = lowers[map_spec$interval[x]]
),
n_const = 3,
n_digits = 1,
filename = outname,
overwrite = TRUE
)
return(NA)
}
)
stopCluster(cl)
foreach::registerDoSEQ()
rm(cl)
maps_10_km <- list()
for (i in 1:length(fractions)) {
maps_10_km[[i]] <- c(1:4) %>%
paste0(
predfolder, "/", fractions[i],
"_depth", .,
".tif"
) %>%
rast()
names(maps_10_km[[i]]) <- paste0(
fraction_names[i], ", ", uppers, " - ", lowers, " cm"
)
}
# SOC depth distribution is very obviously wrong. I will need to fix it. (ok)
# Using a separate density for wetlands fixes this issue. (ok)
# Ideally, I should use the extent of the central wetlands, which is the survey
# area for the SINKS dataset. (ok)
# Figures for 10 km maps
library(viridisLite)
library(tidyterra)
try(dev.off())
lapply(1:6, function(x) {
fname <- paste0(dir_results, "/", fractions[x], "_10km_test", testn, ".tiff")
myplot <- autoplot(maps_10_km[[x]]) +
scale_fill_gradientn(colours = viridis(100), na.value = NA)
tiff(
fname,
width = 16,
height = 14,
units = "cm",
res = 300
)
print(myplot)
try(dev.off())
try(dev.off())
})
# maps_10km_s2 <- c(maps_10km[[1]], maps_10km[[2]], maps_10km[[3]], exp(maps_10km[[5]])/0.568, exp(maps_10km[[6]]))
source("f_classify_soil_JB.R")
maps_10km_jb <- lapply(
1:length(uppers),
function(x) {
maps_10_km_s2 <- c(
maps_10_km[[1]][[x]],
maps_10_km[[2]][[x]],
maps_10_km[[3]][[x]],
maps_10_km[[5]][[x]] / 0.568,
maps_10_km[[6]][[x]]
)
names(maps_10_km_s2) <- c("clay", "silt", "sand_f", "SOM", "CaCO3")
out <- lapp(maps_10_km_s2, classify_soil_JB)
return(out)
}
) %>%
rast()
levels(maps_10km_jb) <- rep(
list(
data.frame(
id = 1:12,
Class = paste0("JB", 1:12)
)
),
nlyr(maps_10km_jb)
)
names(maps_10km_jb) <- paste0("JB class, ", uppers, " - ", lowers, " cm")
myrgb <- col2rgb(mycolors)
tsp <- as.TSP(dist(t(myrgb)))
set.seed(1)
sol <- solve_TSP(tsp, control = list(repetitions = 1e3))
ordered_cols <- mycolors[sol]
classes_in_maps <- values(maps_10km_jb) %>%
unlist() %>%
matrix(ncol = 1) %>%
unique() %>%
sort()
cols_in_maps <- ordered_cols[classes_in_maps]
plot_jb <- autoplot(maps_10km_jb) +
scale_fill_discrete(type = cols_in_maps)
tiff(
paste0(dir_results, "/JB_test_", testn, ".tiff"),
width = 15,
height = 10,
units = "cm",
res = 300
)
print(plot_jb)
dev.off()
maps_10_km
rast(
maps_10_km[[1]][[i]],
maps_10_km[[2]][[i]],
maps_10_km[[3]][[i]],
maps_10_km[[4]][[i]]
)
i <- 1
rast(
maps_10_km[[1]][[i]],
maps_10_km[[2]][[i]],
maps_10_km[[3]][[i]],
maps_10_km[[4]][[i]]
)
i <- 1
c(
maps_10_km[[1]][[i]],
maps_10_km[[2]][[i]],
maps_10_km[[3]][[i]],
maps_10_km[[4]][[i]]
)
c(
maps_10_km[[1]][[i]],
maps_10_km[[2]][[i]],
maps_10_km[[3]][[i]],
maps_10_km[[4]][[i]]
) %>% sum() %>% plot()
mineral_sum_r <- c(
maps_10_km[[1]][[i]],
maps_10_km[[2]][[i]],
maps_10_km[[3]][[i]],
maps_10_km[[4]][[i]]
) %>% sum()
i <- 1
mineral_raw <- c(
maps_10_km[[1]][[i]],
maps_10_km[[2]][[i]],
maps_10_km[[3]][[i]],
maps_10_km[[4]][[i]]
)
mineral_sum_r <- mineral_raw %>% sum()
mineral_final <- mineral_raw*100 / mineral_sum_r
plot(mineral_raw)
plot(mineral_final)
maps_10_km
maps_10_km_minera_fin <- lapply(
1:4, function(i) {
mineral_raw <- c(
maps_10_km[[1]][[i]],
maps_10_km[[2]][[i]],
maps_10_km[[3]][[i]],
maps_10_km[[4]][[i]]
)
mineral_sum_r <- mineral_raw %>% sum()
mineral_final <- mineral_raw*100 / mineral_sum_r
return(mineral_final)
}
)
mineral_final
maps_10_km_mineral_fin <- lapply(
1:4, function(i) {
mineral_raw <- c(
maps_10_km[[1]][[i]],
maps_10_km[[2]][[i]],
maps_10_km[[3]][[i]],
maps_10_km[[4]][[i]]
)
mineral_sum_r <- mineral_raw %>% sum()
mineral_final <- mineral_raw*100 / mineral_sum_r
return(mineral_final)
}
)
maps_10_km_mineral_fin
maps_10_km_mineral_fin <- lapply(
1:4, function(i) {
mineral_raw <- c(
maps_10_km[[1]][[i]],
maps_10_km[[2]][[i]],
maps_10_km[[3]][[i]],
maps_10_km[[4]][[i]]
)
mineral_sum_r <- mineral_raw %>% sum()
mineral_final <- mineral_raw*100 / mineral_sum_r
mineral_final %>% round(., digits = 1)
return(mineral_final)
}
)
maps_10_km_mineral_fin
maps_10_km_mineral_fin <- lapply(
1:4, function(i) {
mineral_raw <- c(
maps_10_km[[1]][[i]],
maps_10_km[[2]][[i]],
maps_10_km[[3]][[i]],
maps_10_km[[4]][[i]]
)
mineral_sum_r <- mineral_raw %>% sum()
mineral_final <- mineral_raw*100 / mineral_sum_r
mineral_final %<>% round(., digits = 1)
return(mineral_final)
}
)
maps_10_km_mineral_fin
maps_10_km_mineral_fin <- lapply(
1:4, function(i) {
mineral_raw <- c(
maps_10_km[[1]][[i]],
maps_10_km[[2]][[i]],
maps_10_km[[3]][[i]],
maps_10_km[[4]][[i]]
)
mineral_sum_r <- mineral_raw %>% sum()
mineral_final <- mineral_raw*100 / mineral_sum_r
mineral_final %<>% round(., digits = 1)
return(mineral_final)
}
)
maps_10_km_mineral_fin_frac <- lapply(
1:4, function(x) {
out <- c(
maps_10_km_mineral_fin[[1]][[i]],
maps_10_km_mineral_fin[[2]][[i]],
maps_10_km_mineral_fin[[3]][[i]],
maps_10_km_mineral_fin[[4]][[i]]
)
}
)
maps_10_km_mineral_fin_frac
maps_10_km_mineral_fin <- lapply(
1:4, function(i) {
mineral_raw <- c(
maps_10_km[[1]][[i]],
maps_10_km[[2]][[i]],
maps_10_km[[3]][[i]],
maps_10_km[[4]][[i]]
)
mineral_sum_r <- mineral_raw %>% sum()
mineral_final <- mineral_raw*100 / mineral_sum_r
mineral_final %<>% round(., digits = 1)
return(mineral_final)
}
)
maps_10_km_mineral_fin_frac <- lapply(
1:4, function(x) {
out <- c(
maps_10_km_mineral_fin[[1]][[x]],
maps_10_km_mineral_fin[[2]][[x]],
maps_10_km_mineral_fin[[3]][[x]],
maps_10_km_mineral_fin[[4]][[x]]
)
}
)
maps_10_km_mineral_fin_frac
for (i in 1:length(maps_10_km_mineral_fin_frac)) {
maps_10_km[[i]] <- maps_10_km_mineral_fin_frac[[o]]
}
for (i in 1:length(maps_10_km_mineral_fin_frac)) {
maps_10_km[[i]] <- maps_10_km_mineral_fin_frac[[i]]
}
library(viridisLite)
library(tidyterra)
try(dev.off())
lapply(1:6, function(x) {
fname <- paste0(dir_results, "/", fractions[x], "_10km_test", testn, ".tiff")
myplot <- autoplot(maps_10_km[[x]]) +
scale_fill_gradientn(colours = viridis(100), na.value = NA)
tiff(
fname,
width = 16,
height = 14,
units = "cm",
res = 300
)
print(myplot)
try(dev.off())
try(dev.off())
})
source("f_classify_soil_JB.R")
maps_10km_jb <- lapply(
1:length(uppers),
function(x) {
maps_10_km_s2 <- c(
maps_10_km[[1]][[x]],
maps_10_km[[2]][[x]],
maps_10_km[[3]][[x]],
maps_10_km[[5]][[x]] / 0.568,
maps_10_km[[6]][[x]]
)
names(maps_10_km_s2) <- c("clay", "silt", "sand_f", "SOM", "CaCO3")
out <- lapp(maps_10_km_s2, classify_soil_JB)
return(out)
}
) %>%
rast()
levels(maps_10km_jb) <- rep(
list(
data.frame(
id = 1:12,
Class = paste0("JB", 1:12)
)
),
nlyr(maps_10km_jb)
)
names(maps_10km_jb) <- paste0("JB class, ", uppers, " - ", lowers, " cm")
myrgb <- col2rgb(mycolors)
tsp <- as.TSP(dist(t(myrgb)))
set.seed(1)
sol <- solve_TSP(tsp, control = list(repetitions = 1e3))
ordered_cols <- mycolors[sol]
classes_in_maps <- values(maps_10km_jb) %>%
unlist() %>%
matrix(ncol = 1) %>%
unique() %>%
sort()
cols_in_maps <- ordered_cols[classes_in_maps]
plot_jb <- autoplot(maps_10km_jb) +
scale_fill_discrete(type = cols_in_maps)
tiff(
paste0(dir_results, "/JB_test_", testn, ".tiff"),
width = 15,
height = 10,
units = "cm",
res = 300
)
print(plot_jb)
try(dev.off())
