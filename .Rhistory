rmse_covered
)
return(out)
}
acc_all <- foreach(i = 1:6, .combine = rbind) %do%
get_acc(models[[i]], i)
acc_all %<>% mutate(fraction = fraction_names, .before = 1)
write.table(
acc_all,
paste0(dir_results, "/acc_all_test", testn, ".csv"),
sep = ";",
row.names = FALSE
)
getpred <- function(x2, i2) {
df <- x2$pred %>%
arrange(rowIndex) %>%
distinct(rowIndex, .keep_all = TRUE) %>%
select(c(pred, obs))
# if (i2 > 4) df %<>% exp
df %<>% mutate(
fraction = fractions[i2],
upper = quantile(obs, 0.99)
) %>%
filter(obs < upper) %>%
filter(pred < upper) %>%
filter(obs >= 0)
return(df)
}
allpred <- foreach(i = 1:6, .combine=rbind) %do%
getpred(models[[i]], i)
allpred$fraction %<>% factor(levels = fractions)
levels(allpred$fraction) <- c(
"Clay", "Silt", "Fine sand", "Coarse sand", "SOC", "CaCO3"
)
tiff(
paste0(dir_results, "/accuracy_test", testn, ".tiff"),
width = 15,
height = 10,
units = "cm",
res = 300
)
allpred %>%
ggplot(aes(x = obs, y = pred)) +
geom_point(alpha = .01, shape = 16) +
facet_wrap(~ fraction, nrow = 2, scales = "free") +
theme(aspect.ratio = 1) +
scale_x_continuous(expand = c(0, 0)) +
scale_y_continuous(expand = c(0, 0)) +
geom_abline(col = "red") +
geom_blank(aes(y = upper)) +
geom_blank(aes(x = upper)) +
geom_blank(aes(y = 0)) +
geom_blank(aes(x = 0)) +
xlab("Observation (%)") +
ylab("Prediction (%)")
dev.off()
models
models[[6]]$pred
models[[6]]$pred %>% arrange(pred)
models[[6]]$pred %>% arrange(-pred)
models[[6]]$pred %>% arrange(pred)
models_sum <- lapply(models, function(x) {
out <- x$results %>%
filter(RMSEw == min(RMSEw))
return(out)
}
) %>%
bind_rows() %>%
mutate(
Fraction = fractions,
.before = 1
) %>%
write.table(
file = paste0(dir_results, "/models_sum.csv"),
sep = ";",
row.names = FALSE
)
models_sum
models_sum <- lapply(models, function(x) {
out <- x$results %>%
filter(RMSEw == min(RMSEw))
return(out)
}
) %>%
bind_rows() %>%
mutate(
Fraction = fractions,
.before = 1
) %T>%
write.table(
file = paste0(dir_results, "/models_sum.csv"),
sep = ";",
row.names = FALSE
)
models_sum
get_acc <- function(x2, i2) {
df <- x2$pred %>%
arrange(rowIndex) %>%
distinct(rowIndex, .keep_all = TRUE) %>%
select(c(pred, obs, weights)) %>%
mutate(
pred = ifelse(pred < 0, 0, pred)
)
# if (i2 > 4) df %<>% exp
df %<>% bind_cols(x2$trainingData)
r2_all <- df %$% get_R2w(cbind(pred, obs), weights)
r2_bare <- df %>%
filter(!is.na(s2_geomedian_b2)) %$%
get_R2w(cbind(pred, obs), weights)
r2_covered <- df %>%
filter(is.na(s2_geomedian_b2)) %$%
get_R2w(cbind(pred, obs), weights)
rmse_all <- df %$% get_RMSEw(cbind(pred, obs), weights)
rmse_bare <- df %>%
filter(!is.na(s2_geomedian_b2)) %$%
get_RMSEw(cbind(pred, obs), weights)
rmse_covered <- df %>%
filter(is.na(s2_geomedian_b2)) %$%
get_RMSEw(cbind(pred, obs), weights)
out <- data.frame(
r2_all,
r2_bare,
r2_covered,
rmse_all,
rmse_bare,
rmse_covered
)
return(out)
}
acc_all <- foreach(i = 1:6, .combine = rbind) %do%
get_acc(models[[i]], i)
acc_all %<>% mutate(fraction = fraction_names, .before = 1)
write.table(
acc_all,
paste0(dir_results, "/acc_all_test", testn, ".csv"),
sep = ";",
row.names = FALSE
)
getpred <- function(x2, i2) {
df <- x2$pred %>%
arrange(rowIndex) %>%
distinct(rowIndex, .keep_all = TRUE) %>%
select(c(pred, obs)) %>%
mutate(
pred = ifelse(pred < 0, 0, pred)
)
# if (i2 > 4) df %<>% exp
df %<>% mutate(
fraction = fractions[i2],
upper = quantile(obs, 0.99)
) %>%
filter(obs < upper) %>%
filter(pred < upper) %>%
filter(obs >= 0)
return(df)
}
allpred <- foreach(i = 1:6, .combine=rbind) %do%
getpred(models[[i]], i)
allpred$fraction %<>% factor(levels = fractions)
levels(allpred$fraction) <- c(
"Clay", "Silt", "Fine sand", "Coarse sand", "SOC", "CaCO3"
)
tiff(
paste0(dir_results, "/accuracy_test", testn, ".tiff"),
width = 15,
height = 10,
units = "cm",
res = 300
)
allpred %>%
ggplot(aes(x = obs, y = pred)) +
geom_point(alpha = .01, shape = 16) +
facet_wrap(~ fraction, nrow = 2, scales = "free") +
theme(aspect.ratio = 1) +
scale_x_continuous(expand = c(0, 0)) +
scale_y_continuous(expand = c(0, 0)) +
geom_abline(col = "red") +
geom_blank(aes(y = upper)) +
geom_blank(aes(x = upper)) +
geom_blank(aes(y = 0)) +
geom_blank(aes(x = 0)) +
xlab("Observation (%)") +
ylab("Prediction (%)")
dev.off()
plot(maps_10km, col = cividis(100), clip = TRUE)
plot(maps_10km, col = cividis(100), box = FALSE)
warnings()
?plot
install.packages("terra")
install.packages("terra")
# 08: Script for making maps
library(parallel)
library(caret)
library(terra)
library(magrittr)
library(dplyr)
library(xgboost)
library(foreach)
dir_code <- getwd()
root <- dirname(dir_code)
dir_dat <- paste0(root, "/digijord_data/")
testn <- 9
mycrs <- "EPSG:25832"
dir_results <- dir_dat %>%
paste0(., "/results_test_", testn, "/")
fractions <- c("clay", "silt", "fine_sand", "coarse_sand", "logSOC", "logCaCO3")
fractions_alt <- c("clay", "silt", "fine_sand", "coarse_sand", "SOC", "CaCO3")
fractions <- fractions_alt
fraction_names <- c(
"Clay", "Silt", "Fine sand", "Coarse sand", "SOC", "CaCO3"
)
fraction_names_underscore <- c(
"Clay", "Silt", "Fine_sand", "Coarse_sand", "SOC", "CaCO3"
)
dir_cov <- dir_dat %>% paste0(., "/covariates")
cov_files <- dir_cov %>% list.files()
cov_names <- cov_files %>% tools::file_path_sans_ext()
cov_cats <- dir_code %>%
paste0(., "/cov_categories_20230323.csv") %>%
read.table(
sep = ";",
header = TRUE
)
cov_selected <- cov_cats %>%
filter(anbm_use == 1) %>%
select(name) %>%
unlist() %>%
unname()
source("f_predict_passna.R")
# Load models
models_loaded <- lapply(
1:6,
function(x) {
out <- fractions[x] %>%
paste0(dir_results, "/model_", ., ".rds") %>%
readRDS()
return(out)
}
)
models <- models_loaded
# Tiles for model prediction
numCores <- detectCores()
numCores
dir_tiles <- dir_dat %>%
paste0(., "/tiles_591/")
subdir_tiles <- dir_tiles %>% list.dirs() %>% .[-1]
dir_pred_all <- dir_results %>%
paste0(., "/predictions/") %T>%
dir.create()
dir_pred_tiles <- dir_pred_all  %>%
paste0(., "/tiles/") %T>%
dir.create()
n_digits <- 1
for (i in 1:length(fractions)) {
frac <- fraction_names_underscore[i]
dir_pred_tiles_frac <- dir_pred_tiles %>%
paste0(., "/", frac, "/") %T>%
dir.create()
model_i <- models[[i]]
showConnections()
cl <- makeCluster(numCores)
clusterEvalQ(
cl,
{
library(terra)
library(caret)
library(xgboost)
library(magrittr)
library(dplyr)
}
)
clusterExport(
cl,
c("i",
"model_i",
"subdir_tiles",
"dir_pred_tiles_frac",
"frac",
"cov_names",
"cov_selected",
"predict_passna",
"dir_dat",
"n_digits"
)
)
parSapplyLB(
cl,
1:length(subdir_tiles),
function(x) {
tmpfolder <- paste0(dir_dat, "/Temp/")
terraOptions(memfrac = 0.02, tempdir = tmpfolder)
cov_x <- subdir_tiles[x] %>%
list.files(full.names = TRUE) %>%
rast()
names(cov_x) <- cov_names
cov_x2 <- subset(cov_x, cov_selected)
tilename_x <- basename(subdir_tiles[x])
outname_x <- dir_pred_tiles_frac %>%
paste0(., "/", frac, "_", tilename_x, ".tif")
outmap <- predict(
cov_x2,
model_i,
fun = predict_passna,
na.rm = FALSE,
const = data.frame(
SOM_removed = 1,
year = 2010
)
)
# if (i > 4) {
#   outmap2 <- terra::exp(outmap)
#   outmap <- outmap2
# }
terra::math(
outmap,
"round",
digits = n_digits,
filename = outname_x,
overwrite = TRUE
)
}
)
stopCluster(cl)
foreach::registerDoSEQ()
rm(cl)
outtiles_frac <- dir_pred_tiles_frac %>%
list.files(full.names = TRUE) %>%
sprc()
merge(
outtiles_frac,
filename = paste0(dir_pred_all, frac, "_merged.tif"),
overwrite = TRUE
)
}
# 08: Script for making maps
library(parallel)
library(caret)
library(terra)
library(magrittr)
library(dplyr)
library(xgboost)
library(foreach)
dir_code <- getwd()
root <- dirname(dir_code)
dir_dat <- paste0(root, "/digijord_data/")
testn <- 9
mycrs <- "EPSG:25832"
dir_results <- dir_dat %>%
paste0(., "/results_test_", testn, "/")
fractions <- c("clay", "silt", "fine_sand", "coarse_sand", "logSOC", "logCaCO3")
fractions_alt <- c("clay", "silt", "fine_sand", "coarse_sand", "SOC", "CaCO3")
fractions <- fractions_alt
fraction_names <- c(
"Clay", "Silt", "Fine sand", "Coarse sand", "SOC", "CaCO3"
)
fraction_names_underscore <- c(
"Clay", "Silt", "Fine_sand", "Coarse_sand", "SOC", "CaCO3"
)
dir_cov <- dir_dat %>% paste0(., "/covariates")
cov_files <- dir_cov %>% list.files()
cov_names <- cov_files %>% tools::file_path_sans_ext()
cov_cats <- dir_code %>%
paste0(., "/cov_categories_20230323.csv") %>%
read.table(
sep = ";",
header = TRUE
)
cov_selected <- cov_cats %>%
filter(anbm_use == 1) %>%
select(name) %>%
unlist() %>%
unname()
source("f_predict_passna.R")
# Load models
models_loaded <- lapply(
1:6,
function(x) {
out <- fractions[x] %>%
paste0(dir_results, "/model_", ., ".rds") %>%
readRDS()
return(out)
}
)
models <- models_loaded
# Tiles for model prediction
numCores <- detectCores()
numCores
dir_tiles <- dir_dat %>%
paste0(., "/tiles_591/")
subdir_tiles <- dir_tiles %>% list.dirs() %>% .[-1]
dir_pred_all <- dir_results %>%
paste0(., "/predictions/") %T>%
dir.create()
dir_pred_tiles <- dir_pred_all  %>%
paste0(., "/tiles/") %T>%
dir.create()
n_digits <- 1
for (i in 1:length(fractions)) {
frac <- fraction_names_underscore[i]
dir_pred_tiles_frac <- dir_pred_tiles %>%
paste0(., "/", frac, "/") %T>%
dir.create()
model_i <- models[[i]]
showConnections()
cl <- makeCluster(numCores)
clusterEvalQ(
cl,
{
library(terra)
library(caret)
library(xgboost)
library(magrittr)
library(dplyr)
}
)
clusterExport(
cl,
c("i",
"model_i",
"subdir_tiles",
"dir_pred_tiles_frac",
"frac",
"cov_names",
"cov_selected",
"predict_passna",
"dir_dat",
"n_digits"
)
)
parSapplyLB(
cl,
1:length(subdir_tiles),
function(x) {
tmpfolder <- paste0(dir_dat, "/Temp/")
terraOptions(memfrac = 0.02, tempdir = tmpfolder)
cov_x <- subdir_tiles[x] %>%
list.files(full.names = TRUE) %>%
rast()
names(cov_x) <- cov_names
cov_x2 <- subset(cov_x, cov_selected)
tilename_x <- basename(subdir_tiles[x])
outname_x <- dir_pred_tiles_frac %>%
paste0(., "/", frac, "_", tilename_x, ".tif")
outmap <- predict(
cov_x2,
model_i,
fun = predict_passna,
na.rm = FALSE,
const = data.frame(
SOM_removed = 1,
year = 2010
)
)
# if (i > 4) {
#   outmap2 <- terra::exp(outmap)
#   outmap <- outmap2
# }
terra::math(
outmap,
"round",
digits = n_digits,
filename = outname_x,
overwrite = TRUE
)
}
)
stopCluster(cl)
foreach::registerDoSEQ()
rm(cl)
outtiles_frac <- dir_pred_tiles_frac %>%
list.files(full.names = TRUE) %>%
sprc()
merge(
outtiles_frac,
filename = paste0(dir_pred_all, frac, "_merged.tif"),
overwrite = TRUE
)
}
# outfiles_table <- dir_pred_tiles_frac %>%
#   list.files(full.names = TRUE) %>%
#   file.info() %>%
#   rownames_to_column()
#
# outfiles_dims <- dir_pred_tiles_frac %>%
#   list.files(full.names = TRUE) %>%
#   lapply(
#     function(x) {
#       r <- rast(x)
#       out <- dim(r)
#       return(out)
#     }
#   ) %>%
#   unlist() %>%
#   matrix(nrow = 3) %>%
#   t()
#
# cbind(outfiles_table, outfiles_dims) %>%
#   write.table(
#     file = "out_tiles.csv",
#     sep = ";",
#     row.names = FALSE
#     )
# Without tiles:
# Maps for all of Denmark
# 2023-03-09: Took 24 hours for less than 25%. Not feasible.
# March 16, 2023: 60 tiles, 121 predictors, clay: 32 hours, cubist
# March 22, 2023: 591 tiles, 121 predictors, clay: 3 h 48 min, cubist
# Post processing
# Sum texture to 100
# transform SOC and CaCO3
# round values
# END
