source("f_predict_passna.R")
pred_DC_prob <- predict(
cov_10km_DC,
model_DCfac$model,
fun = predict_passna_,
na.rm = FALSE,
const = data.frame(
dummy = NA
),
n_const = 0,
n_digits = 2,
type = "prob"
# ,
# filename = outname,
# overwrite = TRUE
)
pred_DC_prob <- predict(
cov_10km_DC,
model_DCfac$model,
fun = predict_passna_prob,
na.rm = FALSE,
const = data.frame(
dummy = NA
),
n_const = 0,
n_digits = 2,
type = "prob"
# ,
# filename = outname,
# overwrite = TRUE
)
pred_DC_prob <- predict(
cov_10km_DC,
model_DCfac$model,
fun = predict_passna_prob,
na.rm = FALSE,
const = data.frame(
dummy = NA
),
n_const = 0,
n_digits = 2,
# ,
# filename = outname,
# overwrite = TRUE
)
pred_DC_prob
plot(pred_DC_prob)
predict(model_DCfac, trdat_DC)
predict(model_DCfac$model, trdat_DC)
predict(model_DCfac$model, trdat_DC, type = "prob")
predict(model_DCfac$model, trdat_DC, type = "prob") %>% as.matrix()
predict_passna_prob(model_DCfac, trdat_DC, n_digits = 2)
predict_passna_prob(model_DCfac$model, trdat_DC, n_digits = 2)
predict_passna_prob(model_DCfac$model, trdat_DC, n_digits = NULL)
source("f_predict_passna.R")
predict_passna_prob(model_DCfac$model, trdat_DC, n_digits = NULL)
source("f_predict_passna.R")
predict_passna_prob(model_DCfac$model, trdat_DC, n_digits = NULL)
predict_passna_prob(model_DCfac$model, trdat_DC, n_digits = 2)
pred_DC_prob <- predict(
cov_10km_DC,
model_DCfac$model,
fun = predict_passna_prob,
na.rm = FALSE,
const = data.frame(
dummy = NA
),
n_const = 0,
n_digits = 2
# ,
# filename = outname,
# overwrite = TRUE
)
plot(pred_DC_prob)
pred_DC_mean <- app(
pred_DC_prob,
function(x) {
out <- stats::weighted.mean(1:5, x, na.rm = TRUE)
return(out)
}
)
plot(dc_mean)
plot(pred_DC_mean)
pred_DC_median <- app(
pred_DC_prob,
function(x) {
out <- spatstat::weighted.median(1:5, x, na.rm = TRUE)
return(out)
}
)
pred_DC_median <- app(
pred_DC_prob,
function(x) {
out <- weighted.median(1:5, x, na.rm = TRUE)
return(out)
}
)
plot(pred_DC, col = cividis(5))
plot(pred_DC, col = rev(cividis(5)))
plot(pred_DC_prob)
plot(pred_DC_prob, col = viridis(100))
plot(pred_DC_mean, col = rev(cividis(100)))
plot(pred_DC, col = rev(cividis(100)))
plot(pred_DC_median, col = rev(cividis(100)))
plot(pred_DC, col = rev(cividis(100)))
?weighted.mean
?weighted.mean
?weighted.median
pred_DC_median <- app(
pred_DC_prob,
function(x) {
out <- weighted.median(1:5, x, na.rm = TRUE, type = 4)
return(out)
}
)
plot(pred_DC_median, col = rev(cividis(100)))
plot(pred_DC_mean, col = rev(cividis(100)))
plot(pred_DC_median, col = rev(cividis(100)))
plot(pred_DC, col = rev(cividis(100)))
plot(pred_DC_mean, col = rev(cividis(100)))
plot(pred_DC_median, col = rev(cividis(100)))
library(terra)
dir_code <- getwd()
root <- dirname(dir_code)
dir_dat <- paste0(root, "/digijord_data/")
testn <- 13
mycrs <- "EPSG:25832"
fractions_alt <- c("clay", "silt", "fine_sand", "coarse_sand", "SOC", "CaCO3")
fractions <- fractions_alt
fraction_names_underscore <- c(
"Clay", "Silt", "Fine_sand", "Coarse_sand", "SOC", "CaCO3"
)
dir_results <- dir_dat %>%
paste0(., "/results_test_", testn, "/") %T>%
dir.create()
library(magrittr)
dir_results <- dir_dat %>%
paste0(., "/results_test_", testn, "/") %T>%
dir.create()
dir_pred_all <- dir_results %>%
paste0(., "/predictions/")
tex_pred <- dir_pred_all %>% list.files(
pattern = ".tif",
full.names = TRUE
) %>%
grep(".ovr", ., names(cov), value = TRUE, invert = TRUE) %>%
grep(".aux.xml", ., names(cov), value = TRUE, invert = TRUE) %>%
grep(".vat.cpg", ., names(cov), value = TRUE, invert = TRUE) %>%
grep(".vat.dbf", ., names(cov), value = TRUE, invert = TRUE) %>%
grep(
pattern = paste(fraction_names_underscore, collapse = "|"),
.,
value = TRUE
) %>%
rast()
tex_pred
tex_pred %>% names()
dir_dat %>%
paste0(
., "observations/validation/Validation_Points_RootZone.csv") %>%
read.table(header = TRUE, sep = ";")
?vect
dir_dat %>%
paste0(
., "observations/validation/Validation_Points_RootZone.csv") %>%
read.table(header = TRUE, sep = ";") %>%
vect(
geom = c("Longitude", "Latitude"),
crs = mycrs,
keepgeom = TRUE
)
dir_dat %>%
paste0(
., "observations/validation/Validation_Points_RootZone.csv") %>%
read.table(header = TRUE, sep = ";") %>%
vect(
geom = c("Longitude", "Latitude"),
crs = mycrs,
keepgeom = TRUE
) %>% plot()
tex_pred <- dir_pred_all %>% list.files(
pattern = ".tif",
full.names = TRUE
) %>%
grep(".ovr", ., names(cov), value = TRUE, invert = TRUE) %>%
grep(".aux.xml", ., names(cov), value = TRUE, invert = TRUE) %>%
grep(".vat.cpg", ., names(cov), value = TRUE, invert = TRUE) %>%
grep(".vat.dbf", ., names(cov), value = TRUE, invert = TRUE) %>%
grep(
pattern = paste(fraction_names_underscore, collapse = "|"),
.,
value = TRUE
) %>%
rast()
tex_pred
val_pts <- dir_dat %>%
paste0(
., "observations/validation/Validation_Points_RootZone.csv") %>%
read.table(header = TRUE, sep = ";") %>%
vect(
geom = c("Longitude", "Latitude"),
crs = mycrs,
keepgeom = TRUE
)
extract()
?extract
val_extr <- terra::extract(
tex_pred,
val_pts,
ID = FALSE,
bind = TRUE
) %>%
values()
val_extr
?subset
breaks <- c(0, 30, 60, 100, 200)
max_char <- breaks %>%
as.character() %>%
nchar() %>%
max()
breaks_chr <- breaks %>%
str_pad(
.,
max_char,
pad = "0"
)
library(stringr)
paste0(
fraction_names_underscore, "_", breaks_chr[1:4], "_", breaks_chr[2:5], "_cm/"
)
breaks <- c(0, 30, 60, 100, 200)
max_char <- breaks %>%
as.character() %>%
nchar() %>%
max()
breaks_chr <- breaks %>%
str_pad(
.,
max_char,
pad = "0"
)
paste0(
fraction_names_underscore, "_", breaks_chr[1:4], "_", breaks_chr[2:5], "_cm/"
)
paste0(
breaks_chr[1:4], "_", breaks_chr[2:5], "_cm"
)
paste0(
breaks_chr[1:4], "_", breaks_chr[2:5], "_cm"
) %>%
paste0(
fraction_names_underscore, "_", .
)
?paste0
paste0(
breaks_chr[1:4], "_", breaks_chr[2:5], "_cm"
) %>%
c(
fraction_names_underscore, .
)
paste0(
breaks_chr[1:4], "_", breaks_chr[2:5], "_cm"
) %>%
expand.grid(fraction_names_underscore, .) %>%
apply(., 1, paste, collapse = "_")
paste0(
breaks_chr[1:4], "_", breaks_chr[2:5], "_cm"
) %>%
expand.grid(fraction_names_underscore, .)
aste0(
breaks_chr[1:4], "_", breaks_chr[2:5], "_cm"
) %>%
expand.grid(fraction_names_underscore, .) %>%
arrange(var1)
paste0(
breaks_chr[1:4], "_", breaks_chr[2:5], "_cm"
) %>%
expand.grid(fraction_names_underscore, .) %>%
arrange(var1)
library(dplyr)
paste0(
breaks_chr[1:4], "_", breaks_chr[2:5], "_cm"
) %>%
expand.grid(fraction_names_underscore, .) %>%
arrange(var1)
paste0(
breaks_chr[1:4], "_", breaks_chr[2:5], "_cm"
) %>%
expand.grid(fraction_names_underscore, .) %>%
as.data.frame() %>%
arrange(var1)
?arrange
paste0(
breaks_chr[1:4], "_", breaks_chr[2:5], "_cm"
) %>%
expand.grid(fraction_names_underscore, .) %>%
as.data.frame()
paste0(
breaks_chr[1:4], "_", breaks_chr[2:5], "_cm"
) %>%
expand.grid(fraction_names_underscore, .) %>%
arrange(Var1)
paste0(
breaks_chr[1:4], "_", breaks_chr[2:5], "_cm"
) %>%
expand.grid(fraction_names_underscore, .) %>%
arrange(Var1) %>%
apply(., 1, paste, collapse = "_")
tex_lyr_order <- paste0(
breaks_chr[1:4], "_", breaks_chr[2:5], "_cm"
) %>%
expand.grid(fraction_names_underscore, .) %>%
arrange(Var1) %>%
apply(., 1, paste, collapse = "_")
tex_pred %>% subset(tex_lyr_order)
tex_pred %<>% subset(tex_lyr_order)
val_pts <- dir_dat %>%
paste0(
., "observations/validation/Validation_Points_RootZone.csv") %>%
read.table(header = TRUE, sep = ";") %>%
vect(
geom = c("Longitude", "Latitude"),
crs = mycrs,
keepgeom = TRUE
)
# Extract values
val_extr <- terra::extract(
tex_pred,
val_pts,
ID = FALSE,
bind = TRUE
) %>%
values()
val_extr
val_tex %>%
write.table(
paste0(dir_results, "/validation_point_predictions.csv"),
sep = ";",
row.names = FALSE
)
val_extr %>%
write.table(
paste0(dir_results, "/validation_point_predictions.csv"),
sep = ";",
row.names = FALSE
)
# Process these layers:
# wetlands_10m.tif  - 1:20,000  - smallest units about 15 m across [ok]
# geology_     - 1:25,000    - smallest units about 25 m across
# landscape_    - 1:100,000  - smallest units about 100 m across
# georeg_      - 1:100,000  - the uncertainty seems to reach 500 m in some cases
# cwl_10m_  # Already processed in ArcGIS (original resolution 20 m)
# lu_     - 1:100,000   - uncertainties are most around 50 m
# 1: Start up
library(terra)
library(magrittr)
library(tools)
dir_code <- getwd()
root <- dirname(dir_code)
dir_dat <- paste0(root, "/digijord_data/")
mycrs <- "EPSG:25832"
dir_cov <- dir_dat %>%
paste0(., "/covariates/")
cov_files <- dir_cov %>%
list.files(
pattern = ".tif",
full.names = TRUE
)
tmpfolder <- paste0(dir_dat, "/Temp/")
terraOptions(tempdir = tmpfolder)
dem_ind <- grepl(
"dhm",
cov_files
)
dem <- cov_files[dem_ind] %>% rast()
crs(dem) <- mycrs
# Process wetlands layer ([ok])
wetland_ind <- grepl(
"wetlands_10m.tif",
cov_files
)
wetlands_crisp <- cov_files[wetland_ind] %>% rast()
# drylands_crisp <- 1 - wetlands_crisp
#
# wl_twolayers_crisp <- c(wetlands_crisp, drylands_crisp)
my_focal_weights <- focalMat(
wetlands_crisp,
c(10, 20),
type = c('Gauss')
)
#
# wl_twolayers_fuzzy <- focal(
#   wl_twolayers_crisp,
#   w = my_focal_weights,
#   na.policy = "omit",
#   na.rm = TRUE
# )
#
# wl_twolayers_fuzzy_sum <- sum(wl_twolayers_fuzzy)
# wl_fuzzy_norm <- wl_twolayers_fuzzy[[1]] / wl_twolayers_fuzzy_sum
# wl_fuzzy_norm_round <- round(wl_fuzzy_norm, digits = 2)
# names(wl_fuzzy_norm_round) <- "wetlands_10m_fuzzy"
#
# writeRaster(
#   wl_fuzzy_norm_round,
#   filename = paste0(tmpfolder, "/wetlands_10m_fuzzy.tif"),
#   datatype = "FLT4S",
#   overwrite = TRUE,
#   gdal = "TILED=YES"
#   )
# Geological map
geology_ind <- grepl(
"geology",
cov_files
)
geology_crisp <- cov_files[geology_ind] %>% rast()
geology_names <- names(geology_crisp)
geology_sum <- sum(geology_crisp)
geology_sum
plot(geology_sum)
names(geology_sum) <- "geology_sum"
geology_crisp_full <- c(geology_crisp, geology_sum)
geology_fuzzy <- focal(
geology_crisp_full,
w = my_focal_weights,
na.policy = "omit",
na.rm = TRUE
)
geology_fuzzy
geology_names_fuzzy <- paste0(geology_names, "_fuzzy")
geology_files_fuzzy <- paste0(tmpfolder, geology_names_fuzzu, ".tif")
geology_files_fuzzy <- paste0(tmpfolder, geology_names_fuzzy, ".tif")
geology_names_fuzzy <- paste0("fuzzy_", geology_names)
geology_files_fuzzy <- paste0(tmpfolder, geology_names_fuzzy, ".tif")
geology_fuzzy_sum <- sum(geology_fuzzy)
geology_fuzzy_norm <- geology_fuzzy / geology_fuzzy_sum
geology_fuzzy_norm_round <- round(geology_fuzzy_norm, digits = 2)
geology_names_fuzzy <- paste0("fuzzy_", geology_names)
geology_files_fuzzy <- paste0(tmpfolder, geology_names_fuzzy, ".tif")
names(geology_fuzzy_norm_round) <- "geology_names_fuzzy"
geology_fuzzy_norm_round
plot(geology_fuzzy_norm)
plot(geology_crisp_full)
names(geology_fuzzy_norm_round)
geology_sum <- sum(geology_crisp)
geology_res <- 1 - geology_sum
names(geology_sum) <- "geology_res"
geology_crisp_full <- c(geology_crisp, geology_res)
geology_fuzzy <- focal(
geology_crisp_full,
w = my_focal_weights,
na.policy = "omit",
na.rm = TRUE
)
geology_fuzzy_sum <- sum(geology_fuzzy)
geology_fuzzy_norm <- geology_fuzzy / geology_fuzzy_sum
geology_fuzzy_norm_round <- round(geology_fuzzy_norm, digits = 2)
geology_names <- names(geology_fuzzy_norm_round)
geology_names_fuzzy <- paste0("fuzzy_", geology_names)
geology_files_fuzzy <- paste0(tmpfolder, geology_names_fuzzy, ".tif")
names(geology_fuzzy_norm_round) <- "geology_names_fuzzy"
names(geology_fuzzy_norm_round) <- geology_names_fuzzy
for (i in 1:nlyr(geology_fuzzy_norm_round)) {
writeRaster(
geology_fuzzy_norm_round[[i]],
filename = geology_files_fuzzy[[i]],
datatype = "FLT4S",
overwrite = TRUE,
gdal = "TILED=YES"
)
}
library(terra)
library(magrittr)
library(tools)
dir_code <- getwd()
root <- dirname(dir_code)
dir_dat <- paste0(root, "/digijord_data/")
mycrs <- "EPSG:25832"
dir_cov <- dir_dat %>%
paste0(., "/covariates/")
cov_files <- dir_cov %>%
list.files(
pattern = ".tif",
full.names = TRUE
)
tmpfolder <- paste0(dir_dat, "/Temp/")
terraOptions(tempdir = tmpfolder)
dem_ind <- grepl(
"dhm",
cov_files
)
dem <- cov_files[dem_ind] %>% rast()
crs(dem) <- mycrs
# Process wetlands layer [ok]
wetland_ind <- grepl(
"wetlands_10m.tif",
cov_files
)
wetlands_crisp <- cov_files[wetland_ind] %>% rast()
# drylands_crisp <- 1 - wetlands_crisp
#
# wl_twolayers_crisp <- c(wetlands_crisp, drylands_crisp)
my_focal_weights <- focalMat(
wetlands_crisp,
c(10, 20),
type = c('Gauss')
)
?aggregate
?focal
?aggregate
?mask
?invisible
