row.names = FALSE
)
getpred <- function(x2, i2) {
df <- x2$pred %>%
arrange(rowIndex) %>%
distinct(rowIndex, .keep_all = TRUE) %>%
select(c(pred, obs))
if (i2 > 4) df %<>% exp
df %<>% mutate(
fraction = fractions[i2],
upper = quantile(obs, 0.99)
) %>%
filter(obs < upper) %>%
filter(pred < upper) %>%
filter(obs >= 0)
return(df)
}
allpred <- foreach(i = 1:6, .combine=rbind) %do%
getpred(models[[i]], i)
allpred$fraction %<>% factor(levels = fractions)
levels(allpred$fraction) <- c(
"Clay", "Silt", "Fine sand", "Coarse sand", "SOC", "CaCO3"
)
tiff(
paste0(dir_results, "/accuracy_test", testn, ".tiff"),
width = 15,
height = 10,
units = "cm",
res = 300
)
allpred %>%
ggplot(aes(x = obs, y = pred)) +
geom_point(alpha = .01, shape = 16) +
facet_wrap(~ fraction, nrow = 2, scales = "free") +
theme(aspect.ratio = 1) +
scale_x_continuous(expand = c(0, 0)) +
scale_y_continuous(expand = c(0, 0)) +
geom_abline(col = "red") +
geom_blank(aes(y = upper)) +
geom_blank(aes(x = upper)) +
geom_blank(aes(y = 0)) +
geom_blank(aes(x = 0)) +
xlab("Observation (%)") +
ylab("Prediction (%)")
dev.off()
# Looking at 10 km maps
library(viridisLite)
maps_10km_stack <- maps_10km %>% rast
plot(maps_10km_stack, col = cividis(100))
maps_10km_stack2 <- c(
maps_10km_stack[[1:4]],
exp(maps_10km_stack[[5]]),
exp(maps_10km_stack[[6]])
)
names(maps_10km_stack2) <- fraction_names
tiff(
paste0(dir_results, "/maps_test", testn, ".tiff"),
width = 24,
height = 16,
units = "cm",
res = 300
)
plot(maps_10km_stack2, col = cividis(100))
dev.off()
JB <- function(clay, silt, sand_f, SOM, CaCO3)
{
out <- rep(0, length(clay))
out[CaCO3 > 10] <- 12
out[out == 0 & SOM > 10] <- 11
out[out == 0 & clay < 5 & silt < 20 & sand_f < 50] <- 1
out[out == 0 & clay < 5 & silt < 20] <- 2
out[out == 0 & clay < 10 & silt < 25 & sand_f < 40] <- 3
out[out == 0 & clay < 10 & silt < 25]<-4
out[out == 0 & clay < 15 & silt < 30 & sand_f < 40] <- 5
out[out == 0 & clay < 15 & silt < 30] <- 6
out[out == 0 & clay < 25 & silt < 35] <- 7
out[out == 0 & clay < 45 & silt < 45] <- 8
out[out == 0 & silt < 50] <- 9
out[out == 0] <- 10
return(out)
}
maps_10km_s2 <- c(maps_10km[[1]], maps_10km[[2]], maps_10km[[3]], exp(maps_10km[[5]])/0.568, exp(maps_10km[[6]]))
maps_10km_jb <- lapp(maps_10km_s2, JB) %>% as.factor()
library(colorRamps)
library(rcartocolor) # for colorblind palette
mycolors <- carto_pal(12, "Safe") %>% sort()
library(TSP)
myrgb <- col2rgb(mycolors)
tsp <- as.TSP(dist(t(myrgb)))
set.seed(1)
sol <- solve_TSP(tsp, control = list(repetitions = 1e3))
ordered_cols <- mycolors[sol]
ggplot2::qplot(x = 1:12, y = 1, fill = I(ordered_cols), geom = "col", width = 1) + ggplot2::theme_void()
tiff(
paste0(dir_results, "/JB_test", testn, ".tiff"),
width = 15,
height = 10,
units = "cm",
res = 300
)
plot(
maps_10km_jb,
col = ordered_cols[levels(maps_10km_jb)[[1]]$ID],
main = "JB-nummer"
)
dev.off()
# Covariate importance
l <- list()
ntop <- 20
for(i in 1:length(models))
{
l[[i]] <- varImp(models[[i]])$importance %>%
as_tibble(rownames = "covariate") %>%
drop_na %>%
arrange(- Overall) %>%
slice_head(n = ntop) %>%
mutate(target = fractions[i]) %>%
mutate(rank = 1:ntop)
}
l %<>% bind_rows() %>%
mutate(
target = factor(
target,
levels = fractions
)
)
l_cat <- cov_cats %>%
mutate(
covariate = name,
category = ifelse(
category == "basic",
scorpan,
category
)
)
l %<>%
left_join(l_cat)
l %<>%
ungroup() %>%
arrange(target, Overall) %>%
mutate(order = row_number())
l$category %<>% as.factor()
# levels(l$category) <- c(
#   "Bare soil",
#   "Spatial position",
#   "Parent materials",
#   "Topography",
#   "S2 time series",
#   "Soil"
# )
catcolors <- l$category %>%
levels() %>%
length() %>%
carto_pal(., "Safe")
names(catcolors) <- levels(l$category)
colScale <- scale_fill_manual(name = "category", values = catcolors)
tiff(
paste0(dir_results, "/importance_test", testn, ".tiff"),
width = 40,
height = 20,
units = "cm",
res = 300
)
l %>%
ggplot(aes(x = order, y = Overall, bg = category)) +
geom_col() +
facet_wrap(
~ target,
ncol = 3,
scales = "free"
) +
# xlim(1, ntop) +
ylim(0, NA) +
coord_flip() +
scale_x_continuous(
breaks = l$order,
labels = l$covariate,
expand = c(0, 0)
) +
colScale
dev.off()
# Plot most important covariates
# First find covariates with the highest general importance
# imp_list <- list()
#
# for (i in 1:length(fractions)) {
#   imp_list[[i]] <- models[[i]] %>%
#     varImp() %>%
#     .$importance %>%
#     rownames_to_column(var = "covariate") %>%
#     mutate(fraction = fractions[[i]])
# }
#
# imp_list %>%
#   bind_rows() %>%
#   pivot_wider(
#     id_cols = covariate,
#     names_from = fraction,
#     values_from = Overall
#     ) %>%
#   rowwise() %>%
#   mutate(
#     mean = mean(c_across(-covariate), na.rm = TRUE)
#   ) %>%
#   arrange(-mean) %>%
#   print(n = 20)
#
# figure_covariates <- c(
#   "ogc_lite_pi0000",
#   "s2_geomedian_b3",
#   "s1_baresoil_composite_vh_8_days",
#   "s2_geomedian_20180501_20180731_b7",
#   "dhm2015_terraen_10m"
#   )
#
# short_names <- c(
#   "DEM",
#   "UTMX",
#   "S1_bare_vh",
#   "S2_summer_b7",
#   "S2_bare_b3"
# )
#
# figure_cols <- c(figure_covariates, fractions)
#
# library(scales)  # For number formats
#
# tiff(
#   paste0(dir_results, "/covariate_effects_test", testn, ".tiff"),
#   width = 16,
#   height = 10,
#   units = "cm",
#   res = 300
# )
#
# obs_top %>%
#   select(all_of(figure_cols)) %>%
#   # sample_frac(0.1) %>%
#   mutate(
#     s1_baresoil_composite_vh_8_days = ifelse(
#       s1_baresoil_composite_vh_8_days == 0 | s1_baresoil_composite_vh_8_days < -3000,
#       NA,
#       s1_baresoil_composite_vh_8_days
#     ),
#     s2_geomedian_b3 = ifelse(
#       s2_geomedian_b3 > 2000,
#       NA,
#       s2_geomedian_b3
#     ),
#     logCaCO3 = ifelse(
#       is.finite(logCaCO3),
#       logCaCO3,
#       NA
#     ),
#     logSOC = ifelse(
#       logSOC > -2.5,
#       logSOC,
#       NA
#     ),
#     clay = ifelse(
#       clay < 30,
#       clay,
#       NA
#     ),
#     silt = ifelse(
#       silt < 30,
#       silt,
#       NA
#     )
#   ) %>%
#   rename(
#     DEM = dhm2015_terraen_10m,
#     UTMX = ogc_lite_pi0000,
#     S1_bare_vh = s1_baresoil_composite_vh_8_days,
#     S2_summer_b7 = s2_geomedian_20180501_20180731_b7,
#     S2_bare_b3 = s2_geomedian_b3
#   ) %>%
#   pivot_longer(
#     all_of(short_names),
#     names_to = "Covariate",
#     values_to = "x_value"
#   ) %>%
#   pivot_longer(
#     all_of(fractions),
#     names_to = "Fraction",
#     values_to = "y_value",
#   ) %>%
#   ggplot(
#     aes(
#       x = x_value,
#       y = y_value
#     )
#   ) +
#   geom_point(alpha = .01, shape = 16) +
#   facet_grid(
#     factor(Fraction, levels = fractions) ~ Covariate,
#     scales = "free"
#   ) +
#   geom_smooth(
#     se = FALSE,
#     color = "red"
#     ) +
#   labs(
#     x = "Covariate value",
#     y = "Observation (%)"
#   ) +
#   scale_x_continuous(
#     n.breaks = 3,
#     labels = label_number(scale_cut = cut_short_scale())
#     ) +
#   scale_y_continuous(n.breaks = 3) +
#   theme(strip.text.y.right = element_text(angle = 0))
#
# dev.off()
# Maps for all of Denmark
# 2023-03-09: Took 24 hours for less than 25%. Not feasible.
# Need to test:
# - Variable selection
# - Tiles
# cov2 <- subset(cov, cov_selected)
#
# predfolder2 <- paste0(dir_dat, "/predictions_", testn, "/") %T>% dir.create()
#
# tmpfolder <- paste0(dir_dat, "/Temp/")
#
# terraOptions(memfrac = 0.15, tempdir = tmpfolder)
#
# maps <- list()
#
# for(i in 1:length(fractions))
# {
#   frac <- fractions[i]
#
#   showConnections()
#
#   maps[[i]] <- predict(
#     cov2,
#     models[[i]],
#     fun = rfun,
#     na.rm = FALSE,
#     cores = 19,
#     filename = paste0(predfolder2, frac,  ".tif"),
#     overwrite = TRUE,
#     const = data.frame(
#       SOM_removed = TRUE,
#       year = 2010
#     )
#   )
# }
# Test tiles
dir_tiles <- dir_dat %>%
paste0(., "/tiles_60/")
subdir_tiles <- dir_tiles %>% list.dirs() %>% .[-1]
library(parallel)
showConnections()
detectCores()
numCores <- detectCores()
numCores
dir_pred_all <- dir_results %>%
paste0(., "/predictions/") %T>%
dir.create()
dir_pred_tiles <- dir_pred_all  %>%
paste0(., "/tiles/") %T>%
dir.create()
i <- 1
frac <- fractions[i]
dir_pred_tiles_frac <- dir_pred_tiles %>%
paste0(., "/", names(models)[i], "/") %T>%
dir.create()
model_i <- models[[i]]
cl <- makeCluster(numCores)
clusterEvalQ(
cl,
{
library(terra)
library(caret)
library(Cubist)
library(magrittr)
library(dplyr)
}
)
clusterExport(
cl,
c("model_i",
"subdir_tiles",
"dir_pred_tiles_frac",
"frac",
"cov_names",
"cov_selected",
"rfun",
"dir_dat"
)
)
# Use parSapplyLB instead
parSapplyLB(
cl,
1:length(subdir_tiles),
function(x) {
tmpfolder <- paste0(dir_dat, "/Temp/")
terraOptions(memfrac = 0.02, tempdir = tmpfolder)
cov_i <- subdir_tiles[x] %>%
list.files(full.names = TRUE) %>%
rast()
names(cov_i) <- cov_names
cov_i2 <- subset(cov_i, cov_selected)
outname_i <- dir_pred_tiles_frac %>%
paste0(., "/", frac, "_tile_", x, ".tif")
predict(
cov_i2,
model_i,
fun = rfun,
na.rm = FALSE,
filename = outname_i,
overwrite = TRUE,
const = data.frame(
SOM_removed = TRUE,
year = 2010
)
)
}
)
dir_pred_tiles_frac %>%
list.files()
dir_pred_tiles_frac %>%
list.files() %>%
file.info()
?list.files
dir_pred_tiles_frac %>%
list.files(full.names = TRUE) %>%
file.info()
dir_pred_tiles_frac %>%
list.files(full.names = TRUE) %>%
file.info() %>%
rownames_to_column()
outfiles_table <- dir_pred_tiles_frac %>%
list.files(full.names = TRUE) %>%
file.info() %>%
rownames_to_column()
cov
dim(cov)
dir_pred_tiles_frac %>%
list.files(full.names = TRUE) %>%
lapply(
function(x) {
r <- rast(x)
out <- dim(r)
return(out)
}
)
dir_pred_tiles_frac %>%
list.files(full.names = TRUE) %>%
lapply(
function(x) {
r <- rast(x)
out <- dim(r)
return(out)
}
) %>%
bind_rows()
?lapply
dir_pred_tiles_frac %>%
list.files(full.names = TRUE) %>%
lapply(
function(x) {
r <- rast(x)
out <- dim(r)
return(out)
}
) %>%
unlist()
dir_pred_tiles_frac %>%
list.files(full.names = TRUE) %>%
lapply(
function(x) {
r <- rast(x)
out <- dim(r)
return(out)
}
) %>%
unlist() %>%
matrix(ncol = 3)
dir_pred_tiles_frac %>%
list.files(full.names = TRUE) %>%
lapply(
function(x) {
r <- rast(x)
out <- dim(r)
return(out)
}
) %>%
unlist() %>%
matrix(nrow = 3) %>%
t()
outfiles_dims <- dir_pred_tiles_frac %>%
list.files(full.names = TRUE) %>%
lapply(
function(x) {
r <- rast(x)
out <- dim(r)
return(out)
}
) %>%
unlist() %>%
matrix(nrow = 3) %>%
t()
cbind(outfiles_table, outfiles_dims)
cbind(outfiles_table, outfiles_dims) %>%
write.table(
file = "out_tiles.csv",
sep = ";",
row.names = FALSE
)
