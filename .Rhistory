sep = ";",
row.names = FALSE
)
# Covariate importance
varImp_boot_mean <- lapply(
1:length(fractions),
function(x) {
out <- lapply(
models_boot_files[[x]],
function(x2) {
model_x <-  x2 %>% readRDS()
out2 <- varImp(model_x)$importance %>%
t() %>%
unlist() %>%
.[1, ]
return(out2)
}
)
out %<>%
bind_rows() %>%
replace_na() %>%
summarise(across(where(is.numeric), ~ mean(.x, na.rm = TRUE)))
out$fraction <- fractions[x]
return(out)
}
) %>%
bind_rows() %>% pivot_longer(
-fraction,
names_to = "covariate"
) %>%
pivot_wider(
id_cols = covariate,
names_from = fraction,
values_from = value
) %>%
replace(is.na(.), 0) %>%
rowwise() %>%
mutate(mean_imp = mean(c_across(-covariate))) %>%
arrange(-mean_imp)
varImp_boot_mean %>%
write.table(
file = paste0(dir_results, "/var_imp_boot_mean.csv"),
sep = ";",
row.names = FALSE
)
# Covariate importance
library(colorRamps)
library(rcartocolor) # for colorblind palette
mycolors <- carto_pal(12, "Safe") %>% sort()
library(TSP)
l <- list()
ntop <- 20
# for (i in 1:length(models_boot))
# {
#   l[[i]] <- varImp(models_boot[[i]])$importance %>%
#     as_tibble(rownames = "covariate") %>%
#     drop_na() %>%
#     arrange(-Overall) %>%
#     slice_head(n = ntop) %>%
#     mutate(target = fractions[i]) %>%
#     rowid_to_column("rank")
# }
#
# l %<>% bind_rows()
l <- varImp_boot_mean %>%
select(-mean_imp) %>%
pivot_longer(
cols = -covariate,
names_to = "target",
values_to = "Overall"
) %>%
filter(!(covariate %in% grep('ogc_pi', colnames(obs), value = TRUE))) %>%
group_by(target) %>%
mutate(Overall = Overall*100/max(Overall)) %>%
arrange(-Overall) %>%
slice_head(n = ntop) %>%
arrange(-Overall) %>%
mutate(
target = factor(
target,
levels = fractions
)
)
l_cat <- cov_cats %>%
mutate(
covariate = name,
category = case_when(
category == "basic" ~ scorpan,
category == "WATEM" ~ "OR",
category == "sentinel_composite" ~ "S2 time series",
category == "bare_soil" ~ "Bare soil",
desc_text %in% grep(
"bare soil",
cov_cats$desc_text,
value = TRUE
) ~ "Bare soil",
.default = "Other"
)
)
l %<>%
left_join(l_cat)
l %<>%
ungroup() %>%
arrange(target, Overall) %>%
mutate(order = row_number())
l %<>% mutate(
category = case_when(
covariate == "upper" ~ "Depth",
covariate == "lower" ~ "Depth",
covariate == "year" ~ "Time",
category == "N" ~ "Spatial position",
category == "R" ~ "Topography",
category == "C" ~ "Climate",
category == "C " ~ "Climate",
category == "P" ~ "Parent materials",
category == "S" ~ "Soil",
category == "SO" ~ "Soil and organisms",
category == "CR" ~ "Climate and topography",
category == "OR" ~ "Organisms and topography",
category == "O" ~ "Organisms",
category == "RP" ~ "Parent materials",
.default = category
)
)
l$category %<>% as.factor()
catcolors <- l$category %>%
levels() %>%
length() %>%
carto_pal(., "Safe")
names(catcolors) <- levels(l$category)
colScale <- scale_fill_manual(name = "category", values = catcolors)
# Plot covariate importance
tiff(
paste0(dir_results, "/boot_importance_test", testn, ".tiff"),
width = 40,
height = 20,
units = "cm",
res = 300
)
l %>%
ggplot(aes(x = order, y = Overall, bg = category)) +
geom_col() +
facet_wrap(
~target,
ncol = 3,
scales = "free"
) +
# xlim(1, ntop) +
ylim(0, NA) +
coord_flip() +
scale_x_continuous(
breaks = l$order,
labels = l$covariate,
expand = c(0, 0)
) +
colScale
try(dev.off())
# Plot importance for OGCs
ndir_plot <- 64
imp_ogc <- varImp_boot_mean %>%
select(-mean_imp) %>%
pivot_longer(
cols = -covariate,
names_to = "target",
values_to = "Overall"
) %>%
filter(covariate %in% grep('ogc_pi', colnames(obs), value = TRUE)) %>%
group_by(target) %>%
mutate(Overall = Overall*100/max(Overall)) %>%
arrange(covariate) %>%
mutate(
dir = substr(
covariate,
nchar(covariate) - 2,
nchar(covariate)
) %>%
as.numeric() %>%
"*" (ndir_plot) %>%
"/" (1000) %>%
"+" (1) %>%
round(digits = 0)
) %>%
filter(is.finite(Overall))
imp_ogc2 <- imp_ogc %>%
mutate(dir = dir + ndir_plot)
imp_ogc %<>% bind_rows(., imp_ogc2)
# imp_ogc %<>% mutate(dir = row_number())
imp_ogc %<>% mutate(
target = factor(
target,
levels = fractions,
labels = fraction_names
)
)
brks <- seq(
from = min(imp_ogc$dir),
by = (max(imp_ogc$dir) + 1 - min(imp_ogc$dir))/4,
length.out = 4
)
tiff(
paste0(dir_results, "/boot_importance_ogc_test", testn, ".tiff"),
width = 40,
height = 20,
units = "cm",
res = 300
)
ggplot(imp_ogc, aes(x = dir, y = Overall)) +
coord_polar(
start = - pi/2 - pi/(ndir_plot*2),
direction = -1) +
geom_polygon(colour = 'black', fill = rgb(0,2/3,2/3,1/2)) +
# geom_col(width = 1, colour = 'black', fill = rgb(0,2/3,2/3,1/2)) +
facet_wrap(
~ target,
ncol = 3
) +
scale_x_continuous(
breaks = brks,
labels = c('E', 'N', 'W', 'S')
) +
scale_y_continuous(limits = c(0, 100), expand = c(0, 0)) +
ylab('Covariate importance') +
theme_bw() +
theme(axis.text.x = element_text(
colour = 'black'),
axis.title.x = element_blank(),
axis.text.y = element_text(colour = 'black'),
panel.grid.major = element_line(color = 'grey'),
panel.grid.minor = element_blank(),
panel.border = element_rect(linewidth = 1)
)
try(dev.off())
# Standardize and transform predictions
boot_mean_predictions <- matrix(0, ncol = 6, nrow = nrow(obs))
for(i in 1:100) {
pred_boot_i <- data.frame(
clay = models_boot_predictions[[1]][, i],
silt = models_boot_predictions[[2]][, i],
coarse_sand = models_boot_predictions[[4]][, i],
SOC = models_boot_predictions[[5]][, i],
CaCO3 = models_boot_predictions[[6]][, i]
) %>%
mutate(
t_res = 100 - (clay + silt + coarse_sand),
clay = case_when(
t_res < 0 ~ clay*(100 + t_res)/100,
.default = clay
),
silt = case_when(
t_res < 0 ~ silt*(100 + t_res)/100,
.default = silt
),
coarse_sand = case_when(
t_res < 0 ~ coarse_sand*(100 + t_res)/100,
.default = coarse_sand
),
fine_sand = 100 - (clay + silt + coarse_sand)
) %>%
select(-t_res) %>%
relocate(any_of(fractions)) %>%
as.matrix()
boot_mean_predictions %<>% "+"(pred_boot_i)
}
boot_mean_predictions %<>%
"/"(100) %>%
round(digits = 1)
fine_sand_model_mean <- apply(models_boot_predictions[[3]], 1, mean)
cor(boot_mean_predictions[, 3], obs$fine_sand, use = "pairwise.complete.obs")^2
cor(fine_sand_model_mean, obs$fine_sand, use = "pairwise.complete.obs")^2
cor(fine_sand_model_mean, boot_mean_predictions[, 3], use = "pairwise.complete.obs")
saveRDS(
boot_mean_predictions,
paste0(dir_boot, "/models_boot_predictions_mean.rds")
)
# Inspect predictions
breaks <- c(0, 30, 60, 100, 200)
# Fine sand accuracy, based on method
finesand_acc <- data.frame(
pred_model = fine_sand_model_mean,
pred_residual = boot_mean_predictions[, 3],
observed = obs$fine_sand,
dataset = obs$fold,
w = models_weights[[3]],
upper = obs$upper,
lower = obs$lower
) %>%
filter(is.finite(observed)) %>% mutate(
indices = factor(dataset == 10, labels = c("CV", "Holdout")),
mean_d = (upper + lower)/2,
depth = cut(mean_d, breaks, include.lowest = TRUE)
) %>%
filter(is.finite(depth)) %>%
pivot_longer(
cols = c(pred_model, pred_residual),
names_to = "method",
values_to = "predicted"
) %>%
group_by(
indices, depth, method
) %>%
summarise(
r2w = round(get_R2w(cbind(predicted, observed), w), digits = 3),
rmsew = round(get_RMSEw(cbind(predicted, observed), w), digits = 3)
)
finesand_acc
write.table(
finesand_acc,
paste0(dir_results, "/boot_finesand_acc_test", testn, ".csv"),
sep = ";",
row.names = FALSE
)
# General accuracy for all observations
get_acc_all <- function(i2) {
lookup <- c(obs = fractions[i2])
dat_i <- obs %>%
mutate(
pred = boot_mean_predictions[, i2],
weights = models_weights[[i2]],
indices = factor(!models_indices[[i2]], labels = c("CV", "Holdout")),
bare = obs$s2_count_max10_fuzzy > 0,
bare = case_when(
is.na(bare) ~ 0,
.default = bare
),
mean_d = (upper + lower)/2,
depth = cut(mean_d, breaks, include.lowest = TRUE)
) %>%
rename(any_of(lookup)) %>%
filter(
is.finite(obs),
is.finite(pred),
is.finite(weights),
!is.na(depth)
)
if (i2 == 5) {
dat_i %<>% filter(
imputed == FALSE
)
}
out <- dat_i %>% group_by(indices, depth) %>%
summarise(
r2 = round(get_R2w(cbind(pred, obs), weights), digits = 3),
rmse = round(get_RMSEw(cbind(pred, obs), weights), digits = 3)
) %>%
mutate(Fraction = fraction_names[i2], .before = everything())
return(out)
}
acc_all <- foreach(i = 1:length(fractions), .combine = rbind) %do%
get_acc_all(i)
acc_all
write.table(
acc_all,
paste0(dir_results, "/boot_acc_all_test", testn, ".csv"),
sep = ";",
row.names = FALSE
)
# Accuracy for soils with less than 6% SOC
get_acc_lowsoc<- function(i2) {
lookup <- c(obs = fractions[i2])
out <- obs %>%
mutate(
pred = boot_mean_predictions[, i2],
weights = models_weights[[i2]],
indices = factor(!models_indices[[i2]], labels = c("CV", "Holdout")),
bare = obs$s2_count_max10_fuzzy > 0,
bare = case_when(
is.na(bare) ~ 0,
.default = bare
),
mean_d = (upper + lower)/2,
depth = cut(mean_d, breaks, include.lowest = TRUE),
imputed = obs$imputed
) %>%
rename(any_of(lookup)) %>%
filter(
is.finite(obs),
obs <= 6,
is.finite(pred),
is.finite(weights),
!is.na(depth),
imputed == FALSE
) %>% group_by(indices, depth) %>%
summarise(
r2 = round(get_R2w(cbind(pred, obs), weights), digits = 3),
rmse = round(get_RMSEw(cbind(pred, obs), weights), digits = 3)
) %>%
mutate(Fraction = fraction_names[i2], .before = everything())
return(out)
}
acc_lowsoc <- get_acc_lowsoc(5)
acc_lowsoc
write.table(
acc_lowsoc,
paste0(dir_results, "/boot_acc_lowsoc_test", testn, ".csv"),
sep = ";",
row.names = FALSE
)
# Accuracy for soils with less than 6% SOC
get_acc_highsoc<- function(i2) {
lookup <- c(obs = fractions[i2])
out <- obs %>%
mutate(
pred = boot_mean_predictions[, i2],
weights = models_weights[[i2]],
indices = factor(!models_indices[[i2]], labels = c("CV", "Holdout")),
bare = obs$s2_count_max10_fuzzy > 0,
bare = case_when(
is.na(bare) ~ 0,
.default = bare
),
mean_d = (upper + lower)/2,
depth = cut(mean_d, breaks, include.lowest = TRUE),
imputed = obs$imputed
) %>%
rename(any_of(lookup)) %>%
filter(
is.finite(obs),
obs > 6,
is.finite(pred),
is.finite(weights),
!is.na(depth),
imputed == FALSE
) %>% group_by(indices, depth) %>%
summarise(
r2w = round(get_R2w(cbind(pred, obs), weights), digits = 3),
rmsew = round(get_RMSEw(cbind(pred, obs), weights), digits = 3),
r2 = round(cor(pred, obs)^2, digits = 3),
rmse = round(rmse(pred, obs), digits = 3)
) %>%
mutate(Fraction = fraction_names[i2], .before = everything())
return(out)
}
acc_highsoc <- get_acc_highsoc(5)
?rmse
?RMSE
get_acc_highsoc<- function(i2) {
lookup <- c(obs = fractions[i2])
out <- obs %>%
mutate(
pred = boot_mean_predictions[, i2],
weights = models_weights[[i2]],
indices = factor(!models_indices[[i2]], labels = c("CV", "Holdout")),
bare = obs$s2_count_max10_fuzzy > 0,
bare = case_when(
is.na(bare) ~ 0,
.default = bare
),
mean_d = (upper + lower)/2,
depth = cut(mean_d, breaks, include.lowest = TRUE),
imputed = obs$imputed
) %>%
rename(any_of(lookup)) %>%
filter(
is.finite(obs),
obs > 6,
is.finite(pred),
is.finite(weights),
!is.na(depth),
imputed == FALSE
) %>% group_by(indices, depth) %>%
summarise(
r2w = round(get_R2w(cbind(pred, obs), weights), digits = 3),
rmsew = round(get_RMSEw(cbind(pred, obs), weights), digits = 3),
r2 = round(cor(pred, obs)^2, digits = 3),
rmse = round(RMSE(cbind(pred, obs)), digits = 3)
) %>%
mutate(Fraction = fraction_names[i2], .before = everything())
return(out)
}
acc_highsoc <- get_acc_highsoc(5)
get_acc_highsoc<- function(i2) {
lookup <- c(obs = fractions[i2])
out <- obs %>%
mutate(
pred = boot_mean_predictions[, i2],
weights = models_weights[[i2]],
indices = factor(!models_indices[[i2]], labels = c("CV", "Holdout")),
bare = obs$s2_count_max10_fuzzy > 0,
bare = case_when(
is.na(bare) ~ 0,
.default = bare
),
mean_d = (upper + lower)/2,
depth = cut(mean_d, breaks, include.lowest = TRUE),
imputed = obs$imputed
) %>%
rename(any_of(lookup)) %>%
filter(
is.finite(obs),
obs > 6,
is.finite(pred),
is.finite(weights),
!is.na(depth),
imputed == FALSE
) %>% group_by(indices, depth) %>%
summarise(
r2w = round(get_R2w(cbind(pred, obs), weights), digits = 3),
rmsew = round(get_RMSEw(cbind(pred, obs), weights), digits = 3),
r2 = round(cor(pred, obs)^2, digits = 3),
rmse = round(RMSE(pred, obs), digits = 3)
) %>%
mutate(Fraction = fraction_names[i2], .before = everything())
return(out)
}
acc_highsoc <- get_acc_highsoc(5)
acc_highsoc
write.table(
acc_highsoc,
paste0(dir_results, "/boot_acc_highsoc_test", testn, ".csv"),
sep = ";",
row.names = FALSE
)
