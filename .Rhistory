x,
targ,
method = "near",
datatype = dtyp
)
out2$x_count <- project(
x_count / 4,  # NB
targ,
method = "near"
)
return(out2)
}
# Function for merging maps and weights
merge_weight <- function(x, y, dtyp) {
out2 <- list()
out2$x <- terra::merge(
x = x[[1]],
y = y[[1]],
wopt = list(datatype = dtyp)
)
out2$x_count <- terra::merge(
x = x[[2]],
y = y[[2]]
)
return(out2)
}
# Stepwise aggregation
for (i in 2:nsteps) {
smoothed_down <- smooth_weight(
x = aggregated_list[[i - 1]][[1]],
x_count = aggregated_list[[i - 1]][[2]],
myfilter1
)
aggregated_list[[i]] <- agg_weight(
x = smoothed_down[[1]],
x_count = smoothed_down[[2]]
)
}
smooth_up_list[[nsteps]] <- aggregated_list[[nsteps]]
# Stepwise disaggregation
for (i in (nsteps - 1):1) {
# Disaggregate by 2
splitted <- project_weight(
x = smooth_up_list[[i + 1]][[1]],
x_count = smooth_up_list[[i + 1]][[2]],
targ = aggregated_list[[i]][[1]],
dtyp = datatype(inrast)
)
# Merge means and counts
merged <- merge_weight(
x = aggregated_list[[i]],
y = splitted,
dtyp = datatype(inrast)
)
# Weighted smoothing
smooth_up_list[[i]] <- smooth_weight(
x = merged[[1]],
x_count = merged[[2]],
filt = myfilter2
)
}
final_lyr <- smooth_up_list[[1]][[1]]
out <- list()
out$final <- terra::merge(
inrast,
final_lyr,
wopt = list(datatype = datatype(inrast))
)
out$aggregated_list <- aggregated_list
out$smooth_up_list <- smooth_up_list
return(out)
}
f <- system.file("ex/elev.tif", package = "terra")
r <- rast(f)
plot(r)
filled <- fill_gaps_gauss(r, 5)
filled
plot(filled$aggregated_list[[1]][[1]])
plot(filled$aggregated_list[[2]][[1]])
plot(filled$aggregated_list[[3]][[1]])
plot(filled$aggregated_list[[4]][[1]])
plot(filled$smooth_up_list[[1]][[1]])
plot(filled$smooth_up_list[[2]][[1]])
plot(filled$smooth_up_list[[5]][[1]])
?merge
?project
fill_gaps_gauss <- function(
inrast,
nsteps
) {
r1 <- rast(ncols = 180, nrows = 180, xmin = 0)
myfilter1 <- focalMat(r1, c(1, 2), "Gauss")
myfilter2 <- focalMat(r1, c(1, 2), "Gauss")
smooth_up_list <- list()
aggregated_list <- list()
aggregated_list[[1]] <- list()
aggregated_list[[1]][[1]] <- inrast
aggregated_list[[1]][[2]] <- !is.na(inrast)
# Function for weighted aggregation
agg_weight <- function(x, x_count) {
prod_w <- x*x_count
prod_agg <- terra::aggregate(
prod_w,
fun = "sum",
na.rm = TRUE
)
count_agg <- terra::aggregate(
x_count,
fun = "sum",
na.rm = TRUE
)
out2 <- list()
out2$mean <- prod_agg / count_agg
out2$count <- count_agg
return(out2)
}
# Function for weighted smoothing
smooth_weight <- function(x, x_count, filt) {
prod_w <- x*x_count
smooth_prod <- focal(
prod_w,
w = filt,
fun = "sum",
na.policy = "all",
na.rm = TRUE
)
smooth_count <- focal(
x_count,
w = filt,
fun = "sum",
na.policy = "all",
na.rm = TRUE
)
out2 <- list()
out2$mean <- smooth_prod / smooth_count
out2$count <- smooth_count
return(out2)
}
# Function for projecting maps and weights
project_weight <- function(x, x_count, targ, dtyp) {
out2 <- list()
out2$x <- terra::project(
x = x,
y = targ,
method = "near",
datatype = dtyp
)
out2$x_count <- terra::project(
x = x_count / 4,  # NB
y = targ,
method = "near"
)
return(out2)
}
# Function for merging maps and weights
merge_weight <- function(x, y, dtyp) {
out2 <- list()
out2$x <- terra::merge(
x = x[[1]],
y = y[[1]],
wopt = list(datatype = dtyp)
)
out2$x_count <- terra::merge(
x = x[[2]],
y = y[[2]]
)
return(out2)
}
# Stepwise aggregation
for (i in 2:nsteps) {
smoothed_down <- smooth_weight(
x = aggregated_list[[i - 1]][[1]],
x_count = aggregated_list[[i - 1]][[2]],
myfilter1
)
aggregated_list[[i]] <- agg_weight(
x = smoothed_down[[1]],
x_count = smoothed_down[[2]]
)
}
smooth_up_list[[nsteps]] <- aggregated_list[[nsteps]]
# Stepwise disaggregation
for (i in (nsteps - 1):1) {
# Disaggregate by 2
splitted <- project_weight(
x = smooth_up_list[[i + 1]][[1]],
x_count = smooth_up_list[[i + 1]][[2]],
targ = aggregated_list[[i]][[1]],
dtyp = datatype(inrast)
)
# Merge means and counts
merged <- merge_weight(
x = aggregated_list[[i]],
y = splitted,
dtyp = datatype(inrast)
)
# Weighted smoothing
smooth_up_list[[i]] <- smooth_weight(
x = merged[[1]],
x_count = merged[[2]],
filt = myfilter2
)
}
final_lyr <- smooth_up_list[[1]][[1]]
out <- list()
out$final <- terra::merge(
inrast,
final_lyr,
wopt = list(datatype = datatype(inrast))
)
out$aggregated_list <- aggregated_list
out$smooth_up_list <- smooth_up_list
return(out)
}
f <- system.file("ex/elev.tif", package = "terra")
r <- rast(f)
plot(r)
filled <- fill_gaps_gauss(r, 5)
plot(filled$aggregated_list[[4]][[1]])
plot(filled$smooth_up_list[[5]][[1]])
plot(filled$smooth_up_list[[2]][[1]])
fill_gaps_gauss <- function(
inrast,
nsteps
) {
r1 <- rast(ncols = 180, nrows = 180, xmin = 0)
myfilter1 <- focalMat(r1, c(1, 2), "Gauss")
myfilter2 <- focalMat(r1, c(1, 2), "Gauss")
smooth_up_list <- list()
aggregated_list <- list()
aggregated_list[[1]] <- list()
aggregated_list[[1]][[1]] <- inrast
aggregated_list[[1]][[2]] <- !is.na(inrast)
# Function for weighted aggregation
agg_weight <- function(x, x_count) {
prod_w <- x*x_count
prod_agg <- terra::aggregate(
prod_w,
fun = "sum",
na.rm = TRUE
)
count_agg <- terra::aggregate(
x_count,
fun = "sum",
na.rm = TRUE
)
out2 <- list()
out2$mean <- prod_agg / count_agg
out2$count <- count_agg
return(out2)
}
# Function for weighted smoothing
smooth_weight <- function(x, x_count, filt) {
prod_w <- x*x_count
smooth_prod <- focal(
prod_w,
w = filt,
fun = "sum",
na.policy = "all",
na.rm = TRUE
)
smooth_count <- focal(
x_count,
w = filt,
fun = "sum",
na.policy = "all",
na.rm = TRUE
)
out2 <- list()
out2$mean <- smooth_prod / smooth_count
out2$count <- smooth_count
return(out2)
}
# Function for projecting maps and weights
project_weight <- function(x, x_count, targ, dtyp) {
out2 <- list()
out2$x <- terra::project(
x = x,
y = targ,
method = "near",
datatype = dtyp
)
out2$x_count <- terra::project(
x = x_count / 4,  # NB
y = targ,
method = "near"
)
return(out2)
}
# Function for merging maps and weights
merge_weight <- function(x, y, dtyp) {
out2 <- list()
out2$x <- terra::merge(
x = x[[1]],
y = y[[1]],
wopt = list(datatype = dtyp)
)
out2$x_count <- terra::merge(
x = x[[2]],
y = y[[2]]
)
return(out2)
}
# Stepwise aggregation
for (i in 2:nsteps) {
smoothed_down <- smooth_weight(
x = aggregated_list[[i - 1]][[1]],
x_count = aggregated_list[[i - 1]][[2]],
myfilter1
)
aggregated_list[[i]] <- agg_weight(
x = smoothed_down[[1]],
x_count = smoothed_down[[2]]
)
}
smooth_up_list[[nsteps]] <- aggregated_list[[nsteps]]
# Stepwise disaggregation
for (i in (nsteps - 1):1) {
# Disaggregate by 2
splitted <- project_weight(
x = smooth_up_list[[i + 1]][[1]],
x_count = smooth_up_list[[i + 1]][[2]],
targ = aggregated_list[[i]][[1]],
dtyp = datatype(inrast)
)
# Merge means and counts
merged <- merge_weight(
x = aggregated_list[[i]],
y = splitted,
dtyp = datatype(inrast)
)
# Weighted smoothing
smooth_up_list[[i]] <- smooth_weight(
x = merged[[1]],
x_count = merged[[2]],
filt = myfilter2
)
}
final_lyr <- smooth_up_list[[1]][[1]]
out <- list()
out$final <- terra::merge(
inrast,
final_lyr,
wopt = list(datatype = datatype(inrast))
)
out$aggregated_list <- aggregated_list
out$smooth_up_list <- smooth_up_list
out$splitted <- splitted
out$merged <- merged
return(out)
}
f <- system.file("ex/elev.tif", package = "terra")
r <- rast(f)
plot(r)
filled <- fill_gaps_gauss(r, 5)
plot(filled$aggregated_list[[4]][[1]])
plot(filled$smooth_up_list[[2]][[1]])
plot(filled$splitted[[1]])
plot(filled$merged[[1]])
plot(filled$merged[[2]])
?ifel
fill_gaps_gauss <- function(
inrast,
nsteps
) {
r1 <- rast(ncols = 180, nrows = 180, xmin = 0)
myfilter1 <- focalMat(r1, c(1, 2), "Gauss")
myfilter2 <- focalMat(r1, c(1, 2), "Gauss")
smooth_up_list <- list()
aggregated_list <- list()
aggregated_list[[1]] <- list()
aggregated_list[[1]][[1]] <- inrast
aggregated_list[[1]][[2]] <- !is.na(inrast)
# Function for weighted aggregation
agg_weight <- function(x, x_count) {
prod_w <- x*x_count
prod_agg <- terra::aggregate(
prod_w,
fun = "sum",
na.rm = TRUE
)
count_agg <- terra::aggregate(
x_count,
fun = "sum",
na.rm = TRUE
)
out2 <- list()
out2$mean <- prod_agg / count_agg
out2$count <- count_agg
return(out2)
}
# Function for weighted smoothing
smooth_weight <- function(x, x_count, filt) {
prod_w <- x*x_count
smooth_prod <- focal(
prod_w,
w = filt,
fun = "sum",
na.policy = "all",
na.rm = TRUE
)
smooth_count <- focal(
x_count,
w = filt,
fun = "sum",
na.policy = "all",
na.rm = TRUE
)
out2 <- list()
out2$mean <- smooth_prod / smooth_count
out2$count <- smooth_count
return(out2)
}
# Function for projecting maps and weights
project_weight <- function(x, x_count, targ, dtyp) {
out2 <- list()
out2$x <- terra::project(
x = x,
y = targ,
method = "near",
datatype = dtyp
)
out2$x_count <- terra::project(
x = x_count / 4,  # NB
y = targ,
method = "near"
)
return(out2)
}
# Function for merging maps and weights
merge_weight <- function(x, y, dtyp) {
out2 <- list()
out2$x <- terra::merge(
x = x[[1]],
y = y[[1]],
wopt = list(datatype = dtyp)
)
out2$x_count <- terra::ifel(
is.na(x[[1]]),
yes = y[[2]],
no = x[[2]]
)
return(out2)
}
# Stepwise aggregation
for (i in 2:nsteps) {
smoothed_down <- smooth_weight(
x = aggregated_list[[i - 1]][[1]],
x_count = aggregated_list[[i - 1]][[2]],
myfilter1
)
aggregated_list[[i]] <- agg_weight(
x = smoothed_down[[1]],
x_count = smoothed_down[[2]]
)
}
smooth_up_list[[nsteps]] <- aggregated_list[[nsteps]]
# Stepwise disaggregation
for (i in (nsteps - 1):1) {
# Disaggregate by 2
splitted <- project_weight(
x = smooth_up_list[[i + 1]][[1]],
x_count = smooth_up_list[[i + 1]][[2]],
targ = aggregated_list[[i]][[1]],
dtyp = datatype(inrast)
)
# Merge means and counts
merged <- merge_weight(
x = aggregated_list[[i]],
y = splitted,
dtyp = datatype(inrast)
)
# Weighted smoothing
smooth_up_list[[i]] <- smooth_weight(
x = merged[[1]],
x_count = merged[[2]],
filt = myfilter2
)
}
final_lyr <- smooth_up_list[[1]][[1]]
out <- list()
out$final <- terra::merge(
inrast,
final_lyr,
wopt = list(datatype = datatype(inrast))
)
out$aggregated_list <- aggregated_list
out$smooth_up_list <- smooth_up_list
out$splitted <- splitted
out$merged <- merged
return(out)
}
f <- system.file("ex/elev.tif", package = "terra")
r <- rast(f)
plot(r)
filled <- fill_gaps_gauss(r, 5)
plot(filled$aggregated_list[[4]][[1]])
plot(filled$smooth_up_list[[2]][[1]])
plot(filled$splitted[[1]])
plot(filled$merged[[2]])
plot(filled$final)
?merge
f <- system.file("ex/elev.tif", package = "terra")
r <- rast(f)
plot(r)
filled <- fill_gaps_gauss(r, 3)
plot(filled$final)
f <- system.file("ex/elev.tif", package = "terra")
r <- rast(f)
plot(r)
filled <- fill_gaps_gauss(r, 4)
plot(filled$final)
