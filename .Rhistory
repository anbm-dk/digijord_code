)
out <- sens_spec %>% apply(., 1, mean)
out$acc_bal <- sens_spec %>%
select(Sensitivity) %>%
unlist() %>%
mean()
out$OA <- weighted.mean(ddat$acc, ddat$w_d)
out %<>% as.data.frame()
return(out)
}
) %>%
bind_rows()
JB_acc_d
JB_acc_d <- apply(
depth_weights_JB,
2,
function(x) {
ddat <- JB_df %>%
mutate(
w_d = x
) %>% filter(
imputed == FALSE,
w_d > 0,
) %>%
select(c(predicted, observed, w_d, acc)) %>%
na.omit()
sens_spec <- ddat %>%
confusion(
x = .[, 1],
y = .[, 2],
weights = .[, 3]
) %>% summary() %>%
.@.Data %>%
t() %>%
as.data.frame() %>%
select(c(Sensitivity, Specificity)) %>%
mutate(
Sensitivity = case_when(
!is.finite(Sensitivity) ~ 0,
.default = Sensitivity
)
)
out <- sens_spec %>% apply(., 1, mean)
out$BA <- sens_spec %>%
select(Sensitivity) %>%
unlist() %>%
mean()
out$OA <- weighted.mean(ddat$acc, ddat$w_d)
out %<>% as.data.frame()
return(out)
}
) %>%
bind_rows()
?pivot_longer
JB_bal_acc %>%
mutate(
Depth = w_depths
) %>%
pivot_longer(
-Depth,
)
JB_acc_d %>%
mutate(
Depth = w_depths
) %>%
pivot_longer(
-Depth,
)
JB_acc_d %>%
mutate(
Depth = w_depths
) %>%
select(-c(JB9, JB10)) %>%
pivot_longer(
-Depth,
)
JB_acc_d %>%
mutate(
Depth = w_depths
) %>%
select(-c(JB9, JB10)) %>%
pivot_longer(
-Depth,
values_to = "Accuracy"
) %>%
ggplot(aes(x = Accuracy, y = Depth)) +
geom_path() +
facet_wrap(~ name, nrow = 2)
JB_acc
JB_forplot <- c("JB1", "JB2", "JB3", "JB4", "JB5", "JB6", "JB7", "JB8", "JB11",
"JB12", "BA", "OA")
?scale_y_continuous
JB_forplot <- c("JB1", "JB2", "JB3", "JB4", "JB5", "JB6", "JB7", "JB8", "JB11",
"JB12", "BA", "OA")
JB_acc_d %>%
mutate(
Depth = w_depths
) %>%
select(-c(JB9, JB10)) %>%
pivot_longer(
-Depth,
values_to = "Accuracy"
) %>%
mutate(
name = factor(
name,
levels = JB_forplot
)
) %>%
ggplot(aes(x = Accuracy, y = Depth)) +
geom_path() +
facet_wrap(~ name, nrow = 2) +
scale_y_reverse()
JB_acc_d %>%
mutate(
Depth = w_depths
) %>%
select(-c(JB9, JB10)) %>%
pivot_longer(
-Depth,
values_to = "Accuracy"
) %>%
mutate(
name = factor(
name,
levels = JB_forplot
)
) %>%
ggplot(aes(x = Accuracy, y = Depth)) +
geom_path() +
facet_wrap(~ name, nrow = 2) +
scale_y_reverse(expand = expansion(mult = 0, add = 0))
JB_df
lapply(
c(FALSE, TRUE),
function(x2) {
out2 <- apply(
depth_weights_JB,
2,
function(x) {
ddat <- JB_df %>%
mutate(
w_d = x
) %>% filter(
imputed == FALSE,
(fold == 10) == x2,
w_d > 0,
) %>%
select(c(predicted, observed, w_d, acc)) %>%
na.omit()
sens_spec <- ddat %>%
confusion(
x = .[, 1],
y = .[, 2],
weights = .[, 3]
) %>% summary() %>%
.@.Data %>%
t() %>%
as.data.frame() %>%
select(c(Sensitivity, Specificity)) %>%
mutate(
Sensitivity = case_when(
!is.finite(Sensitivity) ~ 0,
.default = Sensitivity
)
)
out <- sens_spec %>% apply(., 1, mean)
out$BA <- sens_spec %>%
select(Sensitivity) %>%
unlist() %>%
mean()
out$OA <- weighted.mean(ddat$acc, ddat$w_d)
out %<>% as.data.frame()
return(out)
}
) %>%
bind_rows()
}
)
JB_acc_d <- lapply(
c(FALSE, TRUE),
function(x2) {
out2 <- apply(
depth_weights_JB,
2,
function(x) {
ddat <- JB_df %>%
mutate(
w_d = x
) %>% filter(
imputed == FALSE,
(fold == 10) == x2,
w_d > 0,
) %>%
select(c(predicted, observed, w_d, acc)) %>%
na.omit()
sens_spec <- ddat %>%
confusion(
x = .[, 1],
y = .[, 2],
weights = .[, 3]
) %>% summary() %>%
.@.Data %>%
t() %>%
as.data.frame() %>%
select(c(Sensitivity, Specificity)) %>%
mutate(
Sensitivity = case_when(
!is.finite(Sensitivity) ~ 0,
.default = Sensitivity
)
)
out <- sens_spec %>% apply(., 1, mean)
out$BA <- sens_spec %>%
select(Sensitivity) %>%
unlist() %>%
mean()
out$OA <- weighted.mean(ddat$acc, ddat$w_d)
out %<>% as.data.frame()
return(out)
}
) %>%
bind_rows() %>%
mutate(
Dataset = x2 + 1
)
}
) %>%
bind_rows() %>%
mutate(
Dataset = factor(Dataset, labels = c("CV", "Holdout"))
)
JB_acc_d %>%
mutate(
Depth = w_depths
) %>%
select(-c(JB9, JB10)) %>%
pivot_longer(
-Depth,
values_to = "Accuracy"
) %>%
mutate(
name = factor(
name,
levels = JB_forplot
)
) %>%
ggplot(aes(x = Accuracy, y = Depth, color = Dataset)) +
geom_path() +
facet_wrap(~ name, nrow = 2) +
scale_y_reverse(expand = expansion(mult = 0, add = 0))
JB_acc_d <- lapply(
c(FALSE, TRUE),
function(x2) {
out2 <- apply(
depth_weights_JB,
2,
function(x) {
ddat <- JB_df %>%
mutate(
w_d = x
) %>% filter(
imputed == FALSE,
(fold == 10) == x2,
w_d > 0,
) %>%
select(c(predicted, observed, w_d, acc)) %>%
na.omit()
sens_spec <- ddat %>%
confusion(
x = .[, 1],
y = .[, 2],
weights = .[, 3]
) %>% summary() %>%
.@.Data %>%
t() %>%
as.data.frame() %>%
select(c(Sensitivity, Specificity)) %>%
mutate(
Sensitivity = case_when(
!is.finite(Sensitivity) ~ 0,
.default = Sensitivity
)
)
out <- sens_spec %>% apply(., 1, mean)
out$BA <- sens_spec %>%
select(Sensitivity) %>%
unlist() %>%
mean()
out$OA <- weighted.mean(ddat$acc, ddat$w_d)
out %<>% as.data.frame()
return(out)
}
) %>%
bind_rows() %>%
mutate(
Dataset = x2 + 1,
Depth = w_depths
)
}
) %>%
bind_rows() %>%
mutate(
Dataset = factor(Dataset, labels = c("CV", "Holdout"))
)
JB_acc_d %>%
mutate(
Depth = w_depths
) %>%
select(-c(JB9, JB10)) %>%
pivot_longer(
-Depth,
values_to = "Accuracy"
) %>%
mutate(
name = factor(
name,
levels = JB_forplot
)
) %>%
ggplot(aes(x = Accuracy, y = Depth, color = Dataset)) +
geom_path() +
facet_wrap(~ name, nrow = 2) +
scale_y_reverse(expand = expansion(mult = 0, add = 0))
JB_acc_d %>%
select(-c(JB9, JB10)) %>%
pivot_longer(
-Depth,
values_to = "Accuracy"
) %>%
mutate(
name = factor(
name,
levels = JB_forplot
)
) %>%
ggplot(aes(x = Accuracy, y = Depth, color = Dataset)) +
geom_path() +
facet_wrap(~ name, nrow = 2) +
scale_y_reverse(expand = expansion(mult = 0, add = 0))
JB_acc_d %>%
select(-c(JB9, JB10)) %>%
pivot_longer(
-c(Depth, Dataset),
values_to = "Accuracy"
) %>%
mutate(
name = factor(
name,
levels = JB_forplot
)
) %>%
ggplot(aes(x = Accuracy, y = Depth, color = Dataset)) +
geom_path() +
facet_wrap(~ name, nrow = 2) +
scale_y_reverse(expand = expansion(mult = 0, add = 0))
tiff(
paste0(dir_results, "/JB_acc_test", testn, ".tiff"),
width = 40,
height = 20,
units = "cm",
res = 300
)
JB_acc_d %>%
select(-c(JB9, JB10)) %>%
pivot_longer(
-c(Depth, Dataset),
values_to = "Accuracy"
) %>%
mutate(
name = factor(
name,
levels = JB_forplot
)
) %>%
ggplot(aes(x = Accuracy, y = Depth, color = Dataset)) +
geom_path() +
facet_wrap(~ name, nrow = 2) +
scale_y_reverse(expand = expansion(mult = 0, add = 0))
try(dev.off())
tiff(
paste0(dir_results, "/JB_acc_test", testn, ".tiff"),
width = 16,
height = 10,
units = "cm",
res = 300
)
JB_acc_d %>%
select(-c(JB9, JB10)) %>%
pivot_longer(
-c(Depth, Dataset),
values_to = "Accuracy"
) %>%
mutate(
name = factor(
name,
levels = JB_forplot
)
) %>%
ggplot(aes(x = Accuracy, y = Depth, color = Dataset)) +
geom_path() +
facet_wrap(~ name, nrow = 2) +
scale_y_reverse(expand = expansion(mult = 0, add = 0))
try(dev.off())
tiff(
paste0(dir_results, "/JB_acc_test", testn, ".tiff"),
width = 16,
height = 10,
units = "cm",
res = 300
)
JB_acc_d %>%
select(-c(JB9, JB10)) %>%
pivot_longer(
-c(Depth, Dataset),
values_to = "Accuracy"
) %>%
mutate(
name = factor(
name,
levels = JB_forplot
)
) %>%
ggplot(aes(x = Accuracy, y = Depth, color = Dataset)) +
geom_path() +
facet_wrap(~ name, nrow = 2) +
scale_y_reverse(expand = expansion(mult = 0, add = 0)) +
scale_x_continuous(breaks = c(0.5, 1))
try(dev.off())
# TO DO:
# First: Predict soil drainage classes:
# Import soil drainage classes (get correct coordinates first)
# Extract covariates
# Include texture predictions as covariates
# Rearrange tiles for texture predictions to fit covariate structure
# Make summary function with weighted MAE for accuracy
# Calculate weights
# Train xgboost regression model
# Analyse results
# Make map for test area
# Make national map
# Secondly: Predict artificially drained areas
# Import and merge data:
# - 7 km grid (original coordinates) (or new LR pts?)
# - data from orbicon
# - data from Landskontoret for Planteavl
# Aggregate relevant covariates at field scale (including new texture maps and
# soil drainage classes)
# Split into tiles
# Extract covariates
# Make summary function for weighted accuracy (or weighted AUC?)
# Calculate weights (sum of weights should be equal for drained and undrained
# points)
# Train xgboost classification model
# Analyse results
# Make map for test area
# Make national map
# 1: Start up
library(terra)
library(magrittr)
library(tools)
library(dplyr)
library(caret)
library(tibble)
library(tidyr)
library(sf)
library(exactextractr)
library(party)
library(rpart)
library(doParallel)
library(spatstat) # weights
library(RODBC)
dir_code <- getwd()
root <- dirname(dir_code)
dir_dat <- paste0(root, "/digijord_data/")
testn <- 13
mycrs <- "EPSG:25832"
# Results folder
dir_results <- dir_dat %>%
paste0(., "/results_test_", testn, "/") %T>%
dir.create()
# Part 1: Soil drainage classes
profiles_shp <- dir_dat %>%
paste0(
.,
"/observations/profiles/Profiles_coordinates_new/",
"Profiles_coordinates_new.shp"
) %>%
vect()
# 1.1: Correct coordinates for profiles
profiles_db <- dir_dat %>%
paste0(., "/observations/profiles/DDJD2023.accdb")
con3 <- odbcConnectAccess2007(profiles_db)
profiles_DC <- sqlFetch(con3, "PROFIL") %>%
select(c(PROFILNR, DRAENKL)) %>%
drop_na() %>%
filter(DRAENKL %in% 1:5)
profiles_DC %<>% inner_join(
x = values(profiles_shp),
y = .,
by = "PROFILNR"
) %>% arrange(
PROFILNR
) %>% vect(
geom = c("x", "y"),
crs = mycrs,
keepgeom = TRUE
)
plot(profiles_DC, "DRAENKL")
library(viridisLite)
plot(profiles_DC, "DRAENKL", col = cividis(5))
plot(profiles_DC, "DRAENKL", col = rev(cividis(5)))
